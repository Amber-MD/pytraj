/* Generated by Cython 0.24 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [], 
        "language": "c++"
    }
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_24"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
  #define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pytraj__core__c_dict
#define __PYX_HAVE_API__pytraj__core__c_dict
#include "Traj_PDBfile.h"
#include "MetaData.h"
#include "ParmFile.h"
#include "Atom.h"
#include "Traj_Mol2File.h"
#include "Mol2File.h"
#include "Box.h"
#include "TrajectoryFile.h"
#include "DataSet.h"
#include "Action.h"
#include "Analysis.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "pytraj/core/c_dict.pyx",
};

/*--- Type declarations ---*/

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectGetAttrStr.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** value1, PyObject** value2,
                                             int is_tuple, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::scalarType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Traj_Mol2File_3a__3a_MOL2WRITEMODE(Traj_Mol2File::MOL2WRITEMODE value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Traj_PDBfile_3a__3a_PDBWRITEMODE(Traj_PDBfile::PDBWRITEMODE value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ParmFile_3a__3a_ParmFormatType(ParmFile::ParmFormatType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::AtomicElementType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Box_3a__3a_BoxType(Box::BoxType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::TrajFormatType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::DataType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Action_3a__3a_RetType(Action::RetType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'pytraj.core.c_dict' */
#define __Pyx_MODULE_NAME "pytraj.core.c_dict"
int __pyx_module_is_main_pytraj__core__c_dict = 0;

/* Implementation of 'pytraj.core.c_dict' */
static const char __pyx_k_v[] = "v";
static const char __pyx_k_OK[] = "OK";
static const char __pyx_k_C2P[] = "C2P";
static const char __pyx_k_CIF[] = "CIF";
static const char __pyx_k_DCD[] = "DCD";
static const char __pyx_k_ERR[] = "ERR";
static const char __pyx_k_H1P[] = "H1P";
static const char __pyx_k_MOL[] = "MOL";
static const char __pyx_k_NOE[] = "NOE";
static const char __pyx_k_NU1[] = "NU1";
static const char __pyx_k_NU2[] = "NU2";
static const char __pyx_k_PDB[] = "PDB";
static const char __pyx_k_PHI[] = "PHI";
static const char __pyx_k_PSI[] = "PSI";
static const char __pyx_k_SDF[] = "SDF";
static const char __pyx_k_SQM[] = "SQM";
static const char __pyx_k_TIN[] = "TIN";
static const char __pyx_k_TRX[] = "TRX";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_BETA[] = "BETA";
static const char __pyx_k_CHIN[] = "CHIN";
static const char __pyx_k_CHIP[] = "CHIP";
static const char __pyx_k_DIST[] = "DIST";
static const char __pyx_k_Dict[] = "Dict";
static const char __pyx_k_GOLD[] = "GOLD";
static const char __pyx_k_GRID[] = "GRID";
static const char __pyx_k_IDEA[] = "IDEA";
static const char __pyx_k_IRON[] = "IRON";
static const char __pyx_k_LEAD[] = "LEAD";
static const char __pyx_k_MESH[] = "MESH";
static const char __pyx_k_MOL2[] = "MOL2";
static const char __pyx_k_NEON[] = "NEON";
static const char __pyx_k_NONE[] = "NONE";
static const char __pyx_k_TRAJ[] = "TRAJ";
static const char __pyx_k_ZETA[] = "ZETA";
static const char __pyx_k_ZINC[] = "ZINC";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_ALPHA[] = "ALPHA";
static const char __pyx_k_ARGON[] = "ARGON";
static const char __pyx_k_BORON[] = "BORON";
static const char __pyx_k_COVAR[] = "COVAR";
static const char __pyx_k_DELTA[] = "DELTA";
static const char __pyx_k_FLOAT[] = "FLOAT";
static const char __pyx_k_GAMMA[] = "GAMMA";
static const char __pyx_k_MODEL[] = "MODEL";
static const char __pyx_k_MODES[] = "MODES";
static const char __pyx_k_MULTI[] = "MULTI";
static const char __pyx_k_NOBOX[] = "NOBOX";
static const char __pyx_k_OMEGA[] = "OMEGA";
static const char __pyx_k_ORTHO[] = "ORTHO";
static const char __pyx_k_RADON[] = "RADON";
static const char __pyx_k_XENON[] = "XENON";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_BARIUM[] = "BARIUM";
static const char __pyx_k_BINPOS[] = "BINPOS";
static const char __pyx_k_CARBON[] = "CARBON";
static const char __pyx_k_CESIUM[] = "CESIUM";
static const char __pyx_k_COBALT[] = "COBALT";
static const char __pyx_k_COORDS[] = "COORDS";
static const char __pyx_k_COPPER[] = "COPPER";
static const char __pyx_k_CORREL[] = "CORREL";
static const char __pyx_k_DOUBLE[] = "DOUBLE";
static const char __pyx_k_GMXTOP[] = "GMXTOP";
static const char __pyx_k_GMXTRX[] = "GMXTRX";
static const char __pyx_k_HELIUM[] = "HELIUM";
static const char __pyx_k_INDIUM[] = "INDIUM";
static const char __pyx_k_IODINE[] = "IODINE";
static const char __pyx_k_MAT3X3[] = "MAT3X3";
static const char __pyx_k_NICKEL[] = "NICKEL";
static const char __pyx_k_OSMIUM[] = "OSMIUM";
static const char __pyx_k_OXYGEN[] = "OXYGEN";
static const char __pyx_k_PUCKER[] = "PUCKER";
static const char __pyx_k_RADIUM[] = "RADIUM";
static const char __pyx_k_REMLOG[] = "REMLOG";
static const char __pyx_k_SILVER[] = "SILVER";
static const char __pyx_k_SINGLE[] = "SINGLE";
static const char __pyx_k_SODIUM[] = "SODIUM";
static const char __pyx_k_STRING[] = "STRING";
static const char __pyx_k_SULFUR[] = "SULFUR";
static const char __pyx_k_TINKER[] = "TINKER";
static const char __pyx_k_VECTOR[] = "VECTOR";
static const char __pyx_k_XYMESH[] = "XYMESH";
static const char __pyx_k_ARSENIC[] = "ARSENIC";
static const char __pyx_k_BISMUTH[] = "BISMUTH";
static const char __pyx_k_BROMINE[] = "BROMINE";
static const char __pyx_k_CADMIUM[] = "CADMIUM";
static const char __pyx_k_CALCIUM[] = "CALCIUM";
static const char __pyx_k_CIFFILE[] = "CIFFILE";
static const char __pyx_k_CONFLIB[] = "CONFLIB";
static const char __pyx_k_EPSILON[] = "EPSILON";
static const char __pyx_k_EXTRAPT[] = "EXTRAPT";
static const char __pyx_k_GALLIUM[] = "GALLIUM";
static const char __pyx_k_HAFNIUM[] = "HAFNIUM";
static const char __pyx_k_INTEGER[] = "INTEGER";
static const char __pyx_k_IREDMAT[] = "IREDMAT";
static const char __pyx_k_IREDVEC[] = "IREDVEC";
static const char __pyx_k_IRIDIUM[] = "IRIDIUM";
static const char __pyx_k_KRYPTON[] = "KRYPTON";
static const char __pyx_k_LITHIUM[] = "LITHIUM";
static const char __pyx_k_MERCURY[] = "MERCURY";
static const char __pyx_k_MWCOVAR[] = "MWCOVAR";
static const char __pyx_k_NIOBIUM[] = "NIOBIUM";
static const char __pyx_k_PDBFILE[] = "PDBFILE";
static const char __pyx_k_RHENIUM[] = "RHENIUM";
static const char __pyx_k_RHODIUM[] = "RHODIUM";
static const char __pyx_k_RHOMBIC[] = "RHOMBIC";
static const char __pyx_k_SDFFILE[] = "SDFFILE";
static const char __pyx_k_SILICON[] = "SILICON";
static const char __pyx_k_YTTRIUM[] = "YTTRIUM";
static const char __pyx_k_get_key[] = "get_key";
static const char __pyx_k_ALUMINUM[] = "ALUMINUM";
static const char __pyx_k_ANTIMONY[] = "ANTIMONY";
static const char __pyx_k_ASTATINE[] = "ASTATINE";
static const char __pyx_k_CHLORINE[] = "CHLORINE";
static const char __pyx_k_CHROMIUM[] = "CHROMIUM";
static const char __pyx_k_DIHCOVAR[] = "DIHCOVAR";
static const char __pyx_k_FLUORINE[] = "FLUORINE";
static const char __pyx_k_FRANCIUM[] = "FRANCIUM";
static const char __pyx_k_GRID_FLT[] = "GRID_FLT";
static const char __pyx_k_HYDROGEN[] = "HYDROGEN";
static const char __pyx_k_LUTETIUM[] = "LUTETIUM";
static const char __pyx_k_MOL2FILE[] = "MOL2FILE";
static const char __pyx_k_NITROGEN[] = "NITROGEN";
static const char __pyx_k_NONORTHO[] = "NONORTHO";
static const char __pyx_k_PLATINUM[] = "PLATINUM";
static const char __pyx_k_POLONIUM[] = "POLONIUM";
static const char __pyx_k_RUBIDIUM[] = "RUBIDIUM";
static const char __pyx_k_SCANDIUM[] = "SCANDIUM";
static const char __pyx_k_SELENIUM[] = "SELENIUM";
static const char __pyx_k_TANTALUM[] = "TANTALUM";
static const char __pyx_k_THALLIUM[] = "THALLIUM";
static const char __pyx_k_TITANIUM[] = "TITANIUM";
static const char __pyx_k_TOPOLOGY[] = "TOPOLOGY";
static const char __pyx_k_TRUNCOCT[] = "TRUNCOCT";
static const char __pyx_k_TUNGSTEN[] = "TUNGSTEN";
static const char __pyx_k_VANADIUM[] = "VANADIUM";
static const char __pyx_k_AMBERPARM[] = "AMBERPARM";
static const char __pyx_k_AMBERTRAJ[] = "AMBERTRAJ";
static const char __pyx_k_BERYLLIUM[] = "BERYLLIUM";
static const char __pyx_k_CHARMMDCD[] = "CHARMMDCD";
static const char __pyx_k_CHARMMPSF[] = "CHARMMPSF";
static const char __pyx_k_DISTCOVAR[] = "DISTCOVAR";
static const char __pyx_k_GERMANIUM[] = "GERMANIUM";
static const char __pyx_k_MAGNESIUM[] = "MAGNESIUM";
static const char __pyx_k_MANGANESE[] = "MANGANESE";
static const char __pyx_k_MATRIX3X3[] = "MATRIX3X3";
static const char __pyx_k_PALLADIUM[] = "PALLADIUM";
static const char __pyx_k_POTASSIUM[] = "POTASSIUM";
static const char __pyx_k_REFERENCE[] = "REFERENCE";
static const char __pyx_k_REF_FRAME[] = "REF_FRAME";
static const char __pyx_k_RUTHENIUM[] = "RUTHENIUM";
static const char __pyx_k_STRONTIUM[] = "STRONTIUM";
static const char __pyx_k_TELLURIUM[] = "TELLURIUM";
static const char __pyx_k_UNDEFINED[] = "UNDEFINED";
static const char __pyx_k_ZIRCONIUM[] = "ZIRCONIUM";
static const char __pyx_k_iteritems[] = "iteritems";
static const char __pyx_k_GRID_FLOAT[] = "GRID_FLOAT";
static const char __pyx_k_MATRIX_DBL[] = "MATRIX_DBL";
static const char __pyx_k_MATRIX_FLT[] = "MATRIX_FLT";
static const char __pyx_k_MOLYBDENUM[] = "MOLYBDENUM";
static const char __pyx_k_PHOSPHORUS[] = "PHOSPHORUS";
static const char __pyx_k_TECHNETIUM[] = "TECHNETIUM";
static const char __pyx_k_AMBERNETCDF[] = "AMBERNETCDF";
static const char __pyx_k_BoxTypeDict[] = "BoxTypeDict";
static const char __pyx_k_GRID_DOUBLE[] = "GRID_DOUBLE";
static const char __pyx_k_AMBERRESTART[] = "AMBERRESTART";
static const char __pyx_k_DataTypeDict[] = "DataTypeDict";
static const char __pyx_k_MATRIX_FLOAT[] = "MATRIX_FLOAT";
static const char __pyx_k_UNKNOWN_DATA[] = "UNKNOWN_DATA ";
static const char __pyx_k_UNKNOWN_PARM[] = "UNKNOWN_PARM";
static const char __pyx_k_MATRIX_DOUBLE[] = "MATRIX_DOUBLE";
static const char __pyx_k_RetActionDict[] = "RetActionDict";
static const char __pyx_k_AMBERRESTARTNC[] = "AMBERRESTARTNC";
static const char __pyx_k_ParmFormatDict[] = "ParmFormatDict";
static const char __pyx_k_ScalarTypeDict[] = "ScalarTypeDict";
static const char __pyx_k_TrajFormatDict[] = "TrajFormatDict";
static const char __pyx_k_UNKNOWN_ELEMENT[] = "UNKNOWN_ELEMENT";
static const char __pyx_k_PDBWRITEMODEDict[] = "PDBWRITEMODEDict";
static const char __pyx_k_AtomicElementDict[] = "AtomicElementDict";
static const char __pyx_k_MOL2WRITEMODEDict[] = "MOL2WRITEMODEDict";
static const char __pyx_k_pytraj_core_c_dict[] = "pytraj.core.c_dict";
static const char __pyx_k_net_casegroupp_u1_haichit_pytra[] = "/net/casegroupp/u1/haichit/pytraj_git/pytraj/pytraj/core/c_dict.pyx";
static PyObject *__pyx_n_s_ALPHA;
static PyObject *__pyx_n_s_ALUMINUM;
static PyObject *__pyx_n_s_AMBERNETCDF;
static PyObject *__pyx_n_s_AMBERPARM;
static PyObject *__pyx_n_s_AMBERRESTART;
static PyObject *__pyx_n_s_AMBERRESTARTNC;
static PyObject *__pyx_n_s_AMBERTRAJ;
static PyObject *__pyx_n_s_ANTIMONY;
static PyObject *__pyx_n_s_ARGON;
static PyObject *__pyx_n_s_ARSENIC;
static PyObject *__pyx_n_s_ASTATINE;
static PyObject *__pyx_n_s_AtomicElementDict;
static PyObject *__pyx_n_s_BARIUM;
static PyObject *__pyx_n_s_BERYLLIUM;
static PyObject *__pyx_n_s_BETA;
static PyObject *__pyx_n_s_BINPOS;
static PyObject *__pyx_n_s_BISMUTH;
static PyObject *__pyx_n_s_BORON;
static PyObject *__pyx_n_s_BROMINE;
static PyObject *__pyx_n_s_BoxTypeDict;
static PyObject *__pyx_n_s_C2P;
static PyObject *__pyx_n_s_CADMIUM;
static PyObject *__pyx_n_s_CALCIUM;
static PyObject *__pyx_n_s_CARBON;
static PyObject *__pyx_n_s_CESIUM;
static PyObject *__pyx_n_s_CHARMMDCD;
static PyObject *__pyx_n_s_CHARMMPSF;
static PyObject *__pyx_n_s_CHIN;
static PyObject *__pyx_n_s_CHIP;
static PyObject *__pyx_n_s_CHLORINE;
static PyObject *__pyx_n_s_CHROMIUM;
static PyObject *__pyx_n_s_CIF;
static PyObject *__pyx_n_s_CIFFILE;
static PyObject *__pyx_n_s_COBALT;
static PyObject *__pyx_n_s_CONFLIB;
static PyObject *__pyx_n_s_COORDS;
static PyObject *__pyx_n_s_COPPER;
static PyObject *__pyx_n_s_CORREL;
static PyObject *__pyx_n_s_COVAR;
static PyObject *__pyx_n_s_DCD;
static PyObject *__pyx_n_s_DELTA;
static PyObject *__pyx_n_s_DIHCOVAR;
static PyObject *__pyx_n_s_DIST;
static PyObject *__pyx_n_s_DISTCOVAR;
static PyObject *__pyx_n_s_DOUBLE;
static PyObject *__pyx_n_s_DataTypeDict;
static PyObject *__pyx_n_s_Dict;
static PyObject *__pyx_n_s_EPSILON;
static PyObject *__pyx_n_s_ERR;
static PyObject *__pyx_n_s_EXTRAPT;
static PyObject *__pyx_n_s_FLOAT;
static PyObject *__pyx_n_s_FLUORINE;
static PyObject *__pyx_n_s_FRANCIUM;
static PyObject *__pyx_n_s_GALLIUM;
static PyObject *__pyx_n_s_GAMMA;
static PyObject *__pyx_n_s_GERMANIUM;
static PyObject *__pyx_n_s_GMXTOP;
static PyObject *__pyx_n_s_GMXTRX;
static PyObject *__pyx_n_s_GOLD;
static PyObject *__pyx_n_s_GRID;
static PyObject *__pyx_n_s_GRID_DOUBLE;
static PyObject *__pyx_n_s_GRID_FLOAT;
static PyObject *__pyx_n_s_GRID_FLT;
static PyObject *__pyx_n_s_H1P;
static PyObject *__pyx_n_s_HAFNIUM;
static PyObject *__pyx_n_s_HELIUM;
static PyObject *__pyx_n_s_HYDROGEN;
static PyObject *__pyx_n_s_IDEA;
static PyObject *__pyx_n_s_INDIUM;
static PyObject *__pyx_n_s_INTEGER;
static PyObject *__pyx_n_s_IODINE;
static PyObject *__pyx_n_s_IREDMAT;
static PyObject *__pyx_n_s_IREDVEC;
static PyObject *__pyx_n_s_IRIDIUM;
static PyObject *__pyx_n_s_IRON;
static PyObject *__pyx_n_s_KRYPTON;
static PyObject *__pyx_n_s_LEAD;
static PyObject *__pyx_n_s_LITHIUM;
static PyObject *__pyx_n_s_LUTETIUM;
static PyObject *__pyx_n_s_MAGNESIUM;
static PyObject *__pyx_n_s_MANGANESE;
static PyObject *__pyx_n_s_MAT3X3;
static PyObject *__pyx_n_s_MATRIX3X3;
static PyObject *__pyx_n_s_MATRIX_DBL;
static PyObject *__pyx_n_s_MATRIX_DOUBLE;
static PyObject *__pyx_n_s_MATRIX_FLOAT;
static PyObject *__pyx_n_s_MATRIX_FLT;
static PyObject *__pyx_n_s_MERCURY;
static PyObject *__pyx_n_s_MESH;
static PyObject *__pyx_n_s_MODEL;
static PyObject *__pyx_n_s_MODES;
static PyObject *__pyx_n_s_MOL;
static PyObject *__pyx_n_s_MOL2;
static PyObject *__pyx_n_s_MOL2FILE;
static PyObject *__pyx_n_s_MOL2WRITEMODEDict;
static PyObject *__pyx_n_s_MOLYBDENUM;
static PyObject *__pyx_n_s_MULTI;
static PyObject *__pyx_n_s_MWCOVAR;
static PyObject *__pyx_n_s_NEON;
static PyObject *__pyx_n_s_NICKEL;
static PyObject *__pyx_n_s_NIOBIUM;
static PyObject *__pyx_n_s_NITROGEN;
static PyObject *__pyx_n_s_NOBOX;
static PyObject *__pyx_n_s_NOE;
static PyObject *__pyx_n_s_NONE;
static PyObject *__pyx_n_s_NONORTHO;
static PyObject *__pyx_n_s_NU1;
static PyObject *__pyx_n_s_NU2;
static PyObject *__pyx_n_s_OK;
static PyObject *__pyx_n_s_OMEGA;
static PyObject *__pyx_n_s_ORTHO;
static PyObject *__pyx_n_s_OSMIUM;
static PyObject *__pyx_n_s_OXYGEN;
static PyObject *__pyx_n_s_PALLADIUM;
static PyObject *__pyx_n_s_PDB;
static PyObject *__pyx_n_s_PDBFILE;
static PyObject *__pyx_n_s_PDBWRITEMODEDict;
static PyObject *__pyx_n_s_PHI;
static PyObject *__pyx_n_s_PHOSPHORUS;
static PyObject *__pyx_n_s_PLATINUM;
static PyObject *__pyx_n_s_POLONIUM;
static PyObject *__pyx_n_s_POTASSIUM;
static PyObject *__pyx_n_s_PSI;
static PyObject *__pyx_n_s_PUCKER;
static PyObject *__pyx_n_s_ParmFormatDict;
static PyObject *__pyx_n_s_RADIUM;
static PyObject *__pyx_n_s_RADON;
static PyObject *__pyx_n_s_REFERENCE;
static PyObject *__pyx_n_s_REF_FRAME;
static PyObject *__pyx_n_s_REMLOG;
static PyObject *__pyx_n_s_RHENIUM;
static PyObject *__pyx_n_s_RHODIUM;
static PyObject *__pyx_n_s_RHOMBIC;
static PyObject *__pyx_n_s_RUBIDIUM;
static PyObject *__pyx_n_s_RUTHENIUM;
static PyObject *__pyx_n_s_RetActionDict;
static PyObject *__pyx_n_s_SCANDIUM;
static PyObject *__pyx_n_s_SDF;
static PyObject *__pyx_n_s_SDFFILE;
static PyObject *__pyx_n_s_SELENIUM;
static PyObject *__pyx_n_s_SILICON;
static PyObject *__pyx_n_s_SILVER;
static PyObject *__pyx_n_s_SINGLE;
static PyObject *__pyx_n_s_SODIUM;
static PyObject *__pyx_n_s_SQM;
static PyObject *__pyx_n_s_STRING;
static PyObject *__pyx_n_s_STRONTIUM;
static PyObject *__pyx_n_s_SULFUR;
static PyObject *__pyx_n_s_ScalarTypeDict;
static PyObject *__pyx_n_s_TANTALUM;
static PyObject *__pyx_n_s_TECHNETIUM;
static PyObject *__pyx_n_s_TELLURIUM;
static PyObject *__pyx_n_s_THALLIUM;
static PyObject *__pyx_n_s_TIN;
static PyObject *__pyx_n_s_TINKER;
static PyObject *__pyx_n_s_TITANIUM;
static PyObject *__pyx_n_s_TOPOLOGY;
static PyObject *__pyx_n_s_TRAJ;
static PyObject *__pyx_n_s_TRUNCOCT;
static PyObject *__pyx_n_s_TRX;
static PyObject *__pyx_n_s_TUNGSTEN;
static PyObject *__pyx_n_s_TrajFormatDict;
static PyObject *__pyx_n_s_UNDEFINED;
static PyObject *__pyx_kp_s_UNKNOWN_DATA;
static PyObject *__pyx_n_s_UNKNOWN_ELEMENT;
static PyObject *__pyx_n_s_UNKNOWN_PARM;
static PyObject *__pyx_n_s_VANADIUM;
static PyObject *__pyx_n_s_VECTOR;
static PyObject *__pyx_n_s_XENON;
static PyObject *__pyx_n_s_XYMESH;
static PyObject *__pyx_n_s_YTTRIUM;
static PyObject *__pyx_n_s_ZETA;
static PyObject *__pyx_n_s_ZINC;
static PyObject *__pyx_n_s_ZIRCONIUM;
static PyObject *__pyx_n_s_get_key;
static PyObject *__pyx_n_s_iteritems;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_kp_s_net_casegroupp_u1_haichit_pytra;
static PyObject *__pyx_n_s_pytraj_core_c_dict;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_pf_6pytraj_4core_6c_dict_get_key(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_value, PyObject *__pyx_v_Dict); /* proto */
static PyObject *__pyx_tuple_;
static PyObject *__pyx_codeobj__2;

/* "pytraj/core/c_dict.pyx":4
 * 
 * 
 * def get_key(value, dict Dict):             # <<<<<<<<<<<<<<
 *     """return the first key having Dict[key] == value"""
 *     for key, v in Dict.iteritems():
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_6c_dict_1get_key(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pytraj_4core_6c_dict_get_key[] = "get_key(value, dict Dict)\nreturn the first key having Dict[key] == value";
static PyMethodDef __pyx_mdef_6pytraj_4core_6c_dict_1get_key = {"get_key", (PyCFunction)__pyx_pw_6pytraj_4core_6c_dict_1get_key, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pytraj_4core_6c_dict_get_key};
static PyObject *__pyx_pw_6pytraj_4core_6c_dict_1get_key(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_Dict = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_key (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,&__pyx_n_s_Dict,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Dict)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_key", 1, 2, 2, 1); __PYX_ERR(0, 4, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_key") < 0)) __PYX_ERR(0, 4, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_value = values[0];
    __pyx_v_Dict = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_key", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pytraj.core.c_dict.get_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Dict), (&PyDict_Type), 1, "Dict", 1))) __PYX_ERR(0, 4, __pyx_L1_error)
  __pyx_r = __pyx_pf_6pytraj_4core_6c_dict_get_key(__pyx_self, __pyx_v_value, __pyx_v_Dict);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_6c_dict_get_key(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_value, PyObject *__pyx_v_Dict) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("get_key", 0);

  /* "pytraj/core/c_dict.pyx":6
 * def get_key(value, dict Dict):
 *     """return the first key having Dict[key] == value"""
 *     for key, v in Dict.iteritems():             # <<<<<<<<<<<<<<
 *         if v == value:
 *             return key
 */
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_Dict == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    __PYX_ERR(0, 6, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_Dict, 1, __pyx_n_s_iteritems, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "pytraj/core/c_dict.pyx":7
 *     """return the first key having Dict[key] == value"""
 *     for key, v in Dict.iteritems():
 *         if v == value:             # <<<<<<<<<<<<<<
 *             return key
 * 
 */
    __pyx_t_6 = PyObject_RichCompare(__pyx_v_v, __pyx_v_value, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 7, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 7, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_8) {

      /* "pytraj/core/c_dict.pyx":8
 *     for key, v in Dict.iteritems():
 *         if v == value:
 *             return key             # <<<<<<<<<<<<<<
 * 
 * ScalarTypeDict = {
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_key);
      __pyx_r = __pyx_v_key;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "pytraj/core/c_dict.pyx":7
 *     """return the first key having Dict[key] == value"""
 *     for key, v in Dict.iteritems():
 *         if v == value:             # <<<<<<<<<<<<<<
 *             return key
 * 
 */
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/core/c_dict.pyx":4
 * 
 * 
 * def get_key(value, dict Dict):             # <<<<<<<<<<<<<<
 *     """return the first key having Dict[key] == value"""
 *     for key, v in Dict.iteritems():
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pytraj.core.c_dict.get_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "c_dict",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ALPHA, __pyx_k_ALPHA, sizeof(__pyx_k_ALPHA), 0, 0, 1, 1},
  {&__pyx_n_s_ALUMINUM, __pyx_k_ALUMINUM, sizeof(__pyx_k_ALUMINUM), 0, 0, 1, 1},
  {&__pyx_n_s_AMBERNETCDF, __pyx_k_AMBERNETCDF, sizeof(__pyx_k_AMBERNETCDF), 0, 0, 1, 1},
  {&__pyx_n_s_AMBERPARM, __pyx_k_AMBERPARM, sizeof(__pyx_k_AMBERPARM), 0, 0, 1, 1},
  {&__pyx_n_s_AMBERRESTART, __pyx_k_AMBERRESTART, sizeof(__pyx_k_AMBERRESTART), 0, 0, 1, 1},
  {&__pyx_n_s_AMBERRESTARTNC, __pyx_k_AMBERRESTARTNC, sizeof(__pyx_k_AMBERRESTARTNC), 0, 0, 1, 1},
  {&__pyx_n_s_AMBERTRAJ, __pyx_k_AMBERTRAJ, sizeof(__pyx_k_AMBERTRAJ), 0, 0, 1, 1},
  {&__pyx_n_s_ANTIMONY, __pyx_k_ANTIMONY, sizeof(__pyx_k_ANTIMONY), 0, 0, 1, 1},
  {&__pyx_n_s_ARGON, __pyx_k_ARGON, sizeof(__pyx_k_ARGON), 0, 0, 1, 1},
  {&__pyx_n_s_ARSENIC, __pyx_k_ARSENIC, sizeof(__pyx_k_ARSENIC), 0, 0, 1, 1},
  {&__pyx_n_s_ASTATINE, __pyx_k_ASTATINE, sizeof(__pyx_k_ASTATINE), 0, 0, 1, 1},
  {&__pyx_n_s_AtomicElementDict, __pyx_k_AtomicElementDict, sizeof(__pyx_k_AtomicElementDict), 0, 0, 1, 1},
  {&__pyx_n_s_BARIUM, __pyx_k_BARIUM, sizeof(__pyx_k_BARIUM), 0, 0, 1, 1},
  {&__pyx_n_s_BERYLLIUM, __pyx_k_BERYLLIUM, sizeof(__pyx_k_BERYLLIUM), 0, 0, 1, 1},
  {&__pyx_n_s_BETA, __pyx_k_BETA, sizeof(__pyx_k_BETA), 0, 0, 1, 1},
  {&__pyx_n_s_BINPOS, __pyx_k_BINPOS, sizeof(__pyx_k_BINPOS), 0, 0, 1, 1},
  {&__pyx_n_s_BISMUTH, __pyx_k_BISMUTH, sizeof(__pyx_k_BISMUTH), 0, 0, 1, 1},
  {&__pyx_n_s_BORON, __pyx_k_BORON, sizeof(__pyx_k_BORON), 0, 0, 1, 1},
  {&__pyx_n_s_BROMINE, __pyx_k_BROMINE, sizeof(__pyx_k_BROMINE), 0, 0, 1, 1},
  {&__pyx_n_s_BoxTypeDict, __pyx_k_BoxTypeDict, sizeof(__pyx_k_BoxTypeDict), 0, 0, 1, 1},
  {&__pyx_n_s_C2P, __pyx_k_C2P, sizeof(__pyx_k_C2P), 0, 0, 1, 1},
  {&__pyx_n_s_CADMIUM, __pyx_k_CADMIUM, sizeof(__pyx_k_CADMIUM), 0, 0, 1, 1},
  {&__pyx_n_s_CALCIUM, __pyx_k_CALCIUM, sizeof(__pyx_k_CALCIUM), 0, 0, 1, 1},
  {&__pyx_n_s_CARBON, __pyx_k_CARBON, sizeof(__pyx_k_CARBON), 0, 0, 1, 1},
  {&__pyx_n_s_CESIUM, __pyx_k_CESIUM, sizeof(__pyx_k_CESIUM), 0, 0, 1, 1},
  {&__pyx_n_s_CHARMMDCD, __pyx_k_CHARMMDCD, sizeof(__pyx_k_CHARMMDCD), 0, 0, 1, 1},
  {&__pyx_n_s_CHARMMPSF, __pyx_k_CHARMMPSF, sizeof(__pyx_k_CHARMMPSF), 0, 0, 1, 1},
  {&__pyx_n_s_CHIN, __pyx_k_CHIN, sizeof(__pyx_k_CHIN), 0, 0, 1, 1},
  {&__pyx_n_s_CHIP, __pyx_k_CHIP, sizeof(__pyx_k_CHIP), 0, 0, 1, 1},
  {&__pyx_n_s_CHLORINE, __pyx_k_CHLORINE, sizeof(__pyx_k_CHLORINE), 0, 0, 1, 1},
  {&__pyx_n_s_CHROMIUM, __pyx_k_CHROMIUM, sizeof(__pyx_k_CHROMIUM), 0, 0, 1, 1},
  {&__pyx_n_s_CIF, __pyx_k_CIF, sizeof(__pyx_k_CIF), 0, 0, 1, 1},
  {&__pyx_n_s_CIFFILE, __pyx_k_CIFFILE, sizeof(__pyx_k_CIFFILE), 0, 0, 1, 1},
  {&__pyx_n_s_COBALT, __pyx_k_COBALT, sizeof(__pyx_k_COBALT), 0, 0, 1, 1},
  {&__pyx_n_s_CONFLIB, __pyx_k_CONFLIB, sizeof(__pyx_k_CONFLIB), 0, 0, 1, 1},
  {&__pyx_n_s_COORDS, __pyx_k_COORDS, sizeof(__pyx_k_COORDS), 0, 0, 1, 1},
  {&__pyx_n_s_COPPER, __pyx_k_COPPER, sizeof(__pyx_k_COPPER), 0, 0, 1, 1},
  {&__pyx_n_s_CORREL, __pyx_k_CORREL, sizeof(__pyx_k_CORREL), 0, 0, 1, 1},
  {&__pyx_n_s_COVAR, __pyx_k_COVAR, sizeof(__pyx_k_COVAR), 0, 0, 1, 1},
  {&__pyx_n_s_DCD, __pyx_k_DCD, sizeof(__pyx_k_DCD), 0, 0, 1, 1},
  {&__pyx_n_s_DELTA, __pyx_k_DELTA, sizeof(__pyx_k_DELTA), 0, 0, 1, 1},
  {&__pyx_n_s_DIHCOVAR, __pyx_k_DIHCOVAR, sizeof(__pyx_k_DIHCOVAR), 0, 0, 1, 1},
  {&__pyx_n_s_DIST, __pyx_k_DIST, sizeof(__pyx_k_DIST), 0, 0, 1, 1},
  {&__pyx_n_s_DISTCOVAR, __pyx_k_DISTCOVAR, sizeof(__pyx_k_DISTCOVAR), 0, 0, 1, 1},
  {&__pyx_n_s_DOUBLE, __pyx_k_DOUBLE, sizeof(__pyx_k_DOUBLE), 0, 0, 1, 1},
  {&__pyx_n_s_DataTypeDict, __pyx_k_DataTypeDict, sizeof(__pyx_k_DataTypeDict), 0, 0, 1, 1},
  {&__pyx_n_s_Dict, __pyx_k_Dict, sizeof(__pyx_k_Dict), 0, 0, 1, 1},
  {&__pyx_n_s_EPSILON, __pyx_k_EPSILON, sizeof(__pyx_k_EPSILON), 0, 0, 1, 1},
  {&__pyx_n_s_ERR, __pyx_k_ERR, sizeof(__pyx_k_ERR), 0, 0, 1, 1},
  {&__pyx_n_s_EXTRAPT, __pyx_k_EXTRAPT, sizeof(__pyx_k_EXTRAPT), 0, 0, 1, 1},
  {&__pyx_n_s_FLOAT, __pyx_k_FLOAT, sizeof(__pyx_k_FLOAT), 0, 0, 1, 1},
  {&__pyx_n_s_FLUORINE, __pyx_k_FLUORINE, sizeof(__pyx_k_FLUORINE), 0, 0, 1, 1},
  {&__pyx_n_s_FRANCIUM, __pyx_k_FRANCIUM, sizeof(__pyx_k_FRANCIUM), 0, 0, 1, 1},
  {&__pyx_n_s_GALLIUM, __pyx_k_GALLIUM, sizeof(__pyx_k_GALLIUM), 0, 0, 1, 1},
  {&__pyx_n_s_GAMMA, __pyx_k_GAMMA, sizeof(__pyx_k_GAMMA), 0, 0, 1, 1},
  {&__pyx_n_s_GERMANIUM, __pyx_k_GERMANIUM, sizeof(__pyx_k_GERMANIUM), 0, 0, 1, 1},
  {&__pyx_n_s_GMXTOP, __pyx_k_GMXTOP, sizeof(__pyx_k_GMXTOP), 0, 0, 1, 1},
  {&__pyx_n_s_GMXTRX, __pyx_k_GMXTRX, sizeof(__pyx_k_GMXTRX), 0, 0, 1, 1},
  {&__pyx_n_s_GOLD, __pyx_k_GOLD, sizeof(__pyx_k_GOLD), 0, 0, 1, 1},
  {&__pyx_n_s_GRID, __pyx_k_GRID, sizeof(__pyx_k_GRID), 0, 0, 1, 1},
  {&__pyx_n_s_GRID_DOUBLE, __pyx_k_GRID_DOUBLE, sizeof(__pyx_k_GRID_DOUBLE), 0, 0, 1, 1},
  {&__pyx_n_s_GRID_FLOAT, __pyx_k_GRID_FLOAT, sizeof(__pyx_k_GRID_FLOAT), 0, 0, 1, 1},
  {&__pyx_n_s_GRID_FLT, __pyx_k_GRID_FLT, sizeof(__pyx_k_GRID_FLT), 0, 0, 1, 1},
  {&__pyx_n_s_H1P, __pyx_k_H1P, sizeof(__pyx_k_H1P), 0, 0, 1, 1},
  {&__pyx_n_s_HAFNIUM, __pyx_k_HAFNIUM, sizeof(__pyx_k_HAFNIUM), 0, 0, 1, 1},
  {&__pyx_n_s_HELIUM, __pyx_k_HELIUM, sizeof(__pyx_k_HELIUM), 0, 0, 1, 1},
  {&__pyx_n_s_HYDROGEN, __pyx_k_HYDROGEN, sizeof(__pyx_k_HYDROGEN), 0, 0, 1, 1},
  {&__pyx_n_s_IDEA, __pyx_k_IDEA, sizeof(__pyx_k_IDEA), 0, 0, 1, 1},
  {&__pyx_n_s_INDIUM, __pyx_k_INDIUM, sizeof(__pyx_k_INDIUM), 0, 0, 1, 1},
  {&__pyx_n_s_INTEGER, __pyx_k_INTEGER, sizeof(__pyx_k_INTEGER), 0, 0, 1, 1},
  {&__pyx_n_s_IODINE, __pyx_k_IODINE, sizeof(__pyx_k_IODINE), 0, 0, 1, 1},
  {&__pyx_n_s_IREDMAT, __pyx_k_IREDMAT, sizeof(__pyx_k_IREDMAT), 0, 0, 1, 1},
  {&__pyx_n_s_IREDVEC, __pyx_k_IREDVEC, sizeof(__pyx_k_IREDVEC), 0, 0, 1, 1},
  {&__pyx_n_s_IRIDIUM, __pyx_k_IRIDIUM, sizeof(__pyx_k_IRIDIUM), 0, 0, 1, 1},
  {&__pyx_n_s_IRON, __pyx_k_IRON, sizeof(__pyx_k_IRON), 0, 0, 1, 1},
  {&__pyx_n_s_KRYPTON, __pyx_k_KRYPTON, sizeof(__pyx_k_KRYPTON), 0, 0, 1, 1},
  {&__pyx_n_s_LEAD, __pyx_k_LEAD, sizeof(__pyx_k_LEAD), 0, 0, 1, 1},
  {&__pyx_n_s_LITHIUM, __pyx_k_LITHIUM, sizeof(__pyx_k_LITHIUM), 0, 0, 1, 1},
  {&__pyx_n_s_LUTETIUM, __pyx_k_LUTETIUM, sizeof(__pyx_k_LUTETIUM), 0, 0, 1, 1},
  {&__pyx_n_s_MAGNESIUM, __pyx_k_MAGNESIUM, sizeof(__pyx_k_MAGNESIUM), 0, 0, 1, 1},
  {&__pyx_n_s_MANGANESE, __pyx_k_MANGANESE, sizeof(__pyx_k_MANGANESE), 0, 0, 1, 1},
  {&__pyx_n_s_MAT3X3, __pyx_k_MAT3X3, sizeof(__pyx_k_MAT3X3), 0, 0, 1, 1},
  {&__pyx_n_s_MATRIX3X3, __pyx_k_MATRIX3X3, sizeof(__pyx_k_MATRIX3X3), 0, 0, 1, 1},
  {&__pyx_n_s_MATRIX_DBL, __pyx_k_MATRIX_DBL, sizeof(__pyx_k_MATRIX_DBL), 0, 0, 1, 1},
  {&__pyx_n_s_MATRIX_DOUBLE, __pyx_k_MATRIX_DOUBLE, sizeof(__pyx_k_MATRIX_DOUBLE), 0, 0, 1, 1},
  {&__pyx_n_s_MATRIX_FLOAT, __pyx_k_MATRIX_FLOAT, sizeof(__pyx_k_MATRIX_FLOAT), 0, 0, 1, 1},
  {&__pyx_n_s_MATRIX_FLT, __pyx_k_MATRIX_FLT, sizeof(__pyx_k_MATRIX_FLT), 0, 0, 1, 1},
  {&__pyx_n_s_MERCURY, __pyx_k_MERCURY, sizeof(__pyx_k_MERCURY), 0, 0, 1, 1},
  {&__pyx_n_s_MESH, __pyx_k_MESH, sizeof(__pyx_k_MESH), 0, 0, 1, 1},
  {&__pyx_n_s_MODEL, __pyx_k_MODEL, sizeof(__pyx_k_MODEL), 0, 0, 1, 1},
  {&__pyx_n_s_MODES, __pyx_k_MODES, sizeof(__pyx_k_MODES), 0, 0, 1, 1},
  {&__pyx_n_s_MOL, __pyx_k_MOL, sizeof(__pyx_k_MOL), 0, 0, 1, 1},
  {&__pyx_n_s_MOL2, __pyx_k_MOL2, sizeof(__pyx_k_MOL2), 0, 0, 1, 1},
  {&__pyx_n_s_MOL2FILE, __pyx_k_MOL2FILE, sizeof(__pyx_k_MOL2FILE), 0, 0, 1, 1},
  {&__pyx_n_s_MOL2WRITEMODEDict, __pyx_k_MOL2WRITEMODEDict, sizeof(__pyx_k_MOL2WRITEMODEDict), 0, 0, 1, 1},
  {&__pyx_n_s_MOLYBDENUM, __pyx_k_MOLYBDENUM, sizeof(__pyx_k_MOLYBDENUM), 0, 0, 1, 1},
  {&__pyx_n_s_MULTI, __pyx_k_MULTI, sizeof(__pyx_k_MULTI), 0, 0, 1, 1},
  {&__pyx_n_s_MWCOVAR, __pyx_k_MWCOVAR, sizeof(__pyx_k_MWCOVAR), 0, 0, 1, 1},
  {&__pyx_n_s_NEON, __pyx_k_NEON, sizeof(__pyx_k_NEON), 0, 0, 1, 1},
  {&__pyx_n_s_NICKEL, __pyx_k_NICKEL, sizeof(__pyx_k_NICKEL), 0, 0, 1, 1},
  {&__pyx_n_s_NIOBIUM, __pyx_k_NIOBIUM, sizeof(__pyx_k_NIOBIUM), 0, 0, 1, 1},
  {&__pyx_n_s_NITROGEN, __pyx_k_NITROGEN, sizeof(__pyx_k_NITROGEN), 0, 0, 1, 1},
  {&__pyx_n_s_NOBOX, __pyx_k_NOBOX, sizeof(__pyx_k_NOBOX), 0, 0, 1, 1},
  {&__pyx_n_s_NOE, __pyx_k_NOE, sizeof(__pyx_k_NOE), 0, 0, 1, 1},
  {&__pyx_n_s_NONE, __pyx_k_NONE, sizeof(__pyx_k_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_NONORTHO, __pyx_k_NONORTHO, sizeof(__pyx_k_NONORTHO), 0, 0, 1, 1},
  {&__pyx_n_s_NU1, __pyx_k_NU1, sizeof(__pyx_k_NU1), 0, 0, 1, 1},
  {&__pyx_n_s_NU2, __pyx_k_NU2, sizeof(__pyx_k_NU2), 0, 0, 1, 1},
  {&__pyx_n_s_OK, __pyx_k_OK, sizeof(__pyx_k_OK), 0, 0, 1, 1},
  {&__pyx_n_s_OMEGA, __pyx_k_OMEGA, sizeof(__pyx_k_OMEGA), 0, 0, 1, 1},
  {&__pyx_n_s_ORTHO, __pyx_k_ORTHO, sizeof(__pyx_k_ORTHO), 0, 0, 1, 1},
  {&__pyx_n_s_OSMIUM, __pyx_k_OSMIUM, sizeof(__pyx_k_OSMIUM), 0, 0, 1, 1},
  {&__pyx_n_s_OXYGEN, __pyx_k_OXYGEN, sizeof(__pyx_k_OXYGEN), 0, 0, 1, 1},
  {&__pyx_n_s_PALLADIUM, __pyx_k_PALLADIUM, sizeof(__pyx_k_PALLADIUM), 0, 0, 1, 1},
  {&__pyx_n_s_PDB, __pyx_k_PDB, sizeof(__pyx_k_PDB), 0, 0, 1, 1},
  {&__pyx_n_s_PDBFILE, __pyx_k_PDBFILE, sizeof(__pyx_k_PDBFILE), 0, 0, 1, 1},
  {&__pyx_n_s_PDBWRITEMODEDict, __pyx_k_PDBWRITEMODEDict, sizeof(__pyx_k_PDBWRITEMODEDict), 0, 0, 1, 1},
  {&__pyx_n_s_PHI, __pyx_k_PHI, sizeof(__pyx_k_PHI), 0, 0, 1, 1},
  {&__pyx_n_s_PHOSPHORUS, __pyx_k_PHOSPHORUS, sizeof(__pyx_k_PHOSPHORUS), 0, 0, 1, 1},
  {&__pyx_n_s_PLATINUM, __pyx_k_PLATINUM, sizeof(__pyx_k_PLATINUM), 0, 0, 1, 1},
  {&__pyx_n_s_POLONIUM, __pyx_k_POLONIUM, sizeof(__pyx_k_POLONIUM), 0, 0, 1, 1},
  {&__pyx_n_s_POTASSIUM, __pyx_k_POTASSIUM, sizeof(__pyx_k_POTASSIUM), 0, 0, 1, 1},
  {&__pyx_n_s_PSI, __pyx_k_PSI, sizeof(__pyx_k_PSI), 0, 0, 1, 1},
  {&__pyx_n_s_PUCKER, __pyx_k_PUCKER, sizeof(__pyx_k_PUCKER), 0, 0, 1, 1},
  {&__pyx_n_s_ParmFormatDict, __pyx_k_ParmFormatDict, sizeof(__pyx_k_ParmFormatDict), 0, 0, 1, 1},
  {&__pyx_n_s_RADIUM, __pyx_k_RADIUM, sizeof(__pyx_k_RADIUM), 0, 0, 1, 1},
  {&__pyx_n_s_RADON, __pyx_k_RADON, sizeof(__pyx_k_RADON), 0, 0, 1, 1},
  {&__pyx_n_s_REFERENCE, __pyx_k_REFERENCE, sizeof(__pyx_k_REFERENCE), 0, 0, 1, 1},
  {&__pyx_n_s_REF_FRAME, __pyx_k_REF_FRAME, sizeof(__pyx_k_REF_FRAME), 0, 0, 1, 1},
  {&__pyx_n_s_REMLOG, __pyx_k_REMLOG, sizeof(__pyx_k_REMLOG), 0, 0, 1, 1},
  {&__pyx_n_s_RHENIUM, __pyx_k_RHENIUM, sizeof(__pyx_k_RHENIUM), 0, 0, 1, 1},
  {&__pyx_n_s_RHODIUM, __pyx_k_RHODIUM, sizeof(__pyx_k_RHODIUM), 0, 0, 1, 1},
  {&__pyx_n_s_RHOMBIC, __pyx_k_RHOMBIC, sizeof(__pyx_k_RHOMBIC), 0, 0, 1, 1},
  {&__pyx_n_s_RUBIDIUM, __pyx_k_RUBIDIUM, sizeof(__pyx_k_RUBIDIUM), 0, 0, 1, 1},
  {&__pyx_n_s_RUTHENIUM, __pyx_k_RUTHENIUM, sizeof(__pyx_k_RUTHENIUM), 0, 0, 1, 1},
  {&__pyx_n_s_RetActionDict, __pyx_k_RetActionDict, sizeof(__pyx_k_RetActionDict), 0, 0, 1, 1},
  {&__pyx_n_s_SCANDIUM, __pyx_k_SCANDIUM, sizeof(__pyx_k_SCANDIUM), 0, 0, 1, 1},
  {&__pyx_n_s_SDF, __pyx_k_SDF, sizeof(__pyx_k_SDF), 0, 0, 1, 1},
  {&__pyx_n_s_SDFFILE, __pyx_k_SDFFILE, sizeof(__pyx_k_SDFFILE), 0, 0, 1, 1},
  {&__pyx_n_s_SELENIUM, __pyx_k_SELENIUM, sizeof(__pyx_k_SELENIUM), 0, 0, 1, 1},
  {&__pyx_n_s_SILICON, __pyx_k_SILICON, sizeof(__pyx_k_SILICON), 0, 0, 1, 1},
  {&__pyx_n_s_SILVER, __pyx_k_SILVER, sizeof(__pyx_k_SILVER), 0, 0, 1, 1},
  {&__pyx_n_s_SINGLE, __pyx_k_SINGLE, sizeof(__pyx_k_SINGLE), 0, 0, 1, 1},
  {&__pyx_n_s_SODIUM, __pyx_k_SODIUM, sizeof(__pyx_k_SODIUM), 0, 0, 1, 1},
  {&__pyx_n_s_SQM, __pyx_k_SQM, sizeof(__pyx_k_SQM), 0, 0, 1, 1},
  {&__pyx_n_s_STRING, __pyx_k_STRING, sizeof(__pyx_k_STRING), 0, 0, 1, 1},
  {&__pyx_n_s_STRONTIUM, __pyx_k_STRONTIUM, sizeof(__pyx_k_STRONTIUM), 0, 0, 1, 1},
  {&__pyx_n_s_SULFUR, __pyx_k_SULFUR, sizeof(__pyx_k_SULFUR), 0, 0, 1, 1},
  {&__pyx_n_s_ScalarTypeDict, __pyx_k_ScalarTypeDict, sizeof(__pyx_k_ScalarTypeDict), 0, 0, 1, 1},
  {&__pyx_n_s_TANTALUM, __pyx_k_TANTALUM, sizeof(__pyx_k_TANTALUM), 0, 0, 1, 1},
  {&__pyx_n_s_TECHNETIUM, __pyx_k_TECHNETIUM, sizeof(__pyx_k_TECHNETIUM), 0, 0, 1, 1},
  {&__pyx_n_s_TELLURIUM, __pyx_k_TELLURIUM, sizeof(__pyx_k_TELLURIUM), 0, 0, 1, 1},
  {&__pyx_n_s_THALLIUM, __pyx_k_THALLIUM, sizeof(__pyx_k_THALLIUM), 0, 0, 1, 1},
  {&__pyx_n_s_TIN, __pyx_k_TIN, sizeof(__pyx_k_TIN), 0, 0, 1, 1},
  {&__pyx_n_s_TINKER, __pyx_k_TINKER, sizeof(__pyx_k_TINKER), 0, 0, 1, 1},
  {&__pyx_n_s_TITANIUM, __pyx_k_TITANIUM, sizeof(__pyx_k_TITANIUM), 0, 0, 1, 1},
  {&__pyx_n_s_TOPOLOGY, __pyx_k_TOPOLOGY, sizeof(__pyx_k_TOPOLOGY), 0, 0, 1, 1},
  {&__pyx_n_s_TRAJ, __pyx_k_TRAJ, sizeof(__pyx_k_TRAJ), 0, 0, 1, 1},
  {&__pyx_n_s_TRUNCOCT, __pyx_k_TRUNCOCT, sizeof(__pyx_k_TRUNCOCT), 0, 0, 1, 1},
  {&__pyx_n_s_TRX, __pyx_k_TRX, sizeof(__pyx_k_TRX), 0, 0, 1, 1},
  {&__pyx_n_s_TUNGSTEN, __pyx_k_TUNGSTEN, sizeof(__pyx_k_TUNGSTEN), 0, 0, 1, 1},
  {&__pyx_n_s_TrajFormatDict, __pyx_k_TrajFormatDict, sizeof(__pyx_k_TrajFormatDict), 0, 0, 1, 1},
  {&__pyx_n_s_UNDEFINED, __pyx_k_UNDEFINED, sizeof(__pyx_k_UNDEFINED), 0, 0, 1, 1},
  {&__pyx_kp_s_UNKNOWN_DATA, __pyx_k_UNKNOWN_DATA, sizeof(__pyx_k_UNKNOWN_DATA), 0, 0, 1, 0},
  {&__pyx_n_s_UNKNOWN_ELEMENT, __pyx_k_UNKNOWN_ELEMENT, sizeof(__pyx_k_UNKNOWN_ELEMENT), 0, 0, 1, 1},
  {&__pyx_n_s_UNKNOWN_PARM, __pyx_k_UNKNOWN_PARM, sizeof(__pyx_k_UNKNOWN_PARM), 0, 0, 1, 1},
  {&__pyx_n_s_VANADIUM, __pyx_k_VANADIUM, sizeof(__pyx_k_VANADIUM), 0, 0, 1, 1},
  {&__pyx_n_s_VECTOR, __pyx_k_VECTOR, sizeof(__pyx_k_VECTOR), 0, 0, 1, 1},
  {&__pyx_n_s_XENON, __pyx_k_XENON, sizeof(__pyx_k_XENON), 0, 0, 1, 1},
  {&__pyx_n_s_XYMESH, __pyx_k_XYMESH, sizeof(__pyx_k_XYMESH), 0, 0, 1, 1},
  {&__pyx_n_s_YTTRIUM, __pyx_k_YTTRIUM, sizeof(__pyx_k_YTTRIUM), 0, 0, 1, 1},
  {&__pyx_n_s_ZETA, __pyx_k_ZETA, sizeof(__pyx_k_ZETA), 0, 0, 1, 1},
  {&__pyx_n_s_ZINC, __pyx_k_ZINC, sizeof(__pyx_k_ZINC), 0, 0, 1, 1},
  {&__pyx_n_s_ZIRCONIUM, __pyx_k_ZIRCONIUM, sizeof(__pyx_k_ZIRCONIUM), 0, 0, 1, 1},
  {&__pyx_n_s_get_key, __pyx_k_get_key, sizeof(__pyx_k_get_key), 0, 0, 1, 1},
  {&__pyx_n_s_iteritems, __pyx_k_iteritems, sizeof(__pyx_k_iteritems), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_kp_s_net_casegroupp_u1_haichit_pytra, __pyx_k_net_casegroupp_u1_haichit_pytra, sizeof(__pyx_k_net_casegroupp_u1_haichit_pytra), 0, 0, 1, 0},
  {&__pyx_n_s_pytraj_core_c_dict, __pyx_k_pytraj_core_c_dict, sizeof(__pyx_k_pytraj_core_c_dict), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  return 0;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pytraj/core/c_dict.pyx":4
 * 
 * 
 * def get_key(value, dict Dict):             # <<<<<<<<<<<<<<
 *     """return the first key having Dict[key] == value"""
 *     for key, v in Dict.iteritems():
 */
  __pyx_tuple_ = PyTuple_Pack(4, __pyx_n_s_value, __pyx_n_s_Dict, __pyx_n_s_key, __pyx_n_s_v); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);
  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_net_casegroupp_u1_haichit_pytra, __pyx_n_s_get_key, 4, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initc_dict(void); /*proto*/
PyMODINIT_FUNC initc_dict(void)
#else
PyMODINIT_FUNC PyInit_c_dict(void); /*proto*/
PyMODINIT_FUNC PyInit_c_dict(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_c_dict(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("c_dict", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pytraj__core__c_dict) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pytraj.core.c_dict")) {
      if (unlikely(PyDict_SetItemString(modules, "pytraj.core.c_dict", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "pytraj/core/c_dict.pyx":4
 * 
 * 
 * def get_key(value, dict Dict):             # <<<<<<<<<<<<<<
 *     """return the first key having Dict[key] == value"""
 *     for key, v in Dict.iteritems():
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pytraj_4core_6c_dict_1get_key, NULL, __pyx_n_s_pytraj_core_c_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_key, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/core/c_dict.pyx":11
 * 
 * ScalarTypeDict = {
 *     "ALPHA": ALPHA,             # <<<<<<<<<<<<<<
 *     "BETA": BETA,
 *     "GAMMA": GAMMA,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::ALPHA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ALPHA, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":12
 * ScalarTypeDict = {
 *     "ALPHA": ALPHA,
 *     "BETA": BETA,             # <<<<<<<<<<<<<<
 *     "GAMMA": GAMMA,
 *     "DELTA": DELTA,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::BETA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_BETA, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":13
 *     "ALPHA": ALPHA,
 *     "BETA": BETA,
 *     "GAMMA": GAMMA,             # <<<<<<<<<<<<<<
 *     "DELTA": DELTA,
 *     "EPSILON": EPSILON,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::GAMMA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_GAMMA, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":14
 *     "BETA": BETA,
 *     "GAMMA": GAMMA,
 *     "DELTA": DELTA,             # <<<<<<<<<<<<<<
 *     "EPSILON": EPSILON,
 *     "ZETA": ZETA,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::DELTA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_DELTA, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":15
 *     "GAMMA": GAMMA,
 *     "DELTA": DELTA,
 *     "EPSILON": EPSILON,             # <<<<<<<<<<<<<<
 *     "ZETA": ZETA,
 *     "NU1": NU1,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::EPSILON); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_EPSILON, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":16
 *     "DELTA": DELTA,
 *     "EPSILON": EPSILON,
 *     "ZETA": ZETA,             # <<<<<<<<<<<<<<
 *     "NU1": NU1,
 *     "NU2": NU2,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::ZETA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ZETA, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":17
 *     "EPSILON": EPSILON,
 *     "ZETA": ZETA,
 *     "NU1": NU1,             # <<<<<<<<<<<<<<
 *     "NU2": NU2,
 *     "H1P": H1P,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::NU1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_NU1, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":18
 *     "ZETA": ZETA,
 *     "NU1": NU1,
 *     "NU2": NU2,             # <<<<<<<<<<<<<<
 *     "H1P": H1P,
 *     "C2P": C2P,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::NU2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_NU2, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":19
 *     "NU1": NU1,
 *     "NU2": NU2,
 *     "H1P": H1P,             # <<<<<<<<<<<<<<
 *     "C2P": C2P,
 *     "CHIN": CHIN,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::H1P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_H1P, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":20
 *     "NU2": NU2,
 *     "H1P": H1P,
 *     "C2P": C2P,             # <<<<<<<<<<<<<<
 *     "CHIN": CHIN,
 *     "PHI": PHI,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::C2P); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_C2P, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":21
 *     "H1P": H1P,
 *     "C2P": C2P,
 *     "CHIN": CHIN,             # <<<<<<<<<<<<<<
 *     "PHI": PHI,
 *     "PSI": PSI,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::CHIN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CHIN, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":22
 *     "C2P": C2P,
 *     "CHIN": CHIN,
 *     "PHI": PHI,             # <<<<<<<<<<<<<<
 *     "PSI": PSI,
 *     "CHIP": CHIP,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::PHI); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PHI, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":23
 *     "CHIN": CHIN,
 *     "PHI": PHI,
 *     "PSI": PSI,             # <<<<<<<<<<<<<<
 *     "CHIP": CHIP,
 *     "OMEGA": OMEGA,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::PSI); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PSI, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":24
 *     "PHI": PHI,
 *     "PSI": PSI,
 *     "CHIP": CHIP,             # <<<<<<<<<<<<<<
 *     "OMEGA": OMEGA,
 *     "PUCKER": PUCKER,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::CHIP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CHIP, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":25
 *     "PSI": PSI,
 *     "CHIP": CHIP,
 *     "OMEGA": OMEGA,             # <<<<<<<<<<<<<<
 *     "PUCKER": PUCKER,
 *     "NOE": NOE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::OMEGA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_OMEGA, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":26
 *     "CHIP": CHIP,
 *     "OMEGA": OMEGA,
 *     "PUCKER": PUCKER,             # <<<<<<<<<<<<<<
 *     "NOE": NOE,
 *     "DIST": DIST,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::PUCKER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PUCKER, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":27
 *     "OMEGA": OMEGA,
 *     "PUCKER": PUCKER,
 *     "NOE": NOE,             # <<<<<<<<<<<<<<
 *     "DIST": DIST,
 *     "COVAR": COVAR,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::NOE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_NOE, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":28
 *     "PUCKER": PUCKER,
 *     "NOE": NOE,
 *     "DIST": DIST,             # <<<<<<<<<<<<<<
 *     "COVAR": COVAR,
 *     "MWCOVAR": MWCOVAR,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::DIST); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_DIST, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":29
 *     "NOE": NOE,
 *     "DIST": DIST,
 *     "COVAR": COVAR,             # <<<<<<<<<<<<<<
 *     "MWCOVAR": MWCOVAR,
 *     "CORREL": CORREL,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::COVAR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_COVAR, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":30
 *     "DIST": DIST,
 *     "COVAR": COVAR,
 *     "MWCOVAR": MWCOVAR,             # <<<<<<<<<<<<<<
 *     "CORREL": CORREL,
 *     "DISTCOVAR": DISTCOVAR,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::MWCOVAR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MWCOVAR, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":31
 *     "COVAR": COVAR,
 *     "MWCOVAR": MWCOVAR,
 *     "CORREL": CORREL,             # <<<<<<<<<<<<<<
 *     "DISTCOVAR": DISTCOVAR,
 *     "IDEA": IDEA,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::CORREL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CORREL, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":32
 *     "MWCOVAR": MWCOVAR,
 *     "CORREL": CORREL,
 *     "DISTCOVAR": DISTCOVAR,             # <<<<<<<<<<<<<<
 *     "IDEA": IDEA,
 *     "IREDMAT": IREDMAT,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::DISTCOVAR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_DISTCOVAR, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":33
 *     "CORREL": CORREL,
 *     "DISTCOVAR": DISTCOVAR,
 *     "IDEA": IDEA,             # <<<<<<<<<<<<<<
 *     "IREDMAT": IREDMAT,
 *     "DIHCOVAR": DIHCOVAR,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::IDEA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_IDEA, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":34
 *     "DISTCOVAR": DISTCOVAR,
 *     "IDEA": IDEA,
 *     "IREDMAT": IREDMAT,             # <<<<<<<<<<<<<<
 *     "DIHCOVAR": DIHCOVAR,
 *     "IREDVEC": IREDVEC,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::IREDMAT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_IREDMAT, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":35
 *     "IDEA": IDEA,
 *     "IREDMAT": IREDMAT,
 *     "DIHCOVAR": DIHCOVAR,             # <<<<<<<<<<<<<<
 *     "IREDVEC": IREDVEC,
 *     "UNDEFINED": UNDEFINED,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::DIHCOVAR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_DIHCOVAR, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":36
 *     "IREDMAT": IREDMAT,
 *     "DIHCOVAR": DIHCOVAR,
 *     "IREDVEC": IREDVEC,             # <<<<<<<<<<<<<<
 *     "UNDEFINED": UNDEFINED,
 * }
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::IREDVEC); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_IREDVEC, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":37
 *     "DIHCOVAR": DIHCOVAR,
 *     "IREDVEC": IREDVEC,
 *     "UNDEFINED": UNDEFINED,             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::UNDEFINED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_UNDEFINED, __pyx_t_2) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ScalarTypeDict, __pyx_t_1) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/core/c_dict.pyx":41
 * 
 * PDBWRITEMODEDict = {
 *     "NONE": NONE,             # <<<<<<<<<<<<<<
 *     "SINGLE": SINGLE,
 *     "MODEL": MODEL,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_Traj_Mol2File_3a__3a_MOL2WRITEMODE(Traj_Mol2File::NONE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_NONE, __pyx_t_2) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":42
 * PDBWRITEMODEDict = {
 *     "NONE": NONE,
 *     "SINGLE": SINGLE,             # <<<<<<<<<<<<<<
 *     "MODEL": MODEL,
 *     "MULTI": MULTI,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Traj_PDBfile_3a__3a_PDBWRITEMODE(Traj_PDBfile::SINGLE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SINGLE, __pyx_t_2) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":43
 *     "NONE": NONE,
 *     "SINGLE": SINGLE,
 *     "MODEL": MODEL,             # <<<<<<<<<<<<<<
 *     "MULTI": MULTI,
 * }
 */
  __pyx_t_2 = __Pyx_PyInt_From_Traj_PDBfile_3a__3a_PDBWRITEMODE(Traj_PDBfile::MODEL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MODEL, __pyx_t_2) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":44
 *     "SINGLE": SINGLE,
 *     "MODEL": MODEL,
 *     "MULTI": MULTI,             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_Traj_Mol2File_3a__3a_MOL2WRITEMODE(Traj_Mol2File::MULTI); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MULTI, __pyx_t_2) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PDBWRITEMODEDict, __pyx_t_1) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/core/c_dict.pyx":48
 * 
 * ParmFormatDict = {
 *     "AMBERPARM": AMBERPARM,             # <<<<<<<<<<<<<<
 *     "PDBFILE": PDBFILEPARM,
 *     "MOL2FILE": MOL2FILEPARM,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_ParmFile_3a__3a_ParmFormatType(ParmFile::AMBERPARM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_AMBERPARM, __pyx_t_2) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":49
 * ParmFormatDict = {
 *     "AMBERPARM": AMBERPARM,
 *     "PDBFILE": PDBFILEPARM,             # <<<<<<<<<<<<<<
 *     "MOL2FILE": MOL2FILEPARM,
 *     "CHARMMPSF": CHARMMPSF,
 */
  __pyx_t_2 = __Pyx_PyInt_From_ParmFile_3a__3a_ParmFormatType(ParmFile::PDBFILE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 49, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PDBFILE, __pyx_t_2) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":50
 *     "AMBERPARM": AMBERPARM,
 *     "PDBFILE": PDBFILEPARM,
 *     "MOL2FILE": MOL2FILEPARM,             # <<<<<<<<<<<<<<
 *     "CHARMMPSF": CHARMMPSF,
 *     "CIFFILE": CIFFILE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_ParmFile_3a__3a_ParmFormatType(ParmFile::MOL2FILE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MOL2FILE, __pyx_t_2) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":51
 *     "PDBFILE": PDBFILEPARM,
 *     "MOL2FILE": MOL2FILEPARM,
 *     "CHARMMPSF": CHARMMPSF,             # <<<<<<<<<<<<<<
 *     "CIFFILE": CIFFILE,
 *     "GMXTOP": GMXTOP,
 */
  __pyx_t_2 = __Pyx_PyInt_From_ParmFile_3a__3a_ParmFormatType(ParmFile::CHARMMPSF); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CHARMMPSF, __pyx_t_2) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":52
 *     "MOL2FILE": MOL2FILEPARM,
 *     "CHARMMPSF": CHARMMPSF,
 *     "CIFFILE": CIFFILE,             # <<<<<<<<<<<<<<
 *     "GMXTOP": GMXTOP,
 *     "SDFFILE": SDFFILE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_ParmFile_3a__3a_ParmFormatType(ParmFile::CIFFILE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CIFFILE, __pyx_t_2) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":53
 *     "CHARMMPSF": CHARMMPSF,
 *     "CIFFILE": CIFFILE,
 *     "GMXTOP": GMXTOP,             # <<<<<<<<<<<<<<
 *     "SDFFILE": SDFFILE,
 *     "TINKER": TINKERPARM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_ParmFile_3a__3a_ParmFormatType(ParmFile::GMXTOP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_GMXTOP, __pyx_t_2) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":54
 *     "CIFFILE": CIFFILE,
 *     "GMXTOP": GMXTOP,
 *     "SDFFILE": SDFFILE,             # <<<<<<<<<<<<<<
 *     "TINKER": TINKERPARM,
 *     "UNKNOWN_PARM": UNKNOWN_PARM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_ParmFile_3a__3a_ParmFormatType(ParmFile::SDFFILE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SDFFILE, __pyx_t_2) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":55
 *     "GMXTOP": GMXTOP,
 *     "SDFFILE": SDFFILE,
 *     "TINKER": TINKERPARM,             # <<<<<<<<<<<<<<
 *     "UNKNOWN_PARM": UNKNOWN_PARM,
 * }
 */
  __pyx_t_2 = __Pyx_PyInt_From_ParmFile_3a__3a_ParmFormatType(ParmFile::TINKER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TINKER, __pyx_t_2) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":56
 *     "SDFFILE": SDFFILE,
 *     "TINKER": TINKERPARM,
 *     "UNKNOWN_PARM": UNKNOWN_PARM,             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ParmFile_3a__3a_ParmFormatType(ParmFile::UNKNOWN_PARM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_UNKNOWN_PARM, __pyx_t_2) < 0) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParmFormatDict, __pyx_t_1) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/core/c_dict.pyx":60
 * 
 * AtomicElementDict = {
 *     "UNKNOWN_ELEMENT": UNKNOWN_ELEMENT,             # <<<<<<<<<<<<<<
 *     "HYDROGEN": HYDROGEN,
 *     "BORON": BORON,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::UNKNOWN_ELEMENT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_UNKNOWN_ELEMENT, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":61
 * AtomicElementDict = {
 *     "UNKNOWN_ELEMENT": UNKNOWN_ELEMENT,
 *     "HYDROGEN": HYDROGEN,             # <<<<<<<<<<<<<<
 *     "BORON": BORON,
 *     "CARBON": CARBON,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::HYDROGEN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_HYDROGEN, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":62
 *     "UNKNOWN_ELEMENT": UNKNOWN_ELEMENT,
 *     "HYDROGEN": HYDROGEN,
 *     "BORON": BORON,             # <<<<<<<<<<<<<<
 *     "CARBON": CARBON,
 *     "NITROGEN": NITROGEN,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::BORON); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_BORON, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":63
 *     "HYDROGEN": HYDROGEN,
 *     "BORON": BORON,
 *     "CARBON": CARBON,             # <<<<<<<<<<<<<<
 *     "NITROGEN": NITROGEN,
 *     "OXYGEN": OXYGEN,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::CARBON); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CARBON, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":64
 *     "BORON": BORON,
 *     "CARBON": CARBON,
 *     "NITROGEN": NITROGEN,             # <<<<<<<<<<<<<<
 *     "OXYGEN": OXYGEN,
 *     "FLUORINE": FLUORINE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::NITROGEN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_NITROGEN, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":65
 *     "CARBON": CARBON,
 *     "NITROGEN": NITROGEN,
 *     "OXYGEN": OXYGEN,             # <<<<<<<<<<<<<<
 *     "FLUORINE": FLUORINE,
 *     "PHOSPHORUS": PHOSPHORUS,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::OXYGEN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_OXYGEN, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":66
 *     "NITROGEN": NITROGEN,
 *     "OXYGEN": OXYGEN,
 *     "FLUORINE": FLUORINE,             # <<<<<<<<<<<<<<
 *     "PHOSPHORUS": PHOSPHORUS,
 *     "SULFUR": SULFUR,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::FLUORINE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_FLUORINE, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":67
 *     "OXYGEN": OXYGEN,
 *     "FLUORINE": FLUORINE,
 *     "PHOSPHORUS": PHOSPHORUS,             # <<<<<<<<<<<<<<
 *     "SULFUR": SULFUR,
 *     "CHLORINE": CHLORINE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::PHOSPHORUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PHOSPHORUS, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":68
 *     "FLUORINE": FLUORINE,
 *     "PHOSPHORUS": PHOSPHORUS,
 *     "SULFUR": SULFUR,             # <<<<<<<<<<<<<<
 *     "CHLORINE": CHLORINE,
 *     "BROMINE": BROMINE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::SULFUR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SULFUR, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":69
 *     "PHOSPHORUS": PHOSPHORUS,
 *     "SULFUR": SULFUR,
 *     "CHLORINE": CHLORINE,             # <<<<<<<<<<<<<<
 *     "BROMINE": BROMINE,
 *     "IRON": IRON,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::CHLORINE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CHLORINE, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":70
 *     "SULFUR": SULFUR,
 *     "CHLORINE": CHLORINE,
 *     "BROMINE": BROMINE,             # <<<<<<<<<<<<<<
 *     "IRON": IRON,
 *     "CALCIUM": CALCIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::BROMINE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_BROMINE, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":71
 *     "CHLORINE": CHLORINE,
 *     "BROMINE": BROMINE,
 *     "IRON": IRON,             # <<<<<<<<<<<<<<
 *     "CALCIUM": CALCIUM,
 *     "IODINE": IODINE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::IRON); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_IRON, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":72
 *     "BROMINE": BROMINE,
 *     "IRON": IRON,
 *     "CALCIUM": CALCIUM,             # <<<<<<<<<<<<<<
 *     "IODINE": IODINE,
 *     "MAGNESIUM": MAGNESIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::CALCIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CALCIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":73
 *     "IRON": IRON,
 *     "CALCIUM": CALCIUM,
 *     "IODINE": IODINE,             # <<<<<<<<<<<<<<
 *     "MAGNESIUM": MAGNESIUM,
 *     "COPPER": COPPER,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::IODINE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_IODINE, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":74
 *     "CALCIUM": CALCIUM,
 *     "IODINE": IODINE,
 *     "MAGNESIUM": MAGNESIUM,             # <<<<<<<<<<<<<<
 *     "COPPER": COPPER,
 *     "LITHIUM": LITHIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::MAGNESIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MAGNESIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":75
 *     "IODINE": IODINE,
 *     "MAGNESIUM": MAGNESIUM,
 *     "COPPER": COPPER,             # <<<<<<<<<<<<<<
 *     "LITHIUM": LITHIUM,
 *     "POTASSIUM": POTASSIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::COPPER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_COPPER, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":76
 *     "MAGNESIUM": MAGNESIUM,
 *     "COPPER": COPPER,
 *     "LITHIUM": LITHIUM,             # <<<<<<<<<<<<<<
 *     "POTASSIUM": POTASSIUM,
 *     "RUBIDIUM": RUBIDIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::LITHIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_LITHIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":77
 *     "COPPER": COPPER,
 *     "LITHIUM": LITHIUM,
 *     "POTASSIUM": POTASSIUM,             # <<<<<<<<<<<<<<
 *     "RUBIDIUM": RUBIDIUM,
 *     "CESIUM": CESIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::POTASSIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_POTASSIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":78
 *     "LITHIUM": LITHIUM,
 *     "POTASSIUM": POTASSIUM,
 *     "RUBIDIUM": RUBIDIUM,             # <<<<<<<<<<<<<<
 *     "CESIUM": CESIUM,
 *     "ZINC": ZINC,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::RUBIDIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RUBIDIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":79
 *     "POTASSIUM": POTASSIUM,
 *     "RUBIDIUM": RUBIDIUM,
 *     "CESIUM": CESIUM,             # <<<<<<<<<<<<<<
 *     "ZINC": ZINC,
 *     "SODIUM": SODIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::CESIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CESIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":80
 *     "RUBIDIUM": RUBIDIUM,
 *     "CESIUM": CESIUM,
 *     "ZINC": ZINC,             # <<<<<<<<<<<<<<
 *     "SODIUM": SODIUM,
 *     "ALUMINUM": ALUMINUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::ZINC); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ZINC, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":81
 *     "CESIUM": CESIUM,
 *     "ZINC": ZINC,
 *     "SODIUM": SODIUM,             # <<<<<<<<<<<<<<
 *     "ALUMINUM": ALUMINUM,
 *     "ARGON": ARGON,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::SODIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SODIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":82
 *     "ZINC": ZINC,
 *     "SODIUM": SODIUM,
 *     "ALUMINUM": ALUMINUM,             # <<<<<<<<<<<<<<
 *     "ARGON": ARGON,
 *     "ARSENIC": ARSENIC,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::ALUMINUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ALUMINUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":83
 *     "SODIUM": SODIUM,
 *     "ALUMINUM": ALUMINUM,
 *     "ARGON": ARGON,             # <<<<<<<<<<<<<<
 *     "ARSENIC": ARSENIC,
 *     "SILVER": SILVER,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::ARGON); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ARGON, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":84
 *     "ALUMINUM": ALUMINUM,
 *     "ARGON": ARGON,
 *     "ARSENIC": ARSENIC,             # <<<<<<<<<<<<<<
 *     "SILVER": SILVER,
 *     "GOLD": GOLD,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::ARSENIC); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ARSENIC, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":85
 *     "ARGON": ARGON,
 *     "ARSENIC": ARSENIC,
 *     "SILVER": SILVER,             # <<<<<<<<<<<<<<
 *     "GOLD": GOLD,
 *     "ASTATINE": ASTATINE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::SILVER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SILVER, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":86
 *     "ARSENIC": ARSENIC,
 *     "SILVER": SILVER,
 *     "GOLD": GOLD,             # <<<<<<<<<<<<<<
 *     "ASTATINE": ASTATINE,
 *     "BERYLLIUM": BERYLLIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::GOLD); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_GOLD, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":87
 *     "SILVER": SILVER,
 *     "GOLD": GOLD,
 *     "ASTATINE": ASTATINE,             # <<<<<<<<<<<<<<
 *     "BERYLLIUM": BERYLLIUM,
 *     "BARIUM": BARIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::ASTATINE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ASTATINE, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":88
 *     "GOLD": GOLD,
 *     "ASTATINE": ASTATINE,
 *     "BERYLLIUM": BERYLLIUM,             # <<<<<<<<<<<<<<
 *     "BARIUM": BARIUM,
 *     "BISMUTH": BISMUTH,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::BERYLLIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_BERYLLIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":89
 *     "ASTATINE": ASTATINE,
 *     "BERYLLIUM": BERYLLIUM,
 *     "BARIUM": BARIUM,             # <<<<<<<<<<<<<<
 *     "BISMUTH": BISMUTH,
 *     "CHROMIUM": CHROMIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::BARIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_BARIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":90
 *     "BERYLLIUM": BERYLLIUM,
 *     "BARIUM": BARIUM,
 *     "BISMUTH": BISMUTH,             # <<<<<<<<<<<<<<
 *     "CHROMIUM": CHROMIUM,
 *     "COBALT": COBALT,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::BISMUTH); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_BISMUTH, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":91
 *     "BARIUM": BARIUM,
 *     "BISMUTH": BISMUTH,
 *     "CHROMIUM": CHROMIUM,             # <<<<<<<<<<<<<<
 *     "COBALT": COBALT,
 *     "CADMIUM": CADMIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::CHROMIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CHROMIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":92
 *     "BISMUTH": BISMUTH,
 *     "CHROMIUM": CHROMIUM,
 *     "COBALT": COBALT,             # <<<<<<<<<<<<<<
 *     "CADMIUM": CADMIUM,
 *     "FRANCIUM": FRANCIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::COBALT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_COBALT, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":93
 *     "CHROMIUM": CHROMIUM,
 *     "COBALT": COBALT,
 *     "CADMIUM": CADMIUM,             # <<<<<<<<<<<<<<
 *     "FRANCIUM": FRANCIUM,
 *     "GALLIUM": GALLIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::CADMIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CADMIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":94
 *     "COBALT": COBALT,
 *     "CADMIUM": CADMIUM,
 *     "FRANCIUM": FRANCIUM,             # <<<<<<<<<<<<<<
 *     "GALLIUM": GALLIUM,
 *     "GERMANIUM": GERMANIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::FRANCIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_FRANCIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":95
 *     "CADMIUM": CADMIUM,
 *     "FRANCIUM": FRANCIUM,
 *     "GALLIUM": GALLIUM,             # <<<<<<<<<<<<<<
 *     "GERMANIUM": GERMANIUM,
 *     "HELIUM": HELIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::GALLIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_GALLIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":96
 *     "FRANCIUM": FRANCIUM,
 *     "GALLIUM": GALLIUM,
 *     "GERMANIUM": GERMANIUM,             # <<<<<<<<<<<<<<
 *     "HELIUM": HELIUM,
 *     "HAFNIUM": HAFNIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::GERMANIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_GERMANIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":97
 *     "GALLIUM": GALLIUM,
 *     "GERMANIUM": GERMANIUM,
 *     "HELIUM": HELIUM,             # <<<<<<<<<<<<<<
 *     "HAFNIUM": HAFNIUM,
 *     "MERCURY": MERCURY,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::HELIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_HELIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":98
 *     "GERMANIUM": GERMANIUM,
 *     "HELIUM": HELIUM,
 *     "HAFNIUM": HAFNIUM,             # <<<<<<<<<<<<<<
 *     "MERCURY": MERCURY,
 *     "INDIUM": INDIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::HAFNIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_HAFNIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":99
 *     "HELIUM": HELIUM,
 *     "HAFNIUM": HAFNIUM,
 *     "MERCURY": MERCURY,             # <<<<<<<<<<<<<<
 *     "INDIUM": INDIUM,
 *     "IRIDIUM": IRIDIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::MERCURY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MERCURY, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":100
 *     "HAFNIUM": HAFNIUM,
 *     "MERCURY": MERCURY,
 *     "INDIUM": INDIUM,             # <<<<<<<<<<<<<<
 *     "IRIDIUM": IRIDIUM,
 *     "KRYPTON": KRYPTON,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::INDIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_INDIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":101
 *     "MERCURY": MERCURY,
 *     "INDIUM": INDIUM,
 *     "IRIDIUM": IRIDIUM,             # <<<<<<<<<<<<<<
 *     "KRYPTON": KRYPTON,
 *     "MANGANESE": MANGANESE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::IRIDIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_IRIDIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":102
 *     "INDIUM": INDIUM,
 *     "IRIDIUM": IRIDIUM,
 *     "KRYPTON": KRYPTON,             # <<<<<<<<<<<<<<
 *     "MANGANESE": MANGANESE,
 *     "MOLYBDENUM": MOLYBDENUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::KRYPTON); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_KRYPTON, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":103
 *     "IRIDIUM": IRIDIUM,
 *     "KRYPTON": KRYPTON,
 *     "MANGANESE": MANGANESE,             # <<<<<<<<<<<<<<
 *     "MOLYBDENUM": MOLYBDENUM,
 *     "NEON": NEON,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::MANGANESE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MANGANESE, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":104
 *     "KRYPTON": KRYPTON,
 *     "MANGANESE": MANGANESE,
 *     "MOLYBDENUM": MOLYBDENUM,             # <<<<<<<<<<<<<<
 *     "NEON": NEON,
 *     "NICKEL": NICKEL,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::MOLYBDENUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MOLYBDENUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":105
 *     "MANGANESE": MANGANESE,
 *     "MOLYBDENUM": MOLYBDENUM,
 *     "NEON": NEON,             # <<<<<<<<<<<<<<
 *     "NICKEL": NICKEL,
 *     "NIOBIUM": NIOBIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::NEON); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_NEON, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":106
 *     "MOLYBDENUM": MOLYBDENUM,
 *     "NEON": NEON,
 *     "NICKEL": NICKEL,             # <<<<<<<<<<<<<<
 *     "NIOBIUM": NIOBIUM,
 *     "OSMIUM": OSMIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::NICKEL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_NICKEL, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":107
 *     "NEON": NEON,
 *     "NICKEL": NICKEL,
 *     "NIOBIUM": NIOBIUM,             # <<<<<<<<<<<<<<
 *     "OSMIUM": OSMIUM,
 *     "PALLADIUM": PALLADIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::NIOBIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_NIOBIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":108
 *     "NICKEL": NICKEL,
 *     "NIOBIUM": NIOBIUM,
 *     "OSMIUM": OSMIUM,             # <<<<<<<<<<<<<<
 *     "PALLADIUM": PALLADIUM,
 *     "PLATINUM": PLATINUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::OSMIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_OSMIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":109
 *     "NIOBIUM": NIOBIUM,
 *     "OSMIUM": OSMIUM,
 *     "PALLADIUM": PALLADIUM,             # <<<<<<<<<<<<<<
 *     "PLATINUM": PLATINUM,
 *     "LEAD": LEAD,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::PALLADIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PALLADIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":110
 *     "OSMIUM": OSMIUM,
 *     "PALLADIUM": PALLADIUM,
 *     "PLATINUM": PLATINUM,             # <<<<<<<<<<<<<<
 *     "LEAD": LEAD,
 *     "POLONIUM": POLONIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::PLATINUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PLATINUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":111
 *     "PALLADIUM": PALLADIUM,
 *     "PLATINUM": PLATINUM,
 *     "LEAD": LEAD,             # <<<<<<<<<<<<<<
 *     "POLONIUM": POLONIUM,
 *     "RUTHENIUM": RUTHENIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::LEAD); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_LEAD, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":112
 *     "PLATINUM": PLATINUM,
 *     "LEAD": LEAD,
 *     "POLONIUM": POLONIUM,             # <<<<<<<<<<<<<<
 *     "RUTHENIUM": RUTHENIUM,
 *     "RHODIUM": RHODIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::POLONIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_POLONIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":113
 *     "LEAD": LEAD,
 *     "POLONIUM": POLONIUM,
 *     "RUTHENIUM": RUTHENIUM,             # <<<<<<<<<<<<<<
 *     "RHODIUM": RHODIUM,
 *     "RHENIUM": RHENIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::RUTHENIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RUTHENIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":114
 *     "POLONIUM": POLONIUM,
 *     "RUTHENIUM": RUTHENIUM,
 *     "RHODIUM": RHODIUM,             # <<<<<<<<<<<<<<
 *     "RHENIUM": RHENIUM,
 *     "RADON": RADON,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::RHODIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RHODIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":115
 *     "RUTHENIUM": RUTHENIUM,
 *     "RHODIUM": RHODIUM,
 *     "RHENIUM": RHENIUM,             # <<<<<<<<<<<<<<
 *     "RADON": RADON,
 *     "RADIUM": RADIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::RHENIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RHENIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":116
 *     "RHODIUM": RHODIUM,
 *     "RHENIUM": RHENIUM,
 *     "RADON": RADON,             # <<<<<<<<<<<<<<
 *     "RADIUM": RADIUM,
 *     "SILICON": SILICON,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::RADON); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RADON, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":117
 *     "RHENIUM": RHENIUM,
 *     "RADON": RADON,
 *     "RADIUM": RADIUM,             # <<<<<<<<<<<<<<
 *     "SILICON": SILICON,
 *     "SCANDIUM": SCANDIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::RADIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RADIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":118
 *     "RADON": RADON,
 *     "RADIUM": RADIUM,
 *     "SILICON": SILICON,             # <<<<<<<<<<<<<<
 *     "SCANDIUM": SCANDIUM,
 *     "SELENIUM": SELENIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::SILICON); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SILICON, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":119
 *     "RADIUM": RADIUM,
 *     "SILICON": SILICON,
 *     "SCANDIUM": SCANDIUM,             # <<<<<<<<<<<<<<
 *     "SELENIUM": SELENIUM,
 *     "STRONTIUM": STRONTIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::SCANDIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SCANDIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":120
 *     "SILICON": SILICON,
 *     "SCANDIUM": SCANDIUM,
 *     "SELENIUM": SELENIUM,             # <<<<<<<<<<<<<<
 *     "STRONTIUM": STRONTIUM,
 *     "TIN": TIN,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::SELENIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SELENIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":121
 *     "SCANDIUM": SCANDIUM,
 *     "SELENIUM": SELENIUM,
 *     "STRONTIUM": STRONTIUM,             # <<<<<<<<<<<<<<
 *     "TIN": TIN,
 *     "ANTIMONY": ANTIMONY,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::STRONTIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_STRONTIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":122
 *     "SELENIUM": SELENIUM,
 *     "STRONTIUM": STRONTIUM,
 *     "TIN": TIN,             # <<<<<<<<<<<<<<
 *     "ANTIMONY": ANTIMONY,
 *     "TITANIUM": TITANIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::TIN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TIN, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":123
 *     "STRONTIUM": STRONTIUM,
 *     "TIN": TIN,
 *     "ANTIMONY": ANTIMONY,             # <<<<<<<<<<<<<<
 *     "TITANIUM": TITANIUM,
 *     "TECHNETIUM": TECHNETIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::ANTIMONY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ANTIMONY, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":124
 *     "TIN": TIN,
 *     "ANTIMONY": ANTIMONY,
 *     "TITANIUM": TITANIUM,             # <<<<<<<<<<<<<<
 *     "TECHNETIUM": TECHNETIUM,
 *     "TELLURIUM": TELLURIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::TITANIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TITANIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":125
 *     "ANTIMONY": ANTIMONY,
 *     "TITANIUM": TITANIUM,
 *     "TECHNETIUM": TECHNETIUM,             # <<<<<<<<<<<<<<
 *     "TELLURIUM": TELLURIUM,
 *     "TANTALUM": TANTALUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::TECHNETIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TECHNETIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":126
 *     "TITANIUM": TITANIUM,
 *     "TECHNETIUM": TECHNETIUM,
 *     "TELLURIUM": TELLURIUM,             # <<<<<<<<<<<<<<
 *     "TANTALUM": TANTALUM,
 *     "THALLIUM": THALLIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::TELLURIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TELLURIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":127
 *     "TECHNETIUM": TECHNETIUM,
 *     "TELLURIUM": TELLURIUM,
 *     "TANTALUM": TANTALUM,             # <<<<<<<<<<<<<<
 *     "THALLIUM": THALLIUM,
 *     "VANADIUM": VANADIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::TANTALUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TANTALUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":128
 *     "TELLURIUM": TELLURIUM,
 *     "TANTALUM": TANTALUM,
 *     "THALLIUM": THALLIUM,             # <<<<<<<<<<<<<<
 *     "VANADIUM": VANADIUM,
 *     "TUNGSTEN": TUNGSTEN,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::THALLIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_THALLIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":129
 *     "TANTALUM": TANTALUM,
 *     "THALLIUM": THALLIUM,
 *     "VANADIUM": VANADIUM,             # <<<<<<<<<<<<<<
 *     "TUNGSTEN": TUNGSTEN,
 *     "XENON": XENON,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::VANADIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_VANADIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":130
 *     "THALLIUM": THALLIUM,
 *     "VANADIUM": VANADIUM,
 *     "TUNGSTEN": TUNGSTEN,             # <<<<<<<<<<<<<<
 *     "XENON": XENON,
 *     "ZIRCONIUM": ZIRCONIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::TUNGSTEN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TUNGSTEN, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":131
 *     "VANADIUM": VANADIUM,
 *     "TUNGSTEN": TUNGSTEN,
 *     "XENON": XENON,             # <<<<<<<<<<<<<<
 *     "ZIRCONIUM": ZIRCONIUM,
 *     "YTTRIUM": YTTRIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::XENON); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_XENON, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":132
 *     "TUNGSTEN": TUNGSTEN,
 *     "XENON": XENON,
 *     "ZIRCONIUM": ZIRCONIUM,             # <<<<<<<<<<<<<<
 *     "YTTRIUM": YTTRIUM,
 *     "LUTETIUM": LUTETIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::ZIRCONIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ZIRCONIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":133
 *     "XENON": XENON,
 *     "ZIRCONIUM": ZIRCONIUM,
 *     "YTTRIUM": YTTRIUM,             # <<<<<<<<<<<<<<
 *     "LUTETIUM": LUTETIUM,
 *     "EXTRAPT": EXTRAPT,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::YTTRIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_YTTRIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":134
 *     "ZIRCONIUM": ZIRCONIUM,
 *     "YTTRIUM": YTTRIUM,
 *     "LUTETIUM": LUTETIUM,             # <<<<<<<<<<<<<<
 *     "EXTRAPT": EXTRAPT,
 * }
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::LUTETIUM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_LUTETIUM, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":135
 *     "YTTRIUM": YTTRIUM,
 *     "LUTETIUM": LUTETIUM,
 *     "EXTRAPT": EXTRAPT,             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::EXTRAPT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_EXTRAPT, __pyx_t_2) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AtomicElementDict, __pyx_t_1) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/core/c_dict.pyx":139
 * 
 * MOL2WRITEMODEDict = {
 *     "NONE": NONE,             # <<<<<<<<<<<<<<
 *     "SINGLE": SINGLE,
 *     "MOL": MOL,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_Traj_Mol2File_3a__3a_MOL2WRITEMODE(Traj_Mol2File::NONE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_NONE, __pyx_t_2) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":140
 * MOL2WRITEMODEDict = {
 *     "NONE": NONE,
 *     "SINGLE": SINGLE,             # <<<<<<<<<<<<<<
 *     "MOL": MOL,
 *     "MULTI": MULTI,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Traj_PDBfile_3a__3a_PDBWRITEMODE(Traj_PDBfile::SINGLE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SINGLE, __pyx_t_2) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":141
 *     "NONE": NONE,
 *     "SINGLE": SINGLE,
 *     "MOL": MOL,             # <<<<<<<<<<<<<<
 *     "MULTI": MULTI,
 * }
 */
  __pyx_t_2 = __Pyx_PyInt_From_Traj_Mol2File_3a__3a_MOL2WRITEMODE(Traj_Mol2File::MOL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MOL, __pyx_t_2) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":142
 *     "SINGLE": SINGLE,
 *     "MOL": MOL,
 *     "MULTI": MULTI,             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_Traj_Mol2File_3a__3a_MOL2WRITEMODE(Traj_Mol2File::MULTI); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MULTI, __pyx_t_2) < 0) __PYX_ERR(0, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MOL2WRITEMODEDict, __pyx_t_1) < 0) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/core/c_dict.pyx":146
 * 
 * BoxTypeDict = {
 *     "NOBOX": NOBOX,             # <<<<<<<<<<<<<<
 *     "ORTHO": ORTHO,
 *     "TRUNCOCT": TRUNCOCT,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_Box_3a__3a_BoxType(Box::NOBOX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_NOBOX, __pyx_t_2) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":147
 * BoxTypeDict = {
 *     "NOBOX": NOBOX,
 *     "ORTHO": ORTHO,             # <<<<<<<<<<<<<<
 *     "TRUNCOCT": TRUNCOCT,
 *     "RHOMBIC": RHOMBIC,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Box_3a__3a_BoxType(Box::ORTHO); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ORTHO, __pyx_t_2) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":148
 *     "NOBOX": NOBOX,
 *     "ORTHO": ORTHO,
 *     "TRUNCOCT": TRUNCOCT,             # <<<<<<<<<<<<<<
 *     "RHOMBIC": RHOMBIC,
 *     "NONORTHO": NONORTHO,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Box_3a__3a_BoxType(Box::TRUNCOCT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TRUNCOCT, __pyx_t_2) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":149
 *     "ORTHO": ORTHO,
 *     "TRUNCOCT": TRUNCOCT,
 *     "RHOMBIC": RHOMBIC,             # <<<<<<<<<<<<<<
 *     "NONORTHO": NONORTHO,
 * }
 */
  __pyx_t_2 = __Pyx_PyInt_From_Box_3a__3a_BoxType(Box::RHOMBIC); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RHOMBIC, __pyx_t_2) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":150
 *     "TRUNCOCT": TRUNCOCT,
 *     "RHOMBIC": RHOMBIC,
 *     "NONORTHO": NONORTHO,             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_Box_3a__3a_BoxType(Box::NONORTHO); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_NONORTHO, __pyx_t_2) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BoxTypeDict, __pyx_t_1) < 0) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/core/c_dict.pyx":154
 * 
 * TrajFormatDict = {
 *     "AMBERNETCDF": AMBERNETCDF,             # <<<<<<<<<<<<<<
 *     "AMBERRESTARTNC": AMBERRESTARTNC,
 *     "PDBFILE": PDBFILE,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::AMBERNETCDF); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_AMBERNETCDF, __pyx_t_2) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":155
 * TrajFormatDict = {
 *     "AMBERNETCDF": AMBERNETCDF,
 *     "AMBERRESTARTNC": AMBERRESTARTNC,             # <<<<<<<<<<<<<<
 *     "PDBFILE": PDBFILE,
 *     "PDB": PDBFILE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::AMBERRESTARTNC); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_AMBERRESTARTNC, __pyx_t_2) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":156
 *     "AMBERNETCDF": AMBERNETCDF,
 *     "AMBERRESTARTNC": AMBERRESTARTNC,
 *     "PDBFILE": PDBFILE,             # <<<<<<<<<<<<<<
 *     "PDB": PDBFILE,
 *     "MOL2FILE": MOL2FILE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::PDBFILE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PDBFILE, __pyx_t_2) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":157
 *     "AMBERRESTARTNC": AMBERRESTARTNC,
 *     "PDBFILE": PDBFILE,
 *     "PDB": PDBFILE,             # <<<<<<<<<<<<<<
 *     "MOL2FILE": MOL2FILE,
 *     "MOL2": MOL2FILE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::PDBFILE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PDB, __pyx_t_2) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":158
 *     "PDBFILE": PDBFILE,
 *     "PDB": PDBFILE,
 *     "MOL2FILE": MOL2FILE,             # <<<<<<<<<<<<<<
 *     "MOL2": MOL2FILE,
 *     "CIF": CIF,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::MOL2FILE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MOL2FILE, __pyx_t_2) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":159
 *     "PDB": PDBFILE,
 *     "MOL2FILE": MOL2FILE,
 *     "MOL2": MOL2FILE,             # <<<<<<<<<<<<<<
 *     "CIF": CIF,
 *     "CHARMMDCD": CHARMMDCD,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::MOL2FILE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MOL2, __pyx_t_2) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":160
 *     "MOL2FILE": MOL2FILE,
 *     "MOL2": MOL2FILE,
 *     "CIF": CIF,             # <<<<<<<<<<<<<<
 *     "CHARMMDCD": CHARMMDCD,
 *     "DCD": CHARMMDCD,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::CIF); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CIF, __pyx_t_2) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":161
 *     "MOL2": MOL2FILE,
 *     "CIF": CIF,
 *     "CHARMMDCD": CHARMMDCD,             # <<<<<<<<<<<<<<
 *     "DCD": CHARMMDCD,
 *     "GMXTRX": GMXTRX,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::CHARMMDCD); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CHARMMDCD, __pyx_t_2) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":162
 *     "CIF": CIF,
 *     "CHARMMDCD": CHARMMDCD,
 *     "DCD": CHARMMDCD,             # <<<<<<<<<<<<<<
 *     "GMXTRX": GMXTRX,
 *     "TRX": GMXTRX,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::CHARMMDCD); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_DCD, __pyx_t_2) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":163
 *     "CHARMMDCD": CHARMMDCD,
 *     "DCD": CHARMMDCD,
 *     "GMXTRX": GMXTRX,             # <<<<<<<<<<<<<<
 *     "TRX": GMXTRX,
 *     "BINPOS": BINPOS,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::GMXTRX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_GMXTRX, __pyx_t_2) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":164
 *     "DCD": CHARMMDCD,
 *     "GMXTRX": GMXTRX,
 *     "TRX": GMXTRX,             # <<<<<<<<<<<<<<
 *     "BINPOS": BINPOS,
 *     "AMBERRESTART": AMBERRESTART,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::GMXTRX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TRX, __pyx_t_2) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":165
 *     "GMXTRX": GMXTRX,
 *     "TRX": GMXTRX,
 *     "BINPOS": BINPOS,             # <<<<<<<<<<<<<<
 *     "AMBERRESTART": AMBERRESTART,
 *     "AMBERTRAJ": AMBERTRAJ,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::BINPOS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_BINPOS, __pyx_t_2) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":166
 *     "TRX": GMXTRX,
 *     "BINPOS": BINPOS,
 *     "AMBERRESTART": AMBERRESTART,             # <<<<<<<<<<<<<<
 *     "AMBERTRAJ": AMBERTRAJ,
 *     "SQM": SQM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::AMBERRESTART); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_AMBERRESTART, __pyx_t_2) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":167
 *     "BINPOS": BINPOS,
 *     "AMBERRESTART": AMBERRESTART,
 *     "AMBERTRAJ": AMBERTRAJ,             # <<<<<<<<<<<<<<
 *     "SQM": SQM,
 *     "SDF": SDF,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::AMBERTRAJ); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_AMBERTRAJ, __pyx_t_2) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":168
 *     "AMBERRESTART": AMBERRESTART,
 *     "AMBERTRAJ": AMBERTRAJ,
 *     "SQM": SQM,             # <<<<<<<<<<<<<<
 *     "SDF": SDF,
 *     "CONFLIB": CONFLIB,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::SQM); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SQM, __pyx_t_2) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":169
 *     "AMBERTRAJ": AMBERTRAJ,
 *     "SQM": SQM,
 *     "SDF": SDF,             # <<<<<<<<<<<<<<
 *     "CONFLIB": CONFLIB,
 * }
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::SDF); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SDF, __pyx_t_2) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":170
 *     "SQM": SQM,
 *     "SDF": SDF,
 *     "CONFLIB": CONFLIB,             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::CONFLIB); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CONFLIB, __pyx_t_2) < 0) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TrajFormatDict, __pyx_t_1) < 0) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/core/c_dict.pyx":174
 * 
 * DataTypeDict = {
 *     "UNKNOWN_DATA ": UNKNOWN_DATASET,             # <<<<<<<<<<<<<<
 *     "DOUBLE": DOUBLE,
 *     "FLOAT": FLOAT,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::UNKNOWN_DATA); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_s_UNKNOWN_DATA, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":175
 * DataTypeDict = {
 *     "UNKNOWN_DATA ": UNKNOWN_DATASET,
 *     "DOUBLE": DOUBLE,             # <<<<<<<<<<<<<<
 *     "FLOAT": FLOAT,
 *     "INTEGER": INTEGER,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::DOUBLE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_DOUBLE, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":176
 *     "UNKNOWN_DATA ": UNKNOWN_DATASET,
 *     "DOUBLE": DOUBLE,
 *     "FLOAT": FLOAT,             # <<<<<<<<<<<<<<
 *     "INTEGER": INTEGER,
 *     "STRING": STRING,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::FLOAT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_FLOAT, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":177
 *     "DOUBLE": DOUBLE,
 *     "FLOAT": FLOAT,
 *     "INTEGER": INTEGER,             # <<<<<<<<<<<<<<
 *     "STRING": STRING,
 *     "MATRIX_DBL": MATRIX_DBL,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::INTEGER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_INTEGER, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":178
 *     "FLOAT": FLOAT,
 *     "INTEGER": INTEGER,
 *     "STRING": STRING,             # <<<<<<<<<<<<<<
 *     "MATRIX_DBL": MATRIX_DBL,
 *     "MATRIX_DOUBLE": MATRIX_DBL,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::STRING); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_STRING, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":179
 *     "INTEGER": INTEGER,
 *     "STRING": STRING,
 *     "MATRIX_DBL": MATRIX_DBL,             # <<<<<<<<<<<<<<
 *     "MATRIX_DOUBLE": MATRIX_DBL,
 *     "MATRIX_FLT": MATRIX_FLT,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::MATRIX_DBL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MATRIX_DBL, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":180
 *     "STRING": STRING,
 *     "MATRIX_DBL": MATRIX_DBL,
 *     "MATRIX_DOUBLE": MATRIX_DBL,             # <<<<<<<<<<<<<<
 *     "MATRIX_FLT": MATRIX_FLT,
 *     "MATRIX_FLOAT": MATRIX_FLT,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::MATRIX_DBL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MATRIX_DOUBLE, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":181
 *     "MATRIX_DBL": MATRIX_DBL,
 *     "MATRIX_DOUBLE": MATRIX_DBL,
 *     "MATRIX_FLT": MATRIX_FLT,             # <<<<<<<<<<<<<<
 *     "MATRIX_FLOAT": MATRIX_FLT,
 *     "COORDS": COORDS,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::MATRIX_FLT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MATRIX_FLT, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":182
 *     "MATRIX_DOUBLE": MATRIX_DBL,
 *     "MATRIX_FLT": MATRIX_FLT,
 *     "MATRIX_FLOAT": MATRIX_FLT,             # <<<<<<<<<<<<<<
 *     "COORDS": COORDS,
 *     "REF_FRAME": REF_FRAME,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::MATRIX_FLT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MATRIX_FLOAT, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":183
 *     "MATRIX_FLT": MATRIX_FLT,
 *     "MATRIX_FLOAT": MATRIX_FLT,
 *     "COORDS": COORDS,             # <<<<<<<<<<<<<<
 *     "REF_FRAME": REF_FRAME,
 *     "REFERENCE": REF_FRAME,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::COORDS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_COORDS, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":184
 *     "MATRIX_FLOAT": MATRIX_FLT,
 *     "COORDS": COORDS,
 *     "REF_FRAME": REF_FRAME,             # <<<<<<<<<<<<<<
 *     "REFERENCE": REF_FRAME,
 *     "VECTOR": VECTOR,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::REF_FRAME); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_REF_FRAME, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":185
 *     "COORDS": COORDS,
 *     "REF_FRAME": REF_FRAME,
 *     "REFERENCE": REF_FRAME,             # <<<<<<<<<<<<<<
 *     "VECTOR": VECTOR,
 *     "MODES": MODES,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::REF_FRAME); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_REFERENCE, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":186
 *     "REF_FRAME": REF_FRAME,
 *     "REFERENCE": REF_FRAME,
 *     "VECTOR": VECTOR,             # <<<<<<<<<<<<<<
 *     "MODES": MODES,
 *     "GRID_FLT": GRID_FLT,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::VECTOR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_VECTOR, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":187
 *     "REFERENCE": REF_FRAME,
 *     "VECTOR": VECTOR,
 *     "MODES": MODES,             # <<<<<<<<<<<<<<
 *     "GRID_FLT": GRID_FLT,
 *     "GRID_FLOAT": GRID_FLT,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::MODES); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MODES, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":188
 *     "VECTOR": VECTOR,
 *     "MODES": MODES,
 *     "GRID_FLT": GRID_FLT,             # <<<<<<<<<<<<<<
 *     "GRID_FLOAT": GRID_FLT,
 *     "GRID_DOUBLE": GRID_DBL,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::GRID_FLT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_GRID_FLT, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":189
 *     "MODES": MODES,
 *     "GRID_FLT": GRID_FLT,
 *     "GRID_FLOAT": GRID_FLT,             # <<<<<<<<<<<<<<
 *     "GRID_DOUBLE": GRID_DBL,
 *     "GRID": GRID_FLT,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::GRID_FLT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_GRID_FLOAT, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":190
 *     "GRID_FLT": GRID_FLT,
 *     "GRID_FLOAT": GRID_FLT,
 *     "GRID_DOUBLE": GRID_DBL,             # <<<<<<<<<<<<<<
 *     "GRID": GRID_FLT,
 *     "REMLOG": REMLOGDATATYPE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::GRID_DBL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_GRID_DOUBLE, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":191
 *     "GRID_FLOAT": GRID_FLT,
 *     "GRID_DOUBLE": GRID_DBL,
 *     "GRID": GRID_FLT,             # <<<<<<<<<<<<<<
 *     "REMLOG": REMLOGDATATYPE,
 *     "XYMESH": XYMESH,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::GRID_FLT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_GRID, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":192
 *     "GRID_DOUBLE": GRID_DBL,
 *     "GRID": GRID_FLT,
 *     "REMLOG": REMLOGDATATYPE,             # <<<<<<<<<<<<<<
 *     "XYMESH": XYMESH,
 *     "MESH": XYMESH,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::REMLOG); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_REMLOG, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":193
 *     "GRID": GRID_FLT,
 *     "REMLOG": REMLOGDATATYPE,
 *     "XYMESH": XYMESH,             # <<<<<<<<<<<<<<
 *     "MESH": XYMESH,
 *     "TRAJ": TRAJ,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::XYMESH); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_XYMESH, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":194
 *     "REMLOG": REMLOGDATATYPE,
 *     "XYMESH": XYMESH,
 *     "MESH": XYMESH,             # <<<<<<<<<<<<<<
 *     "TRAJ": TRAJ,
 *     "MAT3X3": MAT3X3,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::XYMESH); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MESH, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":195
 *     "XYMESH": XYMESH,
 *     "MESH": XYMESH,
 *     "TRAJ": TRAJ,             # <<<<<<<<<<<<<<
 *     "MAT3X3": MAT3X3,
 *     "MATRIX3X3": MAT3X3,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::TRAJ); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TRAJ, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":196
 *     "MESH": XYMESH,
 *     "TRAJ": TRAJ,
 *     "MAT3X3": MAT3X3,             # <<<<<<<<<<<<<<
 *     "MATRIX3X3": MAT3X3,
 *     "TOPOLOGY": TOPOLOGY,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::MAT3X3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MAT3X3, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":197
 *     "TRAJ": TRAJ,
 *     "MAT3X3": MAT3X3,
 *     "MATRIX3X3": MAT3X3,             # <<<<<<<<<<<<<<
 *     "TOPOLOGY": TOPOLOGY,
 * }
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::MAT3X3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MATRIX3X3, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":198
 *     "MAT3X3": MAT3X3,
 *     "MATRIX3X3": MAT3X3,
 *     "TOPOLOGY": TOPOLOGY,             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::TOPOLOGY); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TOPOLOGY, __pyx_t_2) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DataTypeDict, __pyx_t_1) < 0) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/core/c_dict.pyx":202
 * 
 * RetActionDict = {
 *     "OK": OKACTION,             # <<<<<<<<<<<<<<
 *     "ERR": ERRACTION,
 * }
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_Action_3a__3a_RetType(Action::OK); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_OK, __pyx_t_2) < 0) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/c_dict.pyx":203
 * RetActionDict = {
 *     "OK": OKACTION,
 *     "ERR": ERRACTION,             # <<<<<<<<<<<<<<
 * }
 */
  __pyx_t_2 = __Pyx_PyInt_From_Action_3a__3a_RetType(Action::ERR); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ERR, __pyx_t_2) < 0) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RetActionDict, __pyx_t_1) < 0) __PYX_ERR(0, 201, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/core/c_dict.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pytraj.core.c_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pytraj.core.c_dict");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyObjectCallOneArg */
  #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyObjectCallMethod0 */
    static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *function = PyMethod_GET_FUNCTION(method);
            result = __Pyx_PyObject_CallOneArg(function, self);
            Py_DECREF(method);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
    static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* RaiseNoneIterError */
    static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
    static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
    static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                             int is_tuple, int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    if (!is_tuple && unlikely(!PyTuple_Check(tuple))) {
        iternextfunc iternext;
        iter = PyObject_GetIter(tuple);
        if (unlikely(!iter)) goto bad;
        if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
        iternext = Py_TYPE(iter)->tp_iternext;
        value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
        value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
        if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
        Py_DECREF(iter);
    } else {
        if (!has_known_size && unlikely(PyTuple_GET_SIZE(tuple) != 2)) {
            __Pyx_UnpackTupleError(tuple, 2);
            goto bad;
        }
#if CYTHON_COMPILING_IN_PYPY
        value1 = PySequence_ITEM(tuple, 0);
        if (unlikely(!value1)) goto bad;
        value2 = PySequence_ITEM(tuple, 1);
        if (unlikely(!value2)) goto bad;
#else
        value1 = PyTuple_GET_ITEM(tuple, 0);
        value2 = PyTuple_GET_ITEM(tuple, 1);
        Py_INCREF(value1);
        Py_INCREF(value2);
#endif
        if (decref_tuple) { Py_DECREF(tuple); }
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
    static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
#if !CYTHON_COMPILING_IN_PYPY
    if (is_dict) {
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#endif
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* CodeObjectCache */
    static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
    #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_MetaData_3a__3a_scalarType(MetaData::scalarType value) {
    const MetaData::scalarType neg_one = (MetaData::scalarType) -1, const_zero = (MetaData::scalarType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(MetaData::scalarType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(MetaData::scalarType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(MetaData::scalarType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(MetaData::scalarType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(MetaData::scalarType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(MetaData::scalarType),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Traj_Mol2File_3a__3a_MOL2WRITEMODE(Traj_Mol2File::MOL2WRITEMODE value) {
    const Traj_Mol2File::MOL2WRITEMODE neg_one = (Traj_Mol2File::MOL2WRITEMODE) -1, const_zero = (Traj_Mol2File::MOL2WRITEMODE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Traj_Mol2File::MOL2WRITEMODE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Traj_Mol2File::MOL2WRITEMODE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(Traj_Mol2File::MOL2WRITEMODE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(Traj_Mol2File::MOL2WRITEMODE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Traj_Mol2File::MOL2WRITEMODE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Traj_Mol2File::MOL2WRITEMODE),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Traj_PDBfile_3a__3a_PDBWRITEMODE(Traj_PDBfile::PDBWRITEMODE value) {
    const Traj_PDBfile::PDBWRITEMODE neg_one = (Traj_PDBfile::PDBWRITEMODE) -1, const_zero = (Traj_PDBfile::PDBWRITEMODE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Traj_PDBfile::PDBWRITEMODE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Traj_PDBfile::PDBWRITEMODE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(Traj_PDBfile::PDBWRITEMODE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(Traj_PDBfile::PDBWRITEMODE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Traj_PDBfile::PDBWRITEMODE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Traj_PDBfile::PDBWRITEMODE),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ParmFile_3a__3a_ParmFormatType(ParmFile::ParmFormatType value) {
    const ParmFile::ParmFormatType neg_one = (ParmFile::ParmFormatType) -1, const_zero = (ParmFile::ParmFormatType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ParmFile::ParmFormatType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ParmFile::ParmFormatType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(ParmFile::ParmFormatType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(ParmFile::ParmFormatType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ParmFile::ParmFormatType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ParmFile::ParmFormatType),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::AtomicElementType value) {
    const Atom::AtomicElementType neg_one = (Atom::AtomicElementType) -1, const_zero = (Atom::AtomicElementType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Atom::AtomicElementType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Atom::AtomicElementType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(Atom::AtomicElementType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(Atom::AtomicElementType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Atom::AtomicElementType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Atom::AtomicElementType),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Box_3a__3a_BoxType(Box::BoxType value) {
    const Box::BoxType neg_one = (Box::BoxType) -1, const_zero = (Box::BoxType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Box::BoxType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Box::BoxType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(Box::BoxType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(Box::BoxType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Box::BoxType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Box::BoxType),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::TrajFormatType value) {
    const TrajectoryFile::TrajFormatType neg_one = (TrajectoryFile::TrajFormatType) -1, const_zero = (TrajectoryFile::TrajFormatType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(TrajectoryFile::TrajFormatType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(TrajectoryFile::TrajFormatType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(TrajectoryFile::TrajFormatType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(TrajectoryFile::TrajFormatType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(TrajectoryFile::TrajFormatType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(TrajectoryFile::TrajFormatType),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::DataType value) {
    const DataSet::DataType neg_one = (DataSet::DataType) -1, const_zero = (DataSet::DataType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(DataSet::DataType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(DataSet::DataType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(DataSet::DataType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(DataSet::DataType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(DataSet::DataType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(DataSet::DataType),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Action_3a__3a_RetType(Action::RetType value) {
    const Action::RetType neg_one = (Action::RetType) -1, const_zero = (Action::RetType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Action::RetType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Action::RetType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(Action::RetType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(Action::RetType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Action::RetType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Action::RetType),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
    #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
    static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CheckBinaryVersion */
    static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
    static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
