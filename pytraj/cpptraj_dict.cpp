/* Generated by Cython 0.23.beta1 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_23_beta1"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
#define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) (void_result, Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pytraj__cpptraj_dict
#define __PYX_HAVE_API__pytraj__cpptraj_dict
#include "Traj_PDBfile.h"
#include "CpptrajFile.h"
#include "MaskToken.h"
#include "Atom.h"
#include "Traj_Mol2File.h"
#include "DataFile.h"
#include "Analysis_Hist.h"
#include "Cluster_HierAgglo.h"
#include "Mol2File.h"
#include "ReplicaDimArray.h"
#include "Box.h"
#include "TrajectoryFile.h"
#include "NetcdfFile.h"
#include "DataSet.h"
#include "ClusterSieve.h"
#include "Dimension.h"
#include "PDBfile.h"
#include "Action.h"
#include "ParmFile.h"
#include "TrajinList.h"
#include "ClusterList.h"
#include "GridAction.h"
#include "Trajin_Multi.h"
#include "Analysis.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "pytraj/cpptraj_dict.pyx",
};

/*--- Type declarations ---*/

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

static CYTHON_INLINE int __Pyx_IterFinish(void);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** value1, PyObject** value2,
                                             int is_tuple, int has_known_size, int decref_tuple);

static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Traj_PDBfile_3a__3a_PDBWRITEMODE(Traj_PDBfile::PDBWRITEMODE value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_CpptrajFile_3a__3a_AccessType(CpptrajFile::AccessType value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_CpptrajFile_3a__3a_CompressType(CpptrajFile::CompressType value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_CpptrajFile_3a__3a_FileType(CpptrajFile::FileType value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_MaskToken_3a__3a_MaskTokenType(MaskToken::MaskTokenType value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::AtomicElementType value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Traj_Mol2File_3a__3a_MOL2WRITEMODE(Traj_Mol2File::MOL2WRITEMODE value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_DataFile_3a__3a_DataFormatType(DataFile::DataFormatType value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Cluster_HierAgglo_3a__3a_LINKAGETYPE(Cluster_HierAgglo::LINKAGETYPE value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Mol2File_3a__3a_TRIPOSTAG(Mol2File::TRIPOSTAG value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ReplicaDimArray_3a__3a_RemDimType(ReplicaDimArray::RemDimType value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Box_3a__3a_BoxType(Box::BoxType value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::TrajFormatType value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::DataType value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_DataSet_3a__3a_scalarMode(DataSet::scalarMode value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::scalarType value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_PDBfile_3a__3a_PDB_RECTYPE(PDBfile::PDB_RECTYPE value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Action_3a__3a_RetType(Action::RetType value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ParmFile_3a__3a_ParmFormatType(ParmFile::ParmFormatType value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ClusterList_3a__3a_DistModeType(ClusterList::DistModeType value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ClusterList_3a__3a_DistMetricType(ClusterList::DistMetricType value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_GridAction_3a__3a_GridModeType(GridAction::GridModeType value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_TrajinList_3a__3a_TrajModeType(TrajinList::TrajModeType value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'pytraj.cpptraj_dict' */
#define __Pyx_MODULE_NAME "pytraj.cpptraj_dict"
int __pyx_module_is_main_pytraj__cpptraj_dict = 0;

/* Implementation of 'pytraj.cpptraj_dict' */
static char __pyx_k_v[] = "v";
static char __pyx_k_OK[] = "OK";
static char __pyx_k_PH[] = "PH";
static char __pyx_k_BOX[] = "BOX";
static char __pyx_k_C2P[] = "C2P";
static char __pyx_k_CHI[] = "CHI";
static char __pyx_k_CIF[] = "CIF";
static char __pyx_k_DME[] = "DME";
static char __pyx_k_END[] = "END";
static char __pyx_k_ERR[] = "ERR";
static char __pyx_k_H1P[] = "H1P";
static char __pyx_k_MOL[] = "MOL";
static char __pyx_k_NOE[] = "NOE";
static char __pyx_k_PHI[] = "PHI";
static char __pyx_k_PSI[] = "PSI";
static char __pyx_k_RMS[] = "RMS";
static char __pyx_k_SDF[] = "SDF";
static char __pyx_k_SQM[] = "SQM";
static char __pyx_k_TER[] = "TER";
static char __pyx_k_TIN[] = "TIN";
static char __pyx_k_ZIP[] = "ZIP";
static char __pyx_k_key[] = "key";
static char __pyx_k_ATOM[] = "ATOM";
static char __pyx_k_BETA[] = "BETA";
static char __pyx_k_BOND[] = "BOND";
static char __pyx_k_DATA[] = "DATA";
static char __pyx_k_DIST[] = "DIST";
static char __pyx_k_Dict[] = "Dict";
static char __pyx_k_GOLD[] = "GOLD";
static char __pyx_k_GZIP[] = "GZIP";
static char __pyx_k_IDEA[] = "IDEA";
static char __pyx_k_IRED[] = "IRED";
static char __pyx_k_IRON[] = "IRON";
static char __pyx_k_LEAD[] = "LEAD";
static char __pyx_k_NEON[] = "NEON";
static char __pyx_k_NONE[] = "NONE";
static char __pyx_k_PCHI[] = "PCHI";
static char __pyx_k_READ[] = "READ";
static char __pyx_k_TRAJ[] = "TRAJ";
static char __pyx_k_ZETA[] = "ZETA";
static char __pyx_k_ZINC[] = "ZINC";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_ALPHA[] = "ALPHA";
static char __pyx_k_ARGON[] = "ARGON";
static char __pyx_k_BORON[] = "BORON";
static char __pyx_k_BZIP2[] = "BZIP2";
static char __pyx_k_COVAR[] = "COVAR";
static char __pyx_k_DELTA[] = "DELTA";
static char __pyx_k_EVECS[] = "EVECS";
static char __pyx_k_FLOAT[] = "FLOAT";
static char __pyx_k_GAMMA[] = "GAMMA";
static char __pyx_k_MDOUT[] = "MDOUT";
static char __pyx_k_MODEL[] = "MODEL";
static char __pyx_k_MODES[] = "MODES";
static char __pyx_k_MULTI[] = "MULTI";
static char __pyx_k_M_RMS[] = "M_RMS";
static char __pyx_k_NOBOX[] = "NOBOX";
static char __pyx_k_OMEGA[] = "OMEGA";
static char __pyx_k_OP_OR[] = "OP_OR";
static char __pyx_k_ORTHO[] = "ORTHO";
static char __pyx_k_RADON[] = "RADON";
static char __pyx_k_SRMSD[] = "SRMSD";
static char __pyx_k_WRITE[] = "WRITE";
static char __pyx_k_XENON[] = "XENON";
static char __pyx_k_XPLOR[] = "XPLOR";
static char __pyx_k_value[] = "value";
static char __pyx_k_ANISOU[] = "ANISOU";
static char __pyx_k_APPEND[] = "APPEND";
static char __pyx_k_BARIUM[] = "BARIUM";
static char __pyx_k_BINPOS[] = "BINPOS";
static char __pyx_k_CARBON[] = "CARBON";
static char __pyx_k_CESIUM[] = "CESIUM";
static char __pyx_k_COBALT[] = "COBALT";
static char __pyx_k_COORDS[] = "COORDS";
static char __pyx_k_COPPER[] = "COPPER";
static char __pyx_k_CORREL[] = "CORREL";
static char __pyx_k_CRYST1[] = "CRYST1";
static char __pyx_k_DOUBLE[] = "DOUBLE";
static char __pyx_k_GMXTOP[] = "GMXTOP";
static char __pyx_k_GMXTRX[] = "GMXTRX";
static char __pyx_k_HELIUM[] = "HELIUM";
static char __pyx_k_HETATM[] = "HETATM";
static char __pyx_k_INDIUM[] = "INDIUM";
static char __pyx_k_IODINE[] = "IODINE";
static char __pyx_k_MAT3x3[] = "MAT3x3";
static char __pyx_k_NICKEL[] = "NICKEL";
static char __pyx_k_NORMAL[] = "NORMAL";
static char __pyx_k_OPENDX[] = "OPENDX";
static char __pyx_k_OP_AND[] = "OP_AND";
static char __pyx_k_OP_NEG[] = "OP_NEG";
static char __pyx_k_ORIGIN[] = "ORIGIN";
static char __pyx_k_OSMIUM[] = "OSMIUM";
static char __pyx_k_OXYGEN[] = "OXYGEN";
static char __pyx_k_PUCKER[] = "PUCKER";
static char __pyx_k_RADIUM[] = "RADIUM";
static char __pyx_k_REMLOG[] = "REMLOG";
static char __pyx_k_ResNum[] = "ResNum";
static char __pyx_k_SILVER[] = "SILVER";
static char __pyx_k_SINGLE[] = "SINGLE";
static char __pyx_k_SODIUM[] = "SODIUM";
static char __pyx_k_STRING[] = "STRING";
static char __pyx_k_SULFUR[] = "SULFUR";
static char __pyx_k_TINKER[] = "TINKER";
static char __pyx_k_UPDATE[] = "UPDATE";
static char __pyx_k_VECTOR[] = "VECTOR";
static char __pyx_k_XYMESH[] = "XYMESH";
static char __pyx_k_ARSENIC[] = "ARSENIC";
static char __pyx_k_AtomNum[] = "AtomNum";
static char __pyx_k_BISMUTH[] = "BISMUTH";
static char __pyx_k_BROMINE[] = "BROMINE";
static char __pyx_k_CADMIUM[] = "CADMIUM";
static char __pyx_k_CALCIUM[] = "CALCIUM";
static char __pyx_k_CIFFILE[] = "CIFFILE";
static char __pyx_k_CONFLIB[] = "CONFLIB";
static char __pyx_k_EPSILON[] = "EPSILON";
static char __pyx_k_EXTRAPT[] = "EXTRAPT";
static char __pyx_k_GALLIUM[] = "GALLIUM";
static char __pyx_k_GNUPLOT[] = "GNUPLOT";
static char __pyx_k_HAFNIUM[] = "HAFNIUM";
static char __pyx_k_INTEGER[] = "INTEGER";
static char __pyx_k_IRIDIUM[] = "IRIDIUM";
static char __pyx_k_KRYPTON[] = "KRYPTON";
static char __pyx_k_LITHIUM[] = "LITHIUM";
static char __pyx_k_MERCURY[] = "MERCURY";
static char __pyx_k_MPIFILE[] = "MPIFILE";
static char __pyx_k_MWCOVAR[] = "MWCOVAR";
static char __pyx_k_M_ANGLE[] = "M_ANGLE";
static char __pyx_k_NIOBIUM[] = "NIOBIUM";
static char __pyx_k_OP_DIST[] = "OP_DIST";
static char __pyx_k_OP_NONE[] = "OP_NONE";
static char __pyx_k_PARTIAL[] = "PARTIAL";
static char __pyx_k_PDBFILE[] = "PDBFILE";
static char __pyx_k_RHENIUM[] = "RHENIUM";
static char __pyx_k_RHODIUM[] = "RHODIUM";
static char __pyx_k_RHOMBIC[] = "RHOMBIC";
static char __pyx_k_ResName[] = "ResName";
static char __pyx_k_SDFFILE[] = "SDFFILE";
static char __pyx_k_SILICON[] = "SILICON";
static char __pyx_k_UNKNOWN[] = "UNKNOWN";
static char __pyx_k_XMGRACE[] = "XMGRACE";
static char __pyx_k_YTTRIUM[] = "YTTRIUM";
static char __pyx_k_ZIPFILE[] = "ZIPFILE";
static char __pyx_k_get_key[] = "get_key";
static char __pyx_k_ALUMINUM[] = "ALUMINUM";
static char __pyx_k_ANTIMONY[] = "ANTIMONY";
static char __pyx_k_ASTATINE[] = "ASTATINE";
static char __pyx_k_AtomName[] = "AtomName";
static char __pyx_k_AtomType[] = "AtomType";
static char __pyx_k_CHLORINE[] = "CHLORINE";
static char __pyx_k_CHROMIUM[] = "CHROMIUM";
static char __pyx_k_DATAFILE[] = "DATAFILE";
static char __pyx_k_DIHCOVAR[] = "DIHCOVAR";
static char __pyx_k_ENSEMBLE[] = "ENSEMBLE";
static char __pyx_k_FLUORINE[] = "FLUORINE";
static char __pyx_k_FRANCIUM[] = "FRANCIUM";
static char __pyx_k_FileDict[] = "FileDict";
static char __pyx_k_GRID_FLT[] = "GRID_FLT";
static char __pyx_k_GZIPFILE[] = "GZIPFILE";
static char __pyx_k_HYDROGEN[] = "HYDROGEN";
static char __pyx_k_LUTETIUM[] = "LUTETIUM";
static char __pyx_k_MOL2FILE[] = "MOL2FILE";
static char __pyx_k_MOLECULE[] = "MOLECULE";
static char __pyx_k_M_PUCKER[] = "M_PUCKER";
static char __pyx_k_NITROGEN[] = "NITROGEN";
static char __pyx_k_NONORTHO[] = "NONORTHO";
static char __pyx_k_PLATINUM[] = "PLATINUM";
static char __pyx_k_POLONIUM[] = "POLONIUM";
static char __pyx_k_RUBIDIUM[] = "RUBIDIUM";
static char __pyx_k_SCANDIUM[] = "SCANDIUM";
static char __pyx_k_SELENIUM[] = "SELENIUM";
static char __pyx_k_STANDARD[] = "STANDARD";
static char __pyx_k_TANTALUM[] = "TANTALUM";
static char __pyx_k_THALLIUM[] = "THALLIUM";
static char __pyx_k_TITANIUM[] = "TITANIUM";
static char __pyx_k_TRUNCOCT[] = "TRUNCOCT";
static char __pyx_k_TUNGSTEN[] = "TUNGSTEN";
static char __pyx_k_USE_FILE[] = "USE_FILE";
static char __pyx_k_VANADIUM[] = "VANADIUM";
static char __pyx_k_AMBERPARM[] = "AMBERPARM";
static char __pyx_k_AMBERTRAJ[] = "AMBERTRAJ";
static char __pyx_k_BERYLLIUM[] = "BERYLLIUM";
static char __pyx_k_BZIP2FILE[] = "BZIP2FILE";
static char __pyx_k_CHARMMDCD[] = "CHARMMDCD";
static char __pyx_k_CHARMMPSF[] = "CHARMMPSF";
static char __pyx_k_DISTCOVAR[] = "DISTCOVAR";
static char __pyx_k_GERMANIUM[] = "GERMANIUM";
static char __pyx_k_MAGNESIUM[] = "MAGNESIUM";
static char __pyx_k_MANGANESE[] = "MANGANESE";
static char __pyx_k_M_TORSION[] = "M_TORSION";
static char __pyx_k_PALLADIUM[] = "PALLADIUM";
static char __pyx_k_POTASSIUM[] = "POTASSIUM";
static char __pyx_k_REF_FRAME[] = "REF_FRAME";
static char __pyx_k_RUTHENIUM[] = "RUTHENIUM";
static char __pyx_k_STRONTIUM[] = "STRONTIUM";
static char __pyx_k_SUBSTRUCT[] = "SUBSTRUCT";
static char __pyx_k_SelectAll[] = "SelectAll";
static char __pyx_k_TELLURIUM[] = "TELLURIUM";
static char __pyx_k_UNDEFINED[] = "UNDEFINED";
static char __pyx_k_ZIRCONIUM[] = "ZIRCONIUM";
static char __pyx_k_iteritems[] = "iteritems";
static char __pyx_k_AccessDict[] = "AccessDict";
static char __pyx_k_MASKCENTER[] = "MASKCENTER";
static char __pyx_k_MATRIX_DBL[] = "MATRIX_DBL";
static char __pyx_k_MATRIX_FLT[] = "MATRIX_FLT";
static char __pyx_k_MOLYBDENUM[] = "MOLYBDENUM";
static char __pyx_k_M_DISTANCE[] = "M_DISTANCE";
static char __pyx_k_PHOSPHORUS[] = "PHOSPHORUS";
static char __pyx_k_RemDimDict[] = "RemDimDict";
static char __pyx_k_SINGLELINK[] = "SINGLELINK";
static char __pyx_k_TECHNETIUM[] = "TECHNETIUM";
static char __pyx_k_USE_FRAMES[] = "USE_FRAMES";
static char __pyx_k_scalarDict[] = "scalarDict";
static char __pyx_k_AMBERNETCDF[] = "AMBERNETCDF";
static char __pyx_k_AVERAGELINK[] = "AVERAGELINK";
static char __pyx_k_AtomElement[] = "AtomElement";
static char __pyx_k_BoxTypeDict[] = "BoxTypeDict";
static char __pyx_k_END_OF_FILE[] = "END_OF_FILE";
static char __pyx_k_HAMILTONIAN[] = "HAMILTONIAN";
static char __pyx_k_TEMPERATURE[] = "TEMPERATURE";
static char __pyx_k_AMBERRESTART[] = "AMBERRESTART";
static char __pyx_k_COMPLETELINK[] = "COMPLETELINK";
static char __pyx_k_CompressDict[] = "CompressDict";
static char __pyx_k_DataTypeDict[] = "DataTypeDict";
static char __pyx_k_DistModeDict[] = "DistModeDict";
static char __pyx_k_GridModeDict[] = "GridModeDict";
static char __pyx_k_TrajModeDict[] = "TrajModeDict";
static char __pyx_k_UNKNOWN_DATA[] = "UNKNOWN_DATA";
static char __pyx_k_UNKNOWN_MODE[] = "UNKNOWN_MODE";
static char __pyx_k_UNKNOWN_PARM[] = "UNKNOWN_PARM";
static char __pyx_k_UNKNOWN_TRAJ[] = "UNKNOWN_TRAJ";
static char __pyx_k_UNKNOWN_TYPE[] = "UNKNOWN_TYPE";
static char __pyx_k_MaskTokenDict[] = "MaskTokenDict";
static char __pyx_k_RetActionDict[] = "RetActionDict";
static char __pyx_k_TRIPOSTAGDict[] = "TRIPOSTAGDict";
static char __pyx_k_AMBERRESTARTNC[] = "AMBERRESTARTNC";
static char __pyx_k_DataFormatDict[] = "DataFormatDict";
static char __pyx_k_DistMetricDict[] = "DistMetricDict";
static char __pyx_k_NO_COMPRESSION[] = "NO_COMPRESSION";
static char __pyx_k_ParmFormatDict[] = "ParmFormatDict";
static char __pyx_k_TrajFormatDict[] = "TrajFormatDict";
static char __pyx_k_UNKNOWN_DATA_2[] = "UNKNOWN_DATA ";
static char __pyx_k_scalarModeDict[] = "scalarModeDict";
static char __pyx_k_LINKAGETYPEDict[] = "LINKAGETYPEDict";
static char __pyx_k_PDB_RECTYPEDict[] = "PDB_RECTYPEDict";
static char __pyx_k_SPECIFIEDCENTER[] = "SPECIFIEDCENTER";
static char __pyx_k_UNKNOWN_ELEMENT[] = "UNKNOWN_ELEMENT";
static char __pyx_k_PDBWRITEMODEDict[] = "PDBWRITEMODEDict";
static char __pyx_k_USEORIGINALFRAME[] = "USEORIGINALFRAME";
static char __pyx_k_AtomicElementDict[] = "AtomicElementDict";
static char __pyx_k_MOL2WRITEMODEDict[] = "MOL2WRITEMODEDict";
static char __pyx_k_SUPPRESSCOORDOUTPUT[] = "SUPPRESSCOORDOUTPUT";
static char __pyx_k_pytraj_cpptraj_dict[] = "pytraj.cpptraj_dict";
static char __pyx_k_u1_haichit_pytraj_git_hainm_pyt[] = "/u1/haichit/pytraj_git_hainm/pytraj/pytraj/cpptraj_dict.pyx";
static PyObject *__pyx_n_s_ALPHA;
static PyObject *__pyx_n_s_ALUMINUM;
static PyObject *__pyx_n_s_AMBERNETCDF;
static PyObject *__pyx_n_s_AMBERPARM;
static PyObject *__pyx_n_s_AMBERRESTART;
static PyObject *__pyx_n_s_AMBERRESTARTNC;
static PyObject *__pyx_n_s_AMBERTRAJ;
static PyObject *__pyx_n_s_ANISOU;
static PyObject *__pyx_n_s_ANTIMONY;
static PyObject *__pyx_n_s_APPEND;
static PyObject *__pyx_n_s_ARGON;
static PyObject *__pyx_n_s_ARSENIC;
static PyObject *__pyx_n_s_ASTATINE;
static PyObject *__pyx_n_s_ATOM;
static PyObject *__pyx_n_s_AVERAGELINK;
static PyObject *__pyx_n_s_AccessDict;
static PyObject *__pyx_n_s_AtomElement;
static PyObject *__pyx_n_s_AtomName;
static PyObject *__pyx_n_s_AtomNum;
static PyObject *__pyx_n_s_AtomType;
static PyObject *__pyx_n_s_AtomicElementDict;
static PyObject *__pyx_n_s_BARIUM;
static PyObject *__pyx_n_s_BERYLLIUM;
static PyObject *__pyx_n_s_BETA;
static PyObject *__pyx_n_s_BINPOS;
static PyObject *__pyx_n_s_BISMUTH;
static PyObject *__pyx_n_s_BOND;
static PyObject *__pyx_n_s_BORON;
static PyObject *__pyx_n_s_BOX;
static PyObject *__pyx_n_s_BROMINE;
static PyObject *__pyx_n_s_BZIP2;
static PyObject *__pyx_n_s_BZIP2FILE;
static PyObject *__pyx_n_s_BoxTypeDict;
static PyObject *__pyx_n_s_C2P;
static PyObject *__pyx_n_s_CADMIUM;
static PyObject *__pyx_n_s_CALCIUM;
static PyObject *__pyx_n_s_CARBON;
static PyObject *__pyx_n_s_CESIUM;
static PyObject *__pyx_n_s_CHARMMDCD;
static PyObject *__pyx_n_s_CHARMMPSF;
static PyObject *__pyx_n_s_CHI;
static PyObject *__pyx_n_s_CHLORINE;
static PyObject *__pyx_n_s_CHROMIUM;
static PyObject *__pyx_n_s_CIF;
static PyObject *__pyx_n_s_CIFFILE;
static PyObject *__pyx_n_s_COBALT;
static PyObject *__pyx_n_s_COMPLETELINK;
static PyObject *__pyx_n_s_CONFLIB;
static PyObject *__pyx_n_s_COORDS;
static PyObject *__pyx_n_s_COPPER;
static PyObject *__pyx_n_s_CORREL;
static PyObject *__pyx_n_s_COVAR;
static PyObject *__pyx_n_s_CRYST1;
static PyObject *__pyx_n_s_CompressDict;
static PyObject *__pyx_n_s_DATA;
static PyObject *__pyx_n_s_DATAFILE;
static PyObject *__pyx_n_s_DELTA;
static PyObject *__pyx_n_s_DIHCOVAR;
static PyObject *__pyx_n_s_DIST;
static PyObject *__pyx_n_s_DISTCOVAR;
static PyObject *__pyx_n_s_DME;
static PyObject *__pyx_n_s_DOUBLE;
static PyObject *__pyx_n_s_DataFormatDict;
static PyObject *__pyx_n_s_DataTypeDict;
static PyObject *__pyx_n_s_Dict;
static PyObject *__pyx_n_s_DistMetricDict;
static PyObject *__pyx_n_s_DistModeDict;
static PyObject *__pyx_n_s_END;
static PyObject *__pyx_n_s_END_OF_FILE;
static PyObject *__pyx_n_s_ENSEMBLE;
static PyObject *__pyx_n_s_EPSILON;
static PyObject *__pyx_n_s_ERR;
static PyObject *__pyx_n_s_EVECS;
static PyObject *__pyx_n_s_EXTRAPT;
static PyObject *__pyx_n_s_FLOAT;
static PyObject *__pyx_n_s_FLUORINE;
static PyObject *__pyx_n_s_FRANCIUM;
static PyObject *__pyx_n_s_FileDict;
static PyObject *__pyx_n_s_GALLIUM;
static PyObject *__pyx_n_s_GAMMA;
static PyObject *__pyx_n_s_GERMANIUM;
static PyObject *__pyx_n_s_GMXTOP;
static PyObject *__pyx_n_s_GMXTRX;
static PyObject *__pyx_n_s_GNUPLOT;
static PyObject *__pyx_n_s_GOLD;
static PyObject *__pyx_n_s_GRID_FLT;
static PyObject *__pyx_n_s_GZIP;
static PyObject *__pyx_n_s_GZIPFILE;
static PyObject *__pyx_n_s_GridModeDict;
static PyObject *__pyx_n_s_H1P;
static PyObject *__pyx_n_s_HAFNIUM;
static PyObject *__pyx_n_s_HAMILTONIAN;
static PyObject *__pyx_n_s_HELIUM;
static PyObject *__pyx_n_s_HETATM;
static PyObject *__pyx_n_s_HYDROGEN;
static PyObject *__pyx_n_s_IDEA;
static PyObject *__pyx_n_s_INDIUM;
static PyObject *__pyx_n_s_INTEGER;
static PyObject *__pyx_n_s_IODINE;
static PyObject *__pyx_n_s_IRED;
static PyObject *__pyx_n_s_IRIDIUM;
static PyObject *__pyx_n_s_IRON;
static PyObject *__pyx_n_s_KRYPTON;
static PyObject *__pyx_n_s_LEAD;
static PyObject *__pyx_n_s_LINKAGETYPEDict;
static PyObject *__pyx_n_s_LITHIUM;
static PyObject *__pyx_n_s_LUTETIUM;
static PyObject *__pyx_n_s_MAGNESIUM;
static PyObject *__pyx_n_s_MANGANESE;
static PyObject *__pyx_n_s_MASKCENTER;
static PyObject *__pyx_n_s_MAT3x3;
static PyObject *__pyx_n_s_MATRIX_DBL;
static PyObject *__pyx_n_s_MATRIX_FLT;
static PyObject *__pyx_n_s_MDOUT;
static PyObject *__pyx_n_s_MERCURY;
static PyObject *__pyx_n_s_MODEL;
static PyObject *__pyx_n_s_MODES;
static PyObject *__pyx_n_s_MOL;
static PyObject *__pyx_n_s_MOL2FILE;
static PyObject *__pyx_n_s_MOL2WRITEMODEDict;
static PyObject *__pyx_n_s_MOLECULE;
static PyObject *__pyx_n_s_MOLYBDENUM;
static PyObject *__pyx_n_s_MPIFILE;
static PyObject *__pyx_n_s_MULTI;
static PyObject *__pyx_n_s_MWCOVAR;
static PyObject *__pyx_n_s_M_ANGLE;
static PyObject *__pyx_n_s_M_DISTANCE;
static PyObject *__pyx_n_s_M_PUCKER;
static PyObject *__pyx_n_s_M_RMS;
static PyObject *__pyx_n_s_M_TORSION;
static PyObject *__pyx_n_s_MaskTokenDict;
static PyObject *__pyx_n_s_NEON;
static PyObject *__pyx_n_s_NICKEL;
static PyObject *__pyx_n_s_NIOBIUM;
static PyObject *__pyx_n_s_NITROGEN;
static PyObject *__pyx_n_s_NOBOX;
static PyObject *__pyx_n_s_NOE;
static PyObject *__pyx_n_s_NONE;
static PyObject *__pyx_n_s_NONORTHO;
static PyObject *__pyx_n_s_NORMAL;
static PyObject *__pyx_n_s_NO_COMPRESSION;
static PyObject *__pyx_n_s_OK;
static PyObject *__pyx_n_s_OMEGA;
static PyObject *__pyx_n_s_OPENDX;
static PyObject *__pyx_n_s_OP_AND;
static PyObject *__pyx_n_s_OP_DIST;
static PyObject *__pyx_n_s_OP_NEG;
static PyObject *__pyx_n_s_OP_NONE;
static PyObject *__pyx_n_s_OP_OR;
static PyObject *__pyx_n_s_ORIGIN;
static PyObject *__pyx_n_s_ORTHO;
static PyObject *__pyx_n_s_OSMIUM;
static PyObject *__pyx_n_s_OXYGEN;
static PyObject *__pyx_n_s_PALLADIUM;
static PyObject *__pyx_n_s_PARTIAL;
static PyObject *__pyx_n_s_PCHI;
static PyObject *__pyx_n_s_PDBFILE;
static PyObject *__pyx_n_s_PDBWRITEMODEDict;
static PyObject *__pyx_n_s_PDB_RECTYPEDict;
static PyObject *__pyx_n_s_PH;
static PyObject *__pyx_n_s_PHI;
static PyObject *__pyx_n_s_PHOSPHORUS;
static PyObject *__pyx_n_s_PLATINUM;
static PyObject *__pyx_n_s_POLONIUM;
static PyObject *__pyx_n_s_POTASSIUM;
static PyObject *__pyx_n_s_PSI;
static PyObject *__pyx_n_s_PUCKER;
static PyObject *__pyx_n_s_ParmFormatDict;
static PyObject *__pyx_n_s_RADIUM;
static PyObject *__pyx_n_s_RADON;
static PyObject *__pyx_n_s_READ;
static PyObject *__pyx_n_s_REF_FRAME;
static PyObject *__pyx_n_s_REMLOG;
static PyObject *__pyx_n_s_RHENIUM;
static PyObject *__pyx_n_s_RHODIUM;
static PyObject *__pyx_n_s_RHOMBIC;
static PyObject *__pyx_n_s_RMS;
static PyObject *__pyx_n_s_RUBIDIUM;
static PyObject *__pyx_n_s_RUTHENIUM;
static PyObject *__pyx_n_s_RemDimDict;
static PyObject *__pyx_n_s_ResName;
static PyObject *__pyx_n_s_ResNum;
static PyObject *__pyx_n_s_RetActionDict;
static PyObject *__pyx_n_s_SCANDIUM;
static PyObject *__pyx_n_s_SDF;
static PyObject *__pyx_n_s_SDFFILE;
static PyObject *__pyx_n_s_SELENIUM;
static PyObject *__pyx_n_s_SILICON;
static PyObject *__pyx_n_s_SILVER;
static PyObject *__pyx_n_s_SINGLE;
static PyObject *__pyx_n_s_SINGLELINK;
static PyObject *__pyx_n_s_SODIUM;
static PyObject *__pyx_n_s_SPECIFIEDCENTER;
static PyObject *__pyx_n_s_SQM;
static PyObject *__pyx_n_s_SRMSD;
static PyObject *__pyx_n_s_STANDARD;
static PyObject *__pyx_n_s_STRING;
static PyObject *__pyx_n_s_STRONTIUM;
static PyObject *__pyx_n_s_SUBSTRUCT;
static PyObject *__pyx_n_s_SULFUR;
static PyObject *__pyx_n_s_SUPPRESSCOORDOUTPUT;
static PyObject *__pyx_n_s_SelectAll;
static PyObject *__pyx_n_s_TANTALUM;
static PyObject *__pyx_n_s_TECHNETIUM;
static PyObject *__pyx_n_s_TELLURIUM;
static PyObject *__pyx_n_s_TEMPERATURE;
static PyObject *__pyx_n_s_TER;
static PyObject *__pyx_n_s_THALLIUM;
static PyObject *__pyx_n_s_TIN;
static PyObject *__pyx_n_s_TINKER;
static PyObject *__pyx_n_s_TITANIUM;
static PyObject *__pyx_n_s_TRAJ;
static PyObject *__pyx_n_s_TRIPOSTAGDict;
static PyObject *__pyx_n_s_TRUNCOCT;
static PyObject *__pyx_n_s_TUNGSTEN;
static PyObject *__pyx_n_s_TrajFormatDict;
static PyObject *__pyx_n_s_TrajModeDict;
static PyObject *__pyx_n_s_UNDEFINED;
static PyObject *__pyx_n_s_UNKNOWN;
static PyObject *__pyx_n_s_UNKNOWN_DATA;
static PyObject *__pyx_kp_s_UNKNOWN_DATA_2;
static PyObject *__pyx_n_s_UNKNOWN_ELEMENT;
static PyObject *__pyx_n_s_UNKNOWN_MODE;
static PyObject *__pyx_n_s_UNKNOWN_PARM;
static PyObject *__pyx_n_s_UNKNOWN_TRAJ;
static PyObject *__pyx_n_s_UNKNOWN_TYPE;
static PyObject *__pyx_n_s_UPDATE;
static PyObject *__pyx_n_s_USEORIGINALFRAME;
static PyObject *__pyx_n_s_USE_FILE;
static PyObject *__pyx_n_s_USE_FRAMES;
static PyObject *__pyx_n_s_VANADIUM;
static PyObject *__pyx_n_s_VECTOR;
static PyObject *__pyx_n_s_WRITE;
static PyObject *__pyx_n_s_XENON;
static PyObject *__pyx_n_s_XMGRACE;
static PyObject *__pyx_n_s_XPLOR;
static PyObject *__pyx_n_s_XYMESH;
static PyObject *__pyx_n_s_YTTRIUM;
static PyObject *__pyx_n_s_ZETA;
static PyObject *__pyx_n_s_ZINC;
static PyObject *__pyx_n_s_ZIP;
static PyObject *__pyx_n_s_ZIPFILE;
static PyObject *__pyx_n_s_ZIRCONIUM;
static PyObject *__pyx_n_s_get_key;
static PyObject *__pyx_n_s_iteritems;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_pytraj_cpptraj_dict;
static PyObject *__pyx_n_s_scalarDict;
static PyObject *__pyx_n_s_scalarModeDict;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_s_u1_haichit_pytraj_git_hainm_pyt;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_pf_6pytraj_12cpptraj_dict_get_key(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_value, PyObject *__pyx_v_Dict); /* proto */
static PyObject *__pyx_tuple_;
static PyObject *__pyx_codeobj__2;

/* "pytraj/cpptraj_dict.pyx":5
 * # need to check if cpptraj updates new enum values
 * 
 * def get_key(value, dict Dict):             # <<<<<<<<<<<<<<
 *     """return the first key having Dict[key] == value"""
 *     for key, v in Dict.iteritems():
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_12cpptraj_dict_1get_key(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pytraj_12cpptraj_dict_get_key[] = "get_key(value, dict Dict)\nreturn the first key having Dict[key] == value";
static PyMethodDef __pyx_mdef_6pytraj_12cpptraj_dict_1get_key = {"get_key", (PyCFunction)__pyx_pw_6pytraj_12cpptraj_dict_1get_key, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pytraj_12cpptraj_dict_get_key};
static PyObject *__pyx_pw_6pytraj_12cpptraj_dict_1get_key(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_Dict = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_key (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,&__pyx_n_s_Dict,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Dict)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_key", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_key") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_value = values[0];
    __pyx_v_Dict = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_key", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pytraj.cpptraj_dict.get_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_Dict), (&PyDict_Type), 1, "Dict", 1))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6pytraj_12cpptraj_dict_get_key(__pyx_self, __pyx_v_value, __pyx_v_Dict);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_12cpptraj_dict_get_key(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_value, PyObject *__pyx_v_Dict) {
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_key", 0);

  /* "pytraj/cpptraj_dict.pyx":7
 * def get_key(value, dict Dict):
 *     """return the first key having Dict[key] == value"""
 *     for key, v in Dict.iteritems():             # <<<<<<<<<<<<<<
 *         if v == value:
 *             return key
 */
  __pyx_t_2 = 0;
  if (unlikely(__pyx_v_Dict == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%s'", "iteritems");
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = __Pyx_dict_iterator(__pyx_v_Dict, 1, __pyx_n_s_iteritems, (&__pyx_t_3), (&__pyx_t_4)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_5;
  __pyx_t_5 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_3, &__pyx_t_2, &__pyx_t_5, &__pyx_t_6, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "pytraj/cpptraj_dict.pyx":8
 *     """return the first key having Dict[key] == value"""
 *     for key, v in Dict.iteritems():
 *         if v == value:             # <<<<<<<<<<<<<<
 *             return key
 * 
 */
    __pyx_t_6 = PyObject_RichCompare(__pyx_v_v, __pyx_v_value, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_8) {

      /* "pytraj/cpptraj_dict.pyx":9
 *     for key, v in Dict.iteritems():
 *         if v == value:
 *             return key             # <<<<<<<<<<<<<<
 * 
 * # Below are dictionary for cpptraj files/types, ...
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_key);
      __pyx_r = __pyx_v_key;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "pytraj/cpptraj_dict.pyx":8
 *     """return the first key having Dict[key] == value"""
 *     for key, v in Dict.iteritems():
 *         if v == value:             # <<<<<<<<<<<<<<
 *             return key
 * 
 */
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":5
 * # need to check if cpptraj updates new enum values
 * 
 * def get_key(value, dict Dict):             # <<<<<<<<<<<<<<
 *     """return the first key having Dict[key] == value"""
 *     for key, v in Dict.iteritems():
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pytraj.cpptraj_dict.get_key", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "cpptraj_dict",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ALPHA, __pyx_k_ALPHA, sizeof(__pyx_k_ALPHA), 0, 0, 1, 1},
  {&__pyx_n_s_ALUMINUM, __pyx_k_ALUMINUM, sizeof(__pyx_k_ALUMINUM), 0, 0, 1, 1},
  {&__pyx_n_s_AMBERNETCDF, __pyx_k_AMBERNETCDF, sizeof(__pyx_k_AMBERNETCDF), 0, 0, 1, 1},
  {&__pyx_n_s_AMBERPARM, __pyx_k_AMBERPARM, sizeof(__pyx_k_AMBERPARM), 0, 0, 1, 1},
  {&__pyx_n_s_AMBERRESTART, __pyx_k_AMBERRESTART, sizeof(__pyx_k_AMBERRESTART), 0, 0, 1, 1},
  {&__pyx_n_s_AMBERRESTARTNC, __pyx_k_AMBERRESTARTNC, sizeof(__pyx_k_AMBERRESTARTNC), 0, 0, 1, 1},
  {&__pyx_n_s_AMBERTRAJ, __pyx_k_AMBERTRAJ, sizeof(__pyx_k_AMBERTRAJ), 0, 0, 1, 1},
  {&__pyx_n_s_ANISOU, __pyx_k_ANISOU, sizeof(__pyx_k_ANISOU), 0, 0, 1, 1},
  {&__pyx_n_s_ANTIMONY, __pyx_k_ANTIMONY, sizeof(__pyx_k_ANTIMONY), 0, 0, 1, 1},
  {&__pyx_n_s_APPEND, __pyx_k_APPEND, sizeof(__pyx_k_APPEND), 0, 0, 1, 1},
  {&__pyx_n_s_ARGON, __pyx_k_ARGON, sizeof(__pyx_k_ARGON), 0, 0, 1, 1},
  {&__pyx_n_s_ARSENIC, __pyx_k_ARSENIC, sizeof(__pyx_k_ARSENIC), 0, 0, 1, 1},
  {&__pyx_n_s_ASTATINE, __pyx_k_ASTATINE, sizeof(__pyx_k_ASTATINE), 0, 0, 1, 1},
  {&__pyx_n_s_ATOM, __pyx_k_ATOM, sizeof(__pyx_k_ATOM), 0, 0, 1, 1},
  {&__pyx_n_s_AVERAGELINK, __pyx_k_AVERAGELINK, sizeof(__pyx_k_AVERAGELINK), 0, 0, 1, 1},
  {&__pyx_n_s_AccessDict, __pyx_k_AccessDict, sizeof(__pyx_k_AccessDict), 0, 0, 1, 1},
  {&__pyx_n_s_AtomElement, __pyx_k_AtomElement, sizeof(__pyx_k_AtomElement), 0, 0, 1, 1},
  {&__pyx_n_s_AtomName, __pyx_k_AtomName, sizeof(__pyx_k_AtomName), 0, 0, 1, 1},
  {&__pyx_n_s_AtomNum, __pyx_k_AtomNum, sizeof(__pyx_k_AtomNum), 0, 0, 1, 1},
  {&__pyx_n_s_AtomType, __pyx_k_AtomType, sizeof(__pyx_k_AtomType), 0, 0, 1, 1},
  {&__pyx_n_s_AtomicElementDict, __pyx_k_AtomicElementDict, sizeof(__pyx_k_AtomicElementDict), 0, 0, 1, 1},
  {&__pyx_n_s_BARIUM, __pyx_k_BARIUM, sizeof(__pyx_k_BARIUM), 0, 0, 1, 1},
  {&__pyx_n_s_BERYLLIUM, __pyx_k_BERYLLIUM, sizeof(__pyx_k_BERYLLIUM), 0, 0, 1, 1},
  {&__pyx_n_s_BETA, __pyx_k_BETA, sizeof(__pyx_k_BETA), 0, 0, 1, 1},
  {&__pyx_n_s_BINPOS, __pyx_k_BINPOS, sizeof(__pyx_k_BINPOS), 0, 0, 1, 1},
  {&__pyx_n_s_BISMUTH, __pyx_k_BISMUTH, sizeof(__pyx_k_BISMUTH), 0, 0, 1, 1},
  {&__pyx_n_s_BOND, __pyx_k_BOND, sizeof(__pyx_k_BOND), 0, 0, 1, 1},
  {&__pyx_n_s_BORON, __pyx_k_BORON, sizeof(__pyx_k_BORON), 0, 0, 1, 1},
  {&__pyx_n_s_BOX, __pyx_k_BOX, sizeof(__pyx_k_BOX), 0, 0, 1, 1},
  {&__pyx_n_s_BROMINE, __pyx_k_BROMINE, sizeof(__pyx_k_BROMINE), 0, 0, 1, 1},
  {&__pyx_n_s_BZIP2, __pyx_k_BZIP2, sizeof(__pyx_k_BZIP2), 0, 0, 1, 1},
  {&__pyx_n_s_BZIP2FILE, __pyx_k_BZIP2FILE, sizeof(__pyx_k_BZIP2FILE), 0, 0, 1, 1},
  {&__pyx_n_s_BoxTypeDict, __pyx_k_BoxTypeDict, sizeof(__pyx_k_BoxTypeDict), 0, 0, 1, 1},
  {&__pyx_n_s_C2P, __pyx_k_C2P, sizeof(__pyx_k_C2P), 0, 0, 1, 1},
  {&__pyx_n_s_CADMIUM, __pyx_k_CADMIUM, sizeof(__pyx_k_CADMIUM), 0, 0, 1, 1},
  {&__pyx_n_s_CALCIUM, __pyx_k_CALCIUM, sizeof(__pyx_k_CALCIUM), 0, 0, 1, 1},
  {&__pyx_n_s_CARBON, __pyx_k_CARBON, sizeof(__pyx_k_CARBON), 0, 0, 1, 1},
  {&__pyx_n_s_CESIUM, __pyx_k_CESIUM, sizeof(__pyx_k_CESIUM), 0, 0, 1, 1},
  {&__pyx_n_s_CHARMMDCD, __pyx_k_CHARMMDCD, sizeof(__pyx_k_CHARMMDCD), 0, 0, 1, 1},
  {&__pyx_n_s_CHARMMPSF, __pyx_k_CHARMMPSF, sizeof(__pyx_k_CHARMMPSF), 0, 0, 1, 1},
  {&__pyx_n_s_CHI, __pyx_k_CHI, sizeof(__pyx_k_CHI), 0, 0, 1, 1},
  {&__pyx_n_s_CHLORINE, __pyx_k_CHLORINE, sizeof(__pyx_k_CHLORINE), 0, 0, 1, 1},
  {&__pyx_n_s_CHROMIUM, __pyx_k_CHROMIUM, sizeof(__pyx_k_CHROMIUM), 0, 0, 1, 1},
  {&__pyx_n_s_CIF, __pyx_k_CIF, sizeof(__pyx_k_CIF), 0, 0, 1, 1},
  {&__pyx_n_s_CIFFILE, __pyx_k_CIFFILE, sizeof(__pyx_k_CIFFILE), 0, 0, 1, 1},
  {&__pyx_n_s_COBALT, __pyx_k_COBALT, sizeof(__pyx_k_COBALT), 0, 0, 1, 1},
  {&__pyx_n_s_COMPLETELINK, __pyx_k_COMPLETELINK, sizeof(__pyx_k_COMPLETELINK), 0, 0, 1, 1},
  {&__pyx_n_s_CONFLIB, __pyx_k_CONFLIB, sizeof(__pyx_k_CONFLIB), 0, 0, 1, 1},
  {&__pyx_n_s_COORDS, __pyx_k_COORDS, sizeof(__pyx_k_COORDS), 0, 0, 1, 1},
  {&__pyx_n_s_COPPER, __pyx_k_COPPER, sizeof(__pyx_k_COPPER), 0, 0, 1, 1},
  {&__pyx_n_s_CORREL, __pyx_k_CORREL, sizeof(__pyx_k_CORREL), 0, 0, 1, 1},
  {&__pyx_n_s_COVAR, __pyx_k_COVAR, sizeof(__pyx_k_COVAR), 0, 0, 1, 1},
  {&__pyx_n_s_CRYST1, __pyx_k_CRYST1, sizeof(__pyx_k_CRYST1), 0, 0, 1, 1},
  {&__pyx_n_s_CompressDict, __pyx_k_CompressDict, sizeof(__pyx_k_CompressDict), 0, 0, 1, 1},
  {&__pyx_n_s_DATA, __pyx_k_DATA, sizeof(__pyx_k_DATA), 0, 0, 1, 1},
  {&__pyx_n_s_DATAFILE, __pyx_k_DATAFILE, sizeof(__pyx_k_DATAFILE), 0, 0, 1, 1},
  {&__pyx_n_s_DELTA, __pyx_k_DELTA, sizeof(__pyx_k_DELTA), 0, 0, 1, 1},
  {&__pyx_n_s_DIHCOVAR, __pyx_k_DIHCOVAR, sizeof(__pyx_k_DIHCOVAR), 0, 0, 1, 1},
  {&__pyx_n_s_DIST, __pyx_k_DIST, sizeof(__pyx_k_DIST), 0, 0, 1, 1},
  {&__pyx_n_s_DISTCOVAR, __pyx_k_DISTCOVAR, sizeof(__pyx_k_DISTCOVAR), 0, 0, 1, 1},
  {&__pyx_n_s_DME, __pyx_k_DME, sizeof(__pyx_k_DME), 0, 0, 1, 1},
  {&__pyx_n_s_DOUBLE, __pyx_k_DOUBLE, sizeof(__pyx_k_DOUBLE), 0, 0, 1, 1},
  {&__pyx_n_s_DataFormatDict, __pyx_k_DataFormatDict, sizeof(__pyx_k_DataFormatDict), 0, 0, 1, 1},
  {&__pyx_n_s_DataTypeDict, __pyx_k_DataTypeDict, sizeof(__pyx_k_DataTypeDict), 0, 0, 1, 1},
  {&__pyx_n_s_Dict, __pyx_k_Dict, sizeof(__pyx_k_Dict), 0, 0, 1, 1},
  {&__pyx_n_s_DistMetricDict, __pyx_k_DistMetricDict, sizeof(__pyx_k_DistMetricDict), 0, 0, 1, 1},
  {&__pyx_n_s_DistModeDict, __pyx_k_DistModeDict, sizeof(__pyx_k_DistModeDict), 0, 0, 1, 1},
  {&__pyx_n_s_END, __pyx_k_END, sizeof(__pyx_k_END), 0, 0, 1, 1},
  {&__pyx_n_s_END_OF_FILE, __pyx_k_END_OF_FILE, sizeof(__pyx_k_END_OF_FILE), 0, 0, 1, 1},
  {&__pyx_n_s_ENSEMBLE, __pyx_k_ENSEMBLE, sizeof(__pyx_k_ENSEMBLE), 0, 0, 1, 1},
  {&__pyx_n_s_EPSILON, __pyx_k_EPSILON, sizeof(__pyx_k_EPSILON), 0, 0, 1, 1},
  {&__pyx_n_s_ERR, __pyx_k_ERR, sizeof(__pyx_k_ERR), 0, 0, 1, 1},
  {&__pyx_n_s_EVECS, __pyx_k_EVECS, sizeof(__pyx_k_EVECS), 0, 0, 1, 1},
  {&__pyx_n_s_EXTRAPT, __pyx_k_EXTRAPT, sizeof(__pyx_k_EXTRAPT), 0, 0, 1, 1},
  {&__pyx_n_s_FLOAT, __pyx_k_FLOAT, sizeof(__pyx_k_FLOAT), 0, 0, 1, 1},
  {&__pyx_n_s_FLUORINE, __pyx_k_FLUORINE, sizeof(__pyx_k_FLUORINE), 0, 0, 1, 1},
  {&__pyx_n_s_FRANCIUM, __pyx_k_FRANCIUM, sizeof(__pyx_k_FRANCIUM), 0, 0, 1, 1},
  {&__pyx_n_s_FileDict, __pyx_k_FileDict, sizeof(__pyx_k_FileDict), 0, 0, 1, 1},
  {&__pyx_n_s_GALLIUM, __pyx_k_GALLIUM, sizeof(__pyx_k_GALLIUM), 0, 0, 1, 1},
  {&__pyx_n_s_GAMMA, __pyx_k_GAMMA, sizeof(__pyx_k_GAMMA), 0, 0, 1, 1},
  {&__pyx_n_s_GERMANIUM, __pyx_k_GERMANIUM, sizeof(__pyx_k_GERMANIUM), 0, 0, 1, 1},
  {&__pyx_n_s_GMXTOP, __pyx_k_GMXTOP, sizeof(__pyx_k_GMXTOP), 0, 0, 1, 1},
  {&__pyx_n_s_GMXTRX, __pyx_k_GMXTRX, sizeof(__pyx_k_GMXTRX), 0, 0, 1, 1},
  {&__pyx_n_s_GNUPLOT, __pyx_k_GNUPLOT, sizeof(__pyx_k_GNUPLOT), 0, 0, 1, 1},
  {&__pyx_n_s_GOLD, __pyx_k_GOLD, sizeof(__pyx_k_GOLD), 0, 0, 1, 1},
  {&__pyx_n_s_GRID_FLT, __pyx_k_GRID_FLT, sizeof(__pyx_k_GRID_FLT), 0, 0, 1, 1},
  {&__pyx_n_s_GZIP, __pyx_k_GZIP, sizeof(__pyx_k_GZIP), 0, 0, 1, 1},
  {&__pyx_n_s_GZIPFILE, __pyx_k_GZIPFILE, sizeof(__pyx_k_GZIPFILE), 0, 0, 1, 1},
  {&__pyx_n_s_GridModeDict, __pyx_k_GridModeDict, sizeof(__pyx_k_GridModeDict), 0, 0, 1, 1},
  {&__pyx_n_s_H1P, __pyx_k_H1P, sizeof(__pyx_k_H1P), 0, 0, 1, 1},
  {&__pyx_n_s_HAFNIUM, __pyx_k_HAFNIUM, sizeof(__pyx_k_HAFNIUM), 0, 0, 1, 1},
  {&__pyx_n_s_HAMILTONIAN, __pyx_k_HAMILTONIAN, sizeof(__pyx_k_HAMILTONIAN), 0, 0, 1, 1},
  {&__pyx_n_s_HELIUM, __pyx_k_HELIUM, sizeof(__pyx_k_HELIUM), 0, 0, 1, 1},
  {&__pyx_n_s_HETATM, __pyx_k_HETATM, sizeof(__pyx_k_HETATM), 0, 0, 1, 1},
  {&__pyx_n_s_HYDROGEN, __pyx_k_HYDROGEN, sizeof(__pyx_k_HYDROGEN), 0, 0, 1, 1},
  {&__pyx_n_s_IDEA, __pyx_k_IDEA, sizeof(__pyx_k_IDEA), 0, 0, 1, 1},
  {&__pyx_n_s_INDIUM, __pyx_k_INDIUM, sizeof(__pyx_k_INDIUM), 0, 0, 1, 1},
  {&__pyx_n_s_INTEGER, __pyx_k_INTEGER, sizeof(__pyx_k_INTEGER), 0, 0, 1, 1},
  {&__pyx_n_s_IODINE, __pyx_k_IODINE, sizeof(__pyx_k_IODINE), 0, 0, 1, 1},
  {&__pyx_n_s_IRED, __pyx_k_IRED, sizeof(__pyx_k_IRED), 0, 0, 1, 1},
  {&__pyx_n_s_IRIDIUM, __pyx_k_IRIDIUM, sizeof(__pyx_k_IRIDIUM), 0, 0, 1, 1},
  {&__pyx_n_s_IRON, __pyx_k_IRON, sizeof(__pyx_k_IRON), 0, 0, 1, 1},
  {&__pyx_n_s_KRYPTON, __pyx_k_KRYPTON, sizeof(__pyx_k_KRYPTON), 0, 0, 1, 1},
  {&__pyx_n_s_LEAD, __pyx_k_LEAD, sizeof(__pyx_k_LEAD), 0, 0, 1, 1},
  {&__pyx_n_s_LINKAGETYPEDict, __pyx_k_LINKAGETYPEDict, sizeof(__pyx_k_LINKAGETYPEDict), 0, 0, 1, 1},
  {&__pyx_n_s_LITHIUM, __pyx_k_LITHIUM, sizeof(__pyx_k_LITHIUM), 0, 0, 1, 1},
  {&__pyx_n_s_LUTETIUM, __pyx_k_LUTETIUM, sizeof(__pyx_k_LUTETIUM), 0, 0, 1, 1},
  {&__pyx_n_s_MAGNESIUM, __pyx_k_MAGNESIUM, sizeof(__pyx_k_MAGNESIUM), 0, 0, 1, 1},
  {&__pyx_n_s_MANGANESE, __pyx_k_MANGANESE, sizeof(__pyx_k_MANGANESE), 0, 0, 1, 1},
  {&__pyx_n_s_MASKCENTER, __pyx_k_MASKCENTER, sizeof(__pyx_k_MASKCENTER), 0, 0, 1, 1},
  {&__pyx_n_s_MAT3x3, __pyx_k_MAT3x3, sizeof(__pyx_k_MAT3x3), 0, 0, 1, 1},
  {&__pyx_n_s_MATRIX_DBL, __pyx_k_MATRIX_DBL, sizeof(__pyx_k_MATRIX_DBL), 0, 0, 1, 1},
  {&__pyx_n_s_MATRIX_FLT, __pyx_k_MATRIX_FLT, sizeof(__pyx_k_MATRIX_FLT), 0, 0, 1, 1},
  {&__pyx_n_s_MDOUT, __pyx_k_MDOUT, sizeof(__pyx_k_MDOUT), 0, 0, 1, 1},
  {&__pyx_n_s_MERCURY, __pyx_k_MERCURY, sizeof(__pyx_k_MERCURY), 0, 0, 1, 1},
  {&__pyx_n_s_MODEL, __pyx_k_MODEL, sizeof(__pyx_k_MODEL), 0, 0, 1, 1},
  {&__pyx_n_s_MODES, __pyx_k_MODES, sizeof(__pyx_k_MODES), 0, 0, 1, 1},
  {&__pyx_n_s_MOL, __pyx_k_MOL, sizeof(__pyx_k_MOL), 0, 0, 1, 1},
  {&__pyx_n_s_MOL2FILE, __pyx_k_MOL2FILE, sizeof(__pyx_k_MOL2FILE), 0, 0, 1, 1},
  {&__pyx_n_s_MOL2WRITEMODEDict, __pyx_k_MOL2WRITEMODEDict, sizeof(__pyx_k_MOL2WRITEMODEDict), 0, 0, 1, 1},
  {&__pyx_n_s_MOLECULE, __pyx_k_MOLECULE, sizeof(__pyx_k_MOLECULE), 0, 0, 1, 1},
  {&__pyx_n_s_MOLYBDENUM, __pyx_k_MOLYBDENUM, sizeof(__pyx_k_MOLYBDENUM), 0, 0, 1, 1},
  {&__pyx_n_s_MPIFILE, __pyx_k_MPIFILE, sizeof(__pyx_k_MPIFILE), 0, 0, 1, 1},
  {&__pyx_n_s_MULTI, __pyx_k_MULTI, sizeof(__pyx_k_MULTI), 0, 0, 1, 1},
  {&__pyx_n_s_MWCOVAR, __pyx_k_MWCOVAR, sizeof(__pyx_k_MWCOVAR), 0, 0, 1, 1},
  {&__pyx_n_s_M_ANGLE, __pyx_k_M_ANGLE, sizeof(__pyx_k_M_ANGLE), 0, 0, 1, 1},
  {&__pyx_n_s_M_DISTANCE, __pyx_k_M_DISTANCE, sizeof(__pyx_k_M_DISTANCE), 0, 0, 1, 1},
  {&__pyx_n_s_M_PUCKER, __pyx_k_M_PUCKER, sizeof(__pyx_k_M_PUCKER), 0, 0, 1, 1},
  {&__pyx_n_s_M_RMS, __pyx_k_M_RMS, sizeof(__pyx_k_M_RMS), 0, 0, 1, 1},
  {&__pyx_n_s_M_TORSION, __pyx_k_M_TORSION, sizeof(__pyx_k_M_TORSION), 0, 0, 1, 1},
  {&__pyx_n_s_MaskTokenDict, __pyx_k_MaskTokenDict, sizeof(__pyx_k_MaskTokenDict), 0, 0, 1, 1},
  {&__pyx_n_s_NEON, __pyx_k_NEON, sizeof(__pyx_k_NEON), 0, 0, 1, 1},
  {&__pyx_n_s_NICKEL, __pyx_k_NICKEL, sizeof(__pyx_k_NICKEL), 0, 0, 1, 1},
  {&__pyx_n_s_NIOBIUM, __pyx_k_NIOBIUM, sizeof(__pyx_k_NIOBIUM), 0, 0, 1, 1},
  {&__pyx_n_s_NITROGEN, __pyx_k_NITROGEN, sizeof(__pyx_k_NITROGEN), 0, 0, 1, 1},
  {&__pyx_n_s_NOBOX, __pyx_k_NOBOX, sizeof(__pyx_k_NOBOX), 0, 0, 1, 1},
  {&__pyx_n_s_NOE, __pyx_k_NOE, sizeof(__pyx_k_NOE), 0, 0, 1, 1},
  {&__pyx_n_s_NONE, __pyx_k_NONE, sizeof(__pyx_k_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_NONORTHO, __pyx_k_NONORTHO, sizeof(__pyx_k_NONORTHO), 0, 0, 1, 1},
  {&__pyx_n_s_NORMAL, __pyx_k_NORMAL, sizeof(__pyx_k_NORMAL), 0, 0, 1, 1},
  {&__pyx_n_s_NO_COMPRESSION, __pyx_k_NO_COMPRESSION, sizeof(__pyx_k_NO_COMPRESSION), 0, 0, 1, 1},
  {&__pyx_n_s_OK, __pyx_k_OK, sizeof(__pyx_k_OK), 0, 0, 1, 1},
  {&__pyx_n_s_OMEGA, __pyx_k_OMEGA, sizeof(__pyx_k_OMEGA), 0, 0, 1, 1},
  {&__pyx_n_s_OPENDX, __pyx_k_OPENDX, sizeof(__pyx_k_OPENDX), 0, 0, 1, 1},
  {&__pyx_n_s_OP_AND, __pyx_k_OP_AND, sizeof(__pyx_k_OP_AND), 0, 0, 1, 1},
  {&__pyx_n_s_OP_DIST, __pyx_k_OP_DIST, sizeof(__pyx_k_OP_DIST), 0, 0, 1, 1},
  {&__pyx_n_s_OP_NEG, __pyx_k_OP_NEG, sizeof(__pyx_k_OP_NEG), 0, 0, 1, 1},
  {&__pyx_n_s_OP_NONE, __pyx_k_OP_NONE, sizeof(__pyx_k_OP_NONE), 0, 0, 1, 1},
  {&__pyx_n_s_OP_OR, __pyx_k_OP_OR, sizeof(__pyx_k_OP_OR), 0, 0, 1, 1},
  {&__pyx_n_s_ORIGIN, __pyx_k_ORIGIN, sizeof(__pyx_k_ORIGIN), 0, 0, 1, 1},
  {&__pyx_n_s_ORTHO, __pyx_k_ORTHO, sizeof(__pyx_k_ORTHO), 0, 0, 1, 1},
  {&__pyx_n_s_OSMIUM, __pyx_k_OSMIUM, sizeof(__pyx_k_OSMIUM), 0, 0, 1, 1},
  {&__pyx_n_s_OXYGEN, __pyx_k_OXYGEN, sizeof(__pyx_k_OXYGEN), 0, 0, 1, 1},
  {&__pyx_n_s_PALLADIUM, __pyx_k_PALLADIUM, sizeof(__pyx_k_PALLADIUM), 0, 0, 1, 1},
  {&__pyx_n_s_PARTIAL, __pyx_k_PARTIAL, sizeof(__pyx_k_PARTIAL), 0, 0, 1, 1},
  {&__pyx_n_s_PCHI, __pyx_k_PCHI, sizeof(__pyx_k_PCHI), 0, 0, 1, 1},
  {&__pyx_n_s_PDBFILE, __pyx_k_PDBFILE, sizeof(__pyx_k_PDBFILE), 0, 0, 1, 1},
  {&__pyx_n_s_PDBWRITEMODEDict, __pyx_k_PDBWRITEMODEDict, sizeof(__pyx_k_PDBWRITEMODEDict), 0, 0, 1, 1},
  {&__pyx_n_s_PDB_RECTYPEDict, __pyx_k_PDB_RECTYPEDict, sizeof(__pyx_k_PDB_RECTYPEDict), 0, 0, 1, 1},
  {&__pyx_n_s_PH, __pyx_k_PH, sizeof(__pyx_k_PH), 0, 0, 1, 1},
  {&__pyx_n_s_PHI, __pyx_k_PHI, sizeof(__pyx_k_PHI), 0, 0, 1, 1},
  {&__pyx_n_s_PHOSPHORUS, __pyx_k_PHOSPHORUS, sizeof(__pyx_k_PHOSPHORUS), 0, 0, 1, 1},
  {&__pyx_n_s_PLATINUM, __pyx_k_PLATINUM, sizeof(__pyx_k_PLATINUM), 0, 0, 1, 1},
  {&__pyx_n_s_POLONIUM, __pyx_k_POLONIUM, sizeof(__pyx_k_POLONIUM), 0, 0, 1, 1},
  {&__pyx_n_s_POTASSIUM, __pyx_k_POTASSIUM, sizeof(__pyx_k_POTASSIUM), 0, 0, 1, 1},
  {&__pyx_n_s_PSI, __pyx_k_PSI, sizeof(__pyx_k_PSI), 0, 0, 1, 1},
  {&__pyx_n_s_PUCKER, __pyx_k_PUCKER, sizeof(__pyx_k_PUCKER), 0, 0, 1, 1},
  {&__pyx_n_s_ParmFormatDict, __pyx_k_ParmFormatDict, sizeof(__pyx_k_ParmFormatDict), 0, 0, 1, 1},
  {&__pyx_n_s_RADIUM, __pyx_k_RADIUM, sizeof(__pyx_k_RADIUM), 0, 0, 1, 1},
  {&__pyx_n_s_RADON, __pyx_k_RADON, sizeof(__pyx_k_RADON), 0, 0, 1, 1},
  {&__pyx_n_s_READ, __pyx_k_READ, sizeof(__pyx_k_READ), 0, 0, 1, 1},
  {&__pyx_n_s_REF_FRAME, __pyx_k_REF_FRAME, sizeof(__pyx_k_REF_FRAME), 0, 0, 1, 1},
  {&__pyx_n_s_REMLOG, __pyx_k_REMLOG, sizeof(__pyx_k_REMLOG), 0, 0, 1, 1},
  {&__pyx_n_s_RHENIUM, __pyx_k_RHENIUM, sizeof(__pyx_k_RHENIUM), 0, 0, 1, 1},
  {&__pyx_n_s_RHODIUM, __pyx_k_RHODIUM, sizeof(__pyx_k_RHODIUM), 0, 0, 1, 1},
  {&__pyx_n_s_RHOMBIC, __pyx_k_RHOMBIC, sizeof(__pyx_k_RHOMBIC), 0, 0, 1, 1},
  {&__pyx_n_s_RMS, __pyx_k_RMS, sizeof(__pyx_k_RMS), 0, 0, 1, 1},
  {&__pyx_n_s_RUBIDIUM, __pyx_k_RUBIDIUM, sizeof(__pyx_k_RUBIDIUM), 0, 0, 1, 1},
  {&__pyx_n_s_RUTHENIUM, __pyx_k_RUTHENIUM, sizeof(__pyx_k_RUTHENIUM), 0, 0, 1, 1},
  {&__pyx_n_s_RemDimDict, __pyx_k_RemDimDict, sizeof(__pyx_k_RemDimDict), 0, 0, 1, 1},
  {&__pyx_n_s_ResName, __pyx_k_ResName, sizeof(__pyx_k_ResName), 0, 0, 1, 1},
  {&__pyx_n_s_ResNum, __pyx_k_ResNum, sizeof(__pyx_k_ResNum), 0, 0, 1, 1},
  {&__pyx_n_s_RetActionDict, __pyx_k_RetActionDict, sizeof(__pyx_k_RetActionDict), 0, 0, 1, 1},
  {&__pyx_n_s_SCANDIUM, __pyx_k_SCANDIUM, sizeof(__pyx_k_SCANDIUM), 0, 0, 1, 1},
  {&__pyx_n_s_SDF, __pyx_k_SDF, sizeof(__pyx_k_SDF), 0, 0, 1, 1},
  {&__pyx_n_s_SDFFILE, __pyx_k_SDFFILE, sizeof(__pyx_k_SDFFILE), 0, 0, 1, 1},
  {&__pyx_n_s_SELENIUM, __pyx_k_SELENIUM, sizeof(__pyx_k_SELENIUM), 0, 0, 1, 1},
  {&__pyx_n_s_SILICON, __pyx_k_SILICON, sizeof(__pyx_k_SILICON), 0, 0, 1, 1},
  {&__pyx_n_s_SILVER, __pyx_k_SILVER, sizeof(__pyx_k_SILVER), 0, 0, 1, 1},
  {&__pyx_n_s_SINGLE, __pyx_k_SINGLE, sizeof(__pyx_k_SINGLE), 0, 0, 1, 1},
  {&__pyx_n_s_SINGLELINK, __pyx_k_SINGLELINK, sizeof(__pyx_k_SINGLELINK), 0, 0, 1, 1},
  {&__pyx_n_s_SODIUM, __pyx_k_SODIUM, sizeof(__pyx_k_SODIUM), 0, 0, 1, 1},
  {&__pyx_n_s_SPECIFIEDCENTER, __pyx_k_SPECIFIEDCENTER, sizeof(__pyx_k_SPECIFIEDCENTER), 0, 0, 1, 1},
  {&__pyx_n_s_SQM, __pyx_k_SQM, sizeof(__pyx_k_SQM), 0, 0, 1, 1},
  {&__pyx_n_s_SRMSD, __pyx_k_SRMSD, sizeof(__pyx_k_SRMSD), 0, 0, 1, 1},
  {&__pyx_n_s_STANDARD, __pyx_k_STANDARD, sizeof(__pyx_k_STANDARD), 0, 0, 1, 1},
  {&__pyx_n_s_STRING, __pyx_k_STRING, sizeof(__pyx_k_STRING), 0, 0, 1, 1},
  {&__pyx_n_s_STRONTIUM, __pyx_k_STRONTIUM, sizeof(__pyx_k_STRONTIUM), 0, 0, 1, 1},
  {&__pyx_n_s_SUBSTRUCT, __pyx_k_SUBSTRUCT, sizeof(__pyx_k_SUBSTRUCT), 0, 0, 1, 1},
  {&__pyx_n_s_SULFUR, __pyx_k_SULFUR, sizeof(__pyx_k_SULFUR), 0, 0, 1, 1},
  {&__pyx_n_s_SUPPRESSCOORDOUTPUT, __pyx_k_SUPPRESSCOORDOUTPUT, sizeof(__pyx_k_SUPPRESSCOORDOUTPUT), 0, 0, 1, 1},
  {&__pyx_n_s_SelectAll, __pyx_k_SelectAll, sizeof(__pyx_k_SelectAll), 0, 0, 1, 1},
  {&__pyx_n_s_TANTALUM, __pyx_k_TANTALUM, sizeof(__pyx_k_TANTALUM), 0, 0, 1, 1},
  {&__pyx_n_s_TECHNETIUM, __pyx_k_TECHNETIUM, sizeof(__pyx_k_TECHNETIUM), 0, 0, 1, 1},
  {&__pyx_n_s_TELLURIUM, __pyx_k_TELLURIUM, sizeof(__pyx_k_TELLURIUM), 0, 0, 1, 1},
  {&__pyx_n_s_TEMPERATURE, __pyx_k_TEMPERATURE, sizeof(__pyx_k_TEMPERATURE), 0, 0, 1, 1},
  {&__pyx_n_s_TER, __pyx_k_TER, sizeof(__pyx_k_TER), 0, 0, 1, 1},
  {&__pyx_n_s_THALLIUM, __pyx_k_THALLIUM, sizeof(__pyx_k_THALLIUM), 0, 0, 1, 1},
  {&__pyx_n_s_TIN, __pyx_k_TIN, sizeof(__pyx_k_TIN), 0, 0, 1, 1},
  {&__pyx_n_s_TINKER, __pyx_k_TINKER, sizeof(__pyx_k_TINKER), 0, 0, 1, 1},
  {&__pyx_n_s_TITANIUM, __pyx_k_TITANIUM, sizeof(__pyx_k_TITANIUM), 0, 0, 1, 1},
  {&__pyx_n_s_TRAJ, __pyx_k_TRAJ, sizeof(__pyx_k_TRAJ), 0, 0, 1, 1},
  {&__pyx_n_s_TRIPOSTAGDict, __pyx_k_TRIPOSTAGDict, sizeof(__pyx_k_TRIPOSTAGDict), 0, 0, 1, 1},
  {&__pyx_n_s_TRUNCOCT, __pyx_k_TRUNCOCT, sizeof(__pyx_k_TRUNCOCT), 0, 0, 1, 1},
  {&__pyx_n_s_TUNGSTEN, __pyx_k_TUNGSTEN, sizeof(__pyx_k_TUNGSTEN), 0, 0, 1, 1},
  {&__pyx_n_s_TrajFormatDict, __pyx_k_TrajFormatDict, sizeof(__pyx_k_TrajFormatDict), 0, 0, 1, 1},
  {&__pyx_n_s_TrajModeDict, __pyx_k_TrajModeDict, sizeof(__pyx_k_TrajModeDict), 0, 0, 1, 1},
  {&__pyx_n_s_UNDEFINED, __pyx_k_UNDEFINED, sizeof(__pyx_k_UNDEFINED), 0, 0, 1, 1},
  {&__pyx_n_s_UNKNOWN, __pyx_k_UNKNOWN, sizeof(__pyx_k_UNKNOWN), 0, 0, 1, 1},
  {&__pyx_n_s_UNKNOWN_DATA, __pyx_k_UNKNOWN_DATA, sizeof(__pyx_k_UNKNOWN_DATA), 0, 0, 1, 1},
  {&__pyx_kp_s_UNKNOWN_DATA_2, __pyx_k_UNKNOWN_DATA_2, sizeof(__pyx_k_UNKNOWN_DATA_2), 0, 0, 1, 0},
  {&__pyx_n_s_UNKNOWN_ELEMENT, __pyx_k_UNKNOWN_ELEMENT, sizeof(__pyx_k_UNKNOWN_ELEMENT), 0, 0, 1, 1},
  {&__pyx_n_s_UNKNOWN_MODE, __pyx_k_UNKNOWN_MODE, sizeof(__pyx_k_UNKNOWN_MODE), 0, 0, 1, 1},
  {&__pyx_n_s_UNKNOWN_PARM, __pyx_k_UNKNOWN_PARM, sizeof(__pyx_k_UNKNOWN_PARM), 0, 0, 1, 1},
  {&__pyx_n_s_UNKNOWN_TRAJ, __pyx_k_UNKNOWN_TRAJ, sizeof(__pyx_k_UNKNOWN_TRAJ), 0, 0, 1, 1},
  {&__pyx_n_s_UNKNOWN_TYPE, __pyx_k_UNKNOWN_TYPE, sizeof(__pyx_k_UNKNOWN_TYPE), 0, 0, 1, 1},
  {&__pyx_n_s_UPDATE, __pyx_k_UPDATE, sizeof(__pyx_k_UPDATE), 0, 0, 1, 1},
  {&__pyx_n_s_USEORIGINALFRAME, __pyx_k_USEORIGINALFRAME, sizeof(__pyx_k_USEORIGINALFRAME), 0, 0, 1, 1},
  {&__pyx_n_s_USE_FILE, __pyx_k_USE_FILE, sizeof(__pyx_k_USE_FILE), 0, 0, 1, 1},
  {&__pyx_n_s_USE_FRAMES, __pyx_k_USE_FRAMES, sizeof(__pyx_k_USE_FRAMES), 0, 0, 1, 1},
  {&__pyx_n_s_VANADIUM, __pyx_k_VANADIUM, sizeof(__pyx_k_VANADIUM), 0, 0, 1, 1},
  {&__pyx_n_s_VECTOR, __pyx_k_VECTOR, sizeof(__pyx_k_VECTOR), 0, 0, 1, 1},
  {&__pyx_n_s_WRITE, __pyx_k_WRITE, sizeof(__pyx_k_WRITE), 0, 0, 1, 1},
  {&__pyx_n_s_XENON, __pyx_k_XENON, sizeof(__pyx_k_XENON), 0, 0, 1, 1},
  {&__pyx_n_s_XMGRACE, __pyx_k_XMGRACE, sizeof(__pyx_k_XMGRACE), 0, 0, 1, 1},
  {&__pyx_n_s_XPLOR, __pyx_k_XPLOR, sizeof(__pyx_k_XPLOR), 0, 0, 1, 1},
  {&__pyx_n_s_XYMESH, __pyx_k_XYMESH, sizeof(__pyx_k_XYMESH), 0, 0, 1, 1},
  {&__pyx_n_s_YTTRIUM, __pyx_k_YTTRIUM, sizeof(__pyx_k_YTTRIUM), 0, 0, 1, 1},
  {&__pyx_n_s_ZETA, __pyx_k_ZETA, sizeof(__pyx_k_ZETA), 0, 0, 1, 1},
  {&__pyx_n_s_ZINC, __pyx_k_ZINC, sizeof(__pyx_k_ZINC), 0, 0, 1, 1},
  {&__pyx_n_s_ZIP, __pyx_k_ZIP, sizeof(__pyx_k_ZIP), 0, 0, 1, 1},
  {&__pyx_n_s_ZIPFILE, __pyx_k_ZIPFILE, sizeof(__pyx_k_ZIPFILE), 0, 0, 1, 1},
  {&__pyx_n_s_ZIRCONIUM, __pyx_k_ZIRCONIUM, sizeof(__pyx_k_ZIRCONIUM), 0, 0, 1, 1},
  {&__pyx_n_s_get_key, __pyx_k_get_key, sizeof(__pyx_k_get_key), 0, 0, 1, 1},
  {&__pyx_n_s_iteritems, __pyx_k_iteritems, sizeof(__pyx_k_iteritems), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_pytraj_cpptraj_dict, __pyx_k_pytraj_cpptraj_dict, sizeof(__pyx_k_pytraj_cpptraj_dict), 0, 0, 1, 1},
  {&__pyx_n_s_scalarDict, __pyx_k_scalarDict, sizeof(__pyx_k_scalarDict), 0, 0, 1, 1},
  {&__pyx_n_s_scalarModeDict, __pyx_k_scalarModeDict, sizeof(__pyx_k_scalarModeDict), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_s_u1_haichit_pytraj_git_hainm_pyt, __pyx_k_u1_haichit_pytraj_git_hainm_pyt, sizeof(__pyx_k_u1_haichit_pytraj_git_hainm_pyt), 0, 0, 1, 0},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  return 0;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "pytraj/cpptraj_dict.pyx":5
 * # need to check if cpptraj updates new enum values
 * 
 * def get_key(value, dict Dict):             # <<<<<<<<<<<<<<
 *     """return the first key having Dict[key] == value"""
 *     for key, v in Dict.iteritems():
 */
  __pyx_tuple_ = PyTuple_Pack(4, __pyx_n_s_value, __pyx_n_s_Dict, __pyx_n_s_key, __pyx_n_s_v); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);
  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple_, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_u1_haichit_pytraj_git_hainm_pyt, __pyx_n_s_get_key, 5, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initcpptraj_dict(void); /*proto*/
PyMODINIT_FUNC initcpptraj_dict(void)
#else
PyMODINIT_FUNC PyInit_cpptraj_dict(void); /*proto*/
PyMODINIT_FUNC PyInit_cpptraj_dict(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_cpptraj_dict(void)", 0);
  if (__Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("cpptraj_dict", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_pytraj__cpptraj_dict) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "pytraj.cpptraj_dict")) {
      if (unlikely(PyDict_SetItemString(modules, "pytraj.cpptraj_dict", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif

  /* "pytraj/cpptraj_dict.pyx":5
 * # need to check if cpptraj updates new enum values
 * 
 * def get_key(value, dict Dict):             # <<<<<<<<<<<<<<
 *     """return the first key having Dict[key] == value"""
 *     for key, v in Dict.iteritems():
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6pytraj_12cpptraj_dict_1get_key, NULL, __pyx_n_s_pytraj_cpptraj_dict); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_key, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":15
 * #from Traj_PDBfile cimport *
 * PDBWRITEMODEDict = {
 *     "NONE" : NONEPDBWRITEMODE,             # <<<<<<<<<<<<<<
 *     "SINGLE" : SINGLE,
 *     "MODEL" : MODEL,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_Traj_PDBfile_3a__3a_PDBWRITEMODE(Traj_PDBfile::NONE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_NONE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":16
 * PDBWRITEMODEDict = {
 *     "NONE" : NONEPDBWRITEMODE,
 *     "SINGLE" : SINGLE,             # <<<<<<<<<<<<<<
 *     "MODEL" : MODEL,
 *     "MULTI" : MULTIPDB,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Traj_PDBfile_3a__3a_PDBWRITEMODE(Traj_PDBfile::SINGLE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SINGLE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":17
 *     "NONE" : NONEPDBWRITEMODE,
 *     "SINGLE" : SINGLE,
 *     "MODEL" : MODEL,             # <<<<<<<<<<<<<<
 *     "MULTI" : MULTIPDB,
 *     }
 */
  __pyx_t_2 = __Pyx_PyInt_From_Traj_PDBfile_3a__3a_PDBWRITEMODE(Traj_PDBfile::MODEL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MODEL, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":18
 *     "SINGLE" : SINGLE,
 *     "MODEL" : MODEL,
 *     "MULTI" : MULTIPDB,             # <<<<<<<<<<<<<<
 *     }
 * # CpptrajFile
 */
  __pyx_t_2 = __Pyx_PyInt_From_Traj_PDBfile_3a__3a_PDBWRITEMODE(Traj_PDBfile::MULTI); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MULTI, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PDBWRITEMODEDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":23
 * #from CpptrajFile cimport *
 * AccessDict = {
 *     "READ" : READ,             # <<<<<<<<<<<<<<
 *     "WRITE" : WRITE,
 *     "APPEND" : APPEND,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_CpptrajFile_3a__3a_AccessType(CpptrajFile::READ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_READ, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":24
 * AccessDict = {
 *     "READ" : READ,
 *     "WRITE" : WRITE,             # <<<<<<<<<<<<<<
 *     "APPEND" : APPEND,
 *     "UPDATE" : UPDATE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_CpptrajFile_3a__3a_AccessType(CpptrajFile::WRITE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_WRITE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":25
 *     "READ" : READ,
 *     "WRITE" : WRITE,
 *     "APPEND" : APPEND,             # <<<<<<<<<<<<<<
 *     "UPDATE" : UPDATE,
 *     }
 */
  __pyx_t_2 = __Pyx_PyInt_From_CpptrajFile_3a__3a_AccessType(CpptrajFile::APPEND); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_APPEND, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":26
 *     "WRITE" : WRITE,
 *     "APPEND" : APPEND,
 *     "UPDATE" : UPDATE,             # <<<<<<<<<<<<<<
 *     }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_CpptrajFile_3a__3a_AccessType(CpptrajFile::UPDATE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_UPDATE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AccessDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":30
 * 
 * CompressDict = {
 *     "NO_COMPRESSION" : NO_COMPRESSION,             # <<<<<<<<<<<<<<
 *     "GZIP" : GZIP,
 *     "BZIP2" : BZIP2,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_CpptrajFile_3a__3a_CompressType(CpptrajFile::NO_COMPRESSION); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_NO_COMPRESSION, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":31
 * CompressDict = {
 *     "NO_COMPRESSION" : NO_COMPRESSION,
 *     "GZIP" : GZIP,             # <<<<<<<<<<<<<<
 *     "BZIP2" : BZIP2,
 *     "ZIP" : ZIP,
 */
  __pyx_t_2 = __Pyx_PyInt_From_CpptrajFile_3a__3a_CompressType(CpptrajFile::GZIP); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_GZIP, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":32
 *     "NO_COMPRESSION" : NO_COMPRESSION,
 *     "GZIP" : GZIP,
 *     "BZIP2" : BZIP2,             # <<<<<<<<<<<<<<
 *     "ZIP" : ZIP,
 *     }
 */
  __pyx_t_2 = __Pyx_PyInt_From_CpptrajFile_3a__3a_CompressType(CpptrajFile::BZIP2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_BZIP2, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":33
 *     "GZIP" : GZIP,
 *     "BZIP2" : BZIP2,
 *     "ZIP" : ZIP,             # <<<<<<<<<<<<<<
 *     }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_CpptrajFile_3a__3a_CompressType(CpptrajFile::ZIP); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ZIP, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CompressDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":37
 * 
 * FileDict = {
 *     "UNKNOWN_TYPE" : UNKNOWN_TYPE,             # <<<<<<<<<<<<<<
 *     "STANDARD" : STANDARD,
 *     "GZIPFILE" : GZIPFILE,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_CpptrajFile_3a__3a_FileType(CpptrajFile::UNKNOWN_TYPE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_UNKNOWN_TYPE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":38
 * FileDict = {
 *     "UNKNOWN_TYPE" : UNKNOWN_TYPE,
 *     "STANDARD" : STANDARD,             # <<<<<<<<<<<<<<
 *     "GZIPFILE" : GZIPFILE,
 *     "BZIP2FILE" : BZIP2FILE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_CpptrajFile_3a__3a_FileType(CpptrajFile::STANDARD); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_STANDARD, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":39
 *     "UNKNOWN_TYPE" : UNKNOWN_TYPE,
 *     "STANDARD" : STANDARD,
 *     "GZIPFILE" : GZIPFILE,             # <<<<<<<<<<<<<<
 *     "BZIP2FILE" : BZIP2FILE,
 *     "ZIPFILE" : ZIPFILE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_CpptrajFile_3a__3a_FileType(CpptrajFile::GZIPFILE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_GZIPFILE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":40
 *     "STANDARD" : STANDARD,
 *     "GZIPFILE" : GZIPFILE,
 *     "BZIP2FILE" : BZIP2FILE,             # <<<<<<<<<<<<<<
 *     "ZIPFILE" : ZIPFILE,
 *     "MPIFILE" : MPIFILE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_CpptrajFile_3a__3a_FileType(CpptrajFile::BZIP2FILE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_BZIP2FILE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":41
 *     "GZIPFILE" : GZIPFILE,
 *     "BZIP2FILE" : BZIP2FILE,
 *     "ZIPFILE" : ZIPFILE,             # <<<<<<<<<<<<<<
 *     "MPIFILE" : MPIFILE,
 *     }
 */
  __pyx_t_2 = __Pyx_PyInt_From_CpptrajFile_3a__3a_FileType(CpptrajFile::ZIPFILE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ZIPFILE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":42
 *     "BZIP2FILE" : BZIP2FILE,
 *     "ZIPFILE" : ZIPFILE,
 *     "MPIFILE" : MPIFILE,             # <<<<<<<<<<<<<<
 *     }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_CpptrajFile_3a__3a_FileType(CpptrajFile::MPIFILE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MPIFILE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FileDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":48
 * #from MaskToken cimport *
 * MaskTokenDict = {
 *     "OP_NONE" : OP_NONE,             # <<<<<<<<<<<<<<
 *     "ResNum" : ResNum,
 *     "ResName" : ResName,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_MaskToken_3a__3a_MaskTokenType(MaskToken::OP_NONE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_OP_NONE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":49
 * MaskTokenDict = {
 *     "OP_NONE" : OP_NONE,
 *     "ResNum" : ResNum,             # <<<<<<<<<<<<<<
 *     "ResName" : ResName,
 *     "AtomNum" : AtomNum,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MaskToken_3a__3a_MaskTokenType(MaskToken::ResNum); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ResNum, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":50
 *     "OP_NONE" : OP_NONE,
 *     "ResNum" : ResNum,
 *     "ResName" : ResName,             # <<<<<<<<<<<<<<
 *     "AtomNum" : AtomNum,
 *     "AtomName" : AtomName,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MaskToken_3a__3a_MaskTokenType(MaskToken::ResName); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ResName, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":51
 *     "ResNum" : ResNum,
 *     "ResName" : ResName,
 *     "AtomNum" : AtomNum,             # <<<<<<<<<<<<<<
 *     "AtomName" : AtomName,
 *     "AtomType" : AtomType,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MaskToken_3a__3a_MaskTokenType(MaskToken::AtomNum); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_AtomNum, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":52
 *     "ResName" : ResName,
 *     "AtomNum" : AtomNum,
 *     "AtomName" : AtomName,             # <<<<<<<<<<<<<<
 *     "AtomType" : AtomType,
 *     "AtomElement" : AtomElement,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MaskToken_3a__3a_MaskTokenType(MaskToken::AtomName); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_AtomName, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":53
 *     "AtomNum" : AtomNum,
 *     "AtomName" : AtomName,
 *     "AtomType" : AtomType,             # <<<<<<<<<<<<<<
 *     "AtomElement" : AtomElement,
 *     "SelectAll" : SelectAll,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MaskToken_3a__3a_MaskTokenType(MaskToken::AtomType); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_AtomType, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":54
 *     "AtomName" : AtomName,
 *     "AtomType" : AtomType,
 *     "AtomElement" : AtomElement,             # <<<<<<<<<<<<<<
 *     "SelectAll" : SelectAll,
 *     "OP_AND" : OP_AND,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MaskToken_3a__3a_MaskTokenType(MaskToken::AtomElement); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_AtomElement, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":55
 *     "AtomType" : AtomType,
 *     "AtomElement" : AtomElement,
 *     "SelectAll" : SelectAll,             # <<<<<<<<<<<<<<
 *     "OP_AND" : OP_AND,
 *     "OP_OR" : OP_OR,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MaskToken_3a__3a_MaskTokenType(MaskToken::SelectAll); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SelectAll, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":56
 *     "AtomElement" : AtomElement,
 *     "SelectAll" : SelectAll,
 *     "OP_AND" : OP_AND,             # <<<<<<<<<<<<<<
 *     "OP_OR" : OP_OR,
 *     "OP_NEG" : OP_NEG,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MaskToken_3a__3a_MaskTokenType(MaskToken::OP_AND); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_OP_AND, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":57
 *     "SelectAll" : SelectAll,
 *     "OP_AND" : OP_AND,
 *     "OP_OR" : OP_OR,             # <<<<<<<<<<<<<<
 *     "OP_NEG" : OP_NEG,
 *     "OP_DIST" : OP_DIST,
 */
  __pyx_t_2 = __Pyx_PyInt_From_MaskToken_3a__3a_MaskTokenType(MaskToken::OP_OR); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_OP_OR, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":58
 *     "OP_AND" : OP_AND,
 *     "OP_OR" : OP_OR,
 *     "OP_NEG" : OP_NEG,             # <<<<<<<<<<<<<<
 *     "OP_DIST" : OP_DIST,
 *     }
 */
  __pyx_t_2 = __Pyx_PyInt_From_MaskToken_3a__3a_MaskTokenType(MaskToken::OP_NEG); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_OP_NEG, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":59
 *     "OP_OR" : OP_OR,
 *     "OP_NEG" : OP_NEG,
 *     "OP_DIST" : OP_DIST,             # <<<<<<<<<<<<<<
 *     }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_MaskToken_3a__3a_MaskTokenType(MaskToken::OP_DIST); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_OP_DIST, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MaskTokenDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":65
 * #from Atom cimport *
 * AtomicElementDict = {
 *     "UNKNOWN_ELEMENT" : UNKNOWN_ELEMENT,             # <<<<<<<<<<<<<<
 *     "HYDROGEN" : HYDROGEN,
 *     "BORON" : BORON,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::UNKNOWN_ELEMENT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_UNKNOWN_ELEMENT, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":66
 * AtomicElementDict = {
 *     "UNKNOWN_ELEMENT" : UNKNOWN_ELEMENT,
 *     "HYDROGEN" : HYDROGEN,             # <<<<<<<<<<<<<<
 *     "BORON" : BORON,
 *     "CARBON" : CARBON,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::HYDROGEN); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_HYDROGEN, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":67
 *     "UNKNOWN_ELEMENT" : UNKNOWN_ELEMENT,
 *     "HYDROGEN" : HYDROGEN,
 *     "BORON" : BORON,             # <<<<<<<<<<<<<<
 *     "CARBON" : CARBON,
 *     "NITROGEN" : NITROGEN,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::BORON); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_BORON, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":68
 *     "HYDROGEN" : HYDROGEN,
 *     "BORON" : BORON,
 *     "CARBON" : CARBON,             # <<<<<<<<<<<<<<
 *     "NITROGEN" : NITROGEN,
 *     "OXYGEN" : OXYGEN,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::CARBON); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CARBON, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":69
 *     "BORON" : BORON,
 *     "CARBON" : CARBON,
 *     "NITROGEN" : NITROGEN,             # <<<<<<<<<<<<<<
 *     "OXYGEN" : OXYGEN,
 *     "FLUORINE" : FLUORINE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::NITROGEN); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_NITROGEN, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":70
 *     "CARBON" : CARBON,
 *     "NITROGEN" : NITROGEN,
 *     "OXYGEN" : OXYGEN,             # <<<<<<<<<<<<<<
 *     "FLUORINE" : FLUORINE,
 *     "PHOSPHORUS" : PHOSPHORUS,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::OXYGEN); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_OXYGEN, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":71
 *     "NITROGEN" : NITROGEN,
 *     "OXYGEN" : OXYGEN,
 *     "FLUORINE" : FLUORINE,             # <<<<<<<<<<<<<<
 *     "PHOSPHORUS" : PHOSPHORUS,
 *     "SULFUR" : SULFUR,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::FLUORINE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_FLUORINE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":72
 *     "OXYGEN" : OXYGEN,
 *     "FLUORINE" : FLUORINE,
 *     "PHOSPHORUS" : PHOSPHORUS,             # <<<<<<<<<<<<<<
 *     "SULFUR" : SULFUR,
 *     "CHLORINE" : CHLORINE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::PHOSPHORUS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PHOSPHORUS, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":73
 *     "FLUORINE" : FLUORINE,
 *     "PHOSPHORUS" : PHOSPHORUS,
 *     "SULFUR" : SULFUR,             # <<<<<<<<<<<<<<
 *     "CHLORINE" : CHLORINE,
 *     "BROMINE" : BROMINE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::SULFUR); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SULFUR, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":74
 *     "PHOSPHORUS" : PHOSPHORUS,
 *     "SULFUR" : SULFUR,
 *     "CHLORINE" : CHLORINE,             # <<<<<<<<<<<<<<
 *     "BROMINE" : BROMINE,
 *     "IRON" : IRON,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::CHLORINE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CHLORINE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":75
 *     "SULFUR" : SULFUR,
 *     "CHLORINE" : CHLORINE,
 *     "BROMINE" : BROMINE,             # <<<<<<<<<<<<<<
 *     "IRON" : IRON,
 *     "CALCIUM" : CALCIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::BROMINE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_BROMINE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":76
 *     "CHLORINE" : CHLORINE,
 *     "BROMINE" : BROMINE,
 *     "IRON" : IRON,             # <<<<<<<<<<<<<<
 *     "CALCIUM" : CALCIUM,
 *     "IODINE" : IODINE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::IRON); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_IRON, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":77
 *     "BROMINE" : BROMINE,
 *     "IRON" : IRON,
 *     "CALCIUM" : CALCIUM,             # <<<<<<<<<<<<<<
 *     "IODINE" : IODINE,
 *     "MAGNESIUM" : MAGNESIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::CALCIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CALCIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":78
 *     "IRON" : IRON,
 *     "CALCIUM" : CALCIUM,
 *     "IODINE" : IODINE,             # <<<<<<<<<<<<<<
 *     "MAGNESIUM" : MAGNESIUM,
 *     "COPPER" : COPPER,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::IODINE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_IODINE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":79
 *     "CALCIUM" : CALCIUM,
 *     "IODINE" : IODINE,
 *     "MAGNESIUM" : MAGNESIUM,             # <<<<<<<<<<<<<<
 *     "COPPER" : COPPER,
 *     "LITHIUM" : LITHIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::MAGNESIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MAGNESIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":80
 *     "IODINE" : IODINE,
 *     "MAGNESIUM" : MAGNESIUM,
 *     "COPPER" : COPPER,             # <<<<<<<<<<<<<<
 *     "LITHIUM" : LITHIUM,
 *     "POTASSIUM" : POTASSIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::COPPER); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_COPPER, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":81
 *     "MAGNESIUM" : MAGNESIUM,
 *     "COPPER" : COPPER,
 *     "LITHIUM" : LITHIUM,             # <<<<<<<<<<<<<<
 *     "POTASSIUM" : POTASSIUM,
 *     "RUBIDIUM" : RUBIDIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::LITHIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_LITHIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":82
 *     "COPPER" : COPPER,
 *     "LITHIUM" : LITHIUM,
 *     "POTASSIUM" : POTASSIUM,             # <<<<<<<<<<<<<<
 *     "RUBIDIUM" : RUBIDIUM,
 *     "CESIUM" : CESIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::POTASSIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_POTASSIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":83
 *     "LITHIUM" : LITHIUM,
 *     "POTASSIUM" : POTASSIUM,
 *     "RUBIDIUM" : RUBIDIUM,             # <<<<<<<<<<<<<<
 *     "CESIUM" : CESIUM,
 *     "ZINC" : ZINC,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::RUBIDIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RUBIDIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":84
 *     "POTASSIUM" : POTASSIUM,
 *     "RUBIDIUM" : RUBIDIUM,
 *     "CESIUM" : CESIUM,             # <<<<<<<<<<<<<<
 *     "ZINC" : ZINC,
 *     "SODIUM" : SODIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::CESIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CESIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":85
 *     "RUBIDIUM" : RUBIDIUM,
 *     "CESIUM" : CESIUM,
 *     "ZINC" : ZINC,             # <<<<<<<<<<<<<<
 *     "SODIUM" : SODIUM,
 *     "ALUMINUM" : ALUMINUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::ZINC); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ZINC, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":86
 *     "CESIUM" : CESIUM,
 *     "ZINC" : ZINC,
 *     "SODIUM" : SODIUM,             # <<<<<<<<<<<<<<
 *     "ALUMINUM" : ALUMINUM,
 *     "ARGON" : ARGON,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::SODIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SODIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":87
 *     "ZINC" : ZINC,
 *     "SODIUM" : SODIUM,
 *     "ALUMINUM" : ALUMINUM,             # <<<<<<<<<<<<<<
 *     "ARGON" : ARGON,
 *     "ARSENIC" : ARSENIC,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::ALUMINUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ALUMINUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":88
 *     "SODIUM" : SODIUM,
 *     "ALUMINUM" : ALUMINUM,
 *     "ARGON" : ARGON,             # <<<<<<<<<<<<<<
 *     "ARSENIC" : ARSENIC,
 *     "SILVER" : SILVER,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::ARGON); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ARGON, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":89
 *     "ALUMINUM" : ALUMINUM,
 *     "ARGON" : ARGON,
 *     "ARSENIC" : ARSENIC,             # <<<<<<<<<<<<<<
 *     "SILVER" : SILVER,
 *     "GOLD" : GOLD,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::ARSENIC); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ARSENIC, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":90
 *     "ARGON" : ARGON,
 *     "ARSENIC" : ARSENIC,
 *     "SILVER" : SILVER,             # <<<<<<<<<<<<<<
 *     "GOLD" : GOLD,
 *     "ASTATINE" : ASTATINE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::SILVER); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SILVER, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":91
 *     "ARSENIC" : ARSENIC,
 *     "SILVER" : SILVER,
 *     "GOLD" : GOLD,             # <<<<<<<<<<<<<<
 *     "ASTATINE" : ASTATINE,
 *     "BERYLLIUM" : BERYLLIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::GOLD); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_GOLD, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":92
 *     "SILVER" : SILVER,
 *     "GOLD" : GOLD,
 *     "ASTATINE" : ASTATINE,             # <<<<<<<<<<<<<<
 *     "BERYLLIUM" : BERYLLIUM,
 *     "BARIUM" : BARIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::ASTATINE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ASTATINE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":93
 *     "GOLD" : GOLD,
 *     "ASTATINE" : ASTATINE,
 *     "BERYLLIUM" : BERYLLIUM,             # <<<<<<<<<<<<<<
 *     "BARIUM" : BARIUM,
 *     "BISMUTH" : BISMUTH,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::BERYLLIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_BERYLLIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":94
 *     "ASTATINE" : ASTATINE,
 *     "BERYLLIUM" : BERYLLIUM,
 *     "BARIUM" : BARIUM,             # <<<<<<<<<<<<<<
 *     "BISMUTH" : BISMUTH,
 *     "CHROMIUM" : CHROMIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::BARIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_BARIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":95
 *     "BERYLLIUM" : BERYLLIUM,
 *     "BARIUM" : BARIUM,
 *     "BISMUTH" : BISMUTH,             # <<<<<<<<<<<<<<
 *     "CHROMIUM" : CHROMIUM,
 *     "COBALT" : COBALT,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::BISMUTH); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_BISMUTH, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":96
 *     "BARIUM" : BARIUM,
 *     "BISMUTH" : BISMUTH,
 *     "CHROMIUM" : CHROMIUM,             # <<<<<<<<<<<<<<
 *     "COBALT" : COBALT,
 *     "CADMIUM" : CADMIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::CHROMIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CHROMIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":97
 *     "BISMUTH" : BISMUTH,
 *     "CHROMIUM" : CHROMIUM,
 *     "COBALT" : COBALT,             # <<<<<<<<<<<<<<
 *     "CADMIUM" : CADMIUM,
 *     "FRANCIUM" : FRANCIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::COBALT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_COBALT, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":98
 *     "CHROMIUM" : CHROMIUM,
 *     "COBALT" : COBALT,
 *     "CADMIUM" : CADMIUM,             # <<<<<<<<<<<<<<
 *     "FRANCIUM" : FRANCIUM,
 *     "GALLIUM" : GALLIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::CADMIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CADMIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":99
 *     "COBALT" : COBALT,
 *     "CADMIUM" : CADMIUM,
 *     "FRANCIUM" : FRANCIUM,             # <<<<<<<<<<<<<<
 *     "GALLIUM" : GALLIUM,
 *     "GERMANIUM" : GERMANIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::FRANCIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_FRANCIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":100
 *     "CADMIUM" : CADMIUM,
 *     "FRANCIUM" : FRANCIUM,
 *     "GALLIUM" : GALLIUM,             # <<<<<<<<<<<<<<
 *     "GERMANIUM" : GERMANIUM,
 *     "HELIUM" : HELIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::GALLIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_GALLIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":101
 *     "FRANCIUM" : FRANCIUM,
 *     "GALLIUM" : GALLIUM,
 *     "GERMANIUM" : GERMANIUM,             # <<<<<<<<<<<<<<
 *     "HELIUM" : HELIUM,
 *     "HAFNIUM" : HAFNIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::GERMANIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_GERMANIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":102
 *     "GALLIUM" : GALLIUM,
 *     "GERMANIUM" : GERMANIUM,
 *     "HELIUM" : HELIUM,             # <<<<<<<<<<<<<<
 *     "HAFNIUM" : HAFNIUM,
 *     "MERCURY" : MERCURY,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::HELIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_HELIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":103
 *     "GERMANIUM" : GERMANIUM,
 *     "HELIUM" : HELIUM,
 *     "HAFNIUM" : HAFNIUM,             # <<<<<<<<<<<<<<
 *     "MERCURY" : MERCURY,
 *     "INDIUM" : INDIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::HAFNIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_HAFNIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":104
 *     "HELIUM" : HELIUM,
 *     "HAFNIUM" : HAFNIUM,
 *     "MERCURY" : MERCURY,             # <<<<<<<<<<<<<<
 *     "INDIUM" : INDIUM,
 *     "IRIDIUM" : IRIDIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::MERCURY); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MERCURY, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":105
 *     "HAFNIUM" : HAFNIUM,
 *     "MERCURY" : MERCURY,
 *     "INDIUM" : INDIUM,             # <<<<<<<<<<<<<<
 *     "IRIDIUM" : IRIDIUM,
 *     "KRYPTON" : KRYPTON,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::INDIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_INDIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":106
 *     "MERCURY" : MERCURY,
 *     "INDIUM" : INDIUM,
 *     "IRIDIUM" : IRIDIUM,             # <<<<<<<<<<<<<<
 *     "KRYPTON" : KRYPTON,
 *     "MANGANESE" : MANGANESE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::IRIDIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_IRIDIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":107
 *     "INDIUM" : INDIUM,
 *     "IRIDIUM" : IRIDIUM,
 *     "KRYPTON" : KRYPTON,             # <<<<<<<<<<<<<<
 *     "MANGANESE" : MANGANESE,
 *     "MOLYBDENUM" : MOLYBDENUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::KRYPTON); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_KRYPTON, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":108
 *     "IRIDIUM" : IRIDIUM,
 *     "KRYPTON" : KRYPTON,
 *     "MANGANESE" : MANGANESE,             # <<<<<<<<<<<<<<
 *     "MOLYBDENUM" : MOLYBDENUM,
 *     "NEON" : NEON,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::MANGANESE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MANGANESE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":109
 *     "KRYPTON" : KRYPTON,
 *     "MANGANESE" : MANGANESE,
 *     "MOLYBDENUM" : MOLYBDENUM,             # <<<<<<<<<<<<<<
 *     "NEON" : NEON,
 *     "NICKEL" : NICKEL,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::MOLYBDENUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MOLYBDENUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":110
 *     "MANGANESE" : MANGANESE,
 *     "MOLYBDENUM" : MOLYBDENUM,
 *     "NEON" : NEON,             # <<<<<<<<<<<<<<
 *     "NICKEL" : NICKEL,
 *     "NIOBIUM" : NIOBIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::NEON); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_NEON, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":111
 *     "MOLYBDENUM" : MOLYBDENUM,
 *     "NEON" : NEON,
 *     "NICKEL" : NICKEL,             # <<<<<<<<<<<<<<
 *     "NIOBIUM" : NIOBIUM,
 *     "OSMIUM" : OSMIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::NICKEL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_NICKEL, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":112
 *     "NEON" : NEON,
 *     "NICKEL" : NICKEL,
 *     "NIOBIUM" : NIOBIUM,             # <<<<<<<<<<<<<<
 *     "OSMIUM" : OSMIUM,
 *     "PALLADIUM" : PALLADIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::NIOBIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_NIOBIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":113
 *     "NICKEL" : NICKEL,
 *     "NIOBIUM" : NIOBIUM,
 *     "OSMIUM" : OSMIUM,             # <<<<<<<<<<<<<<
 *     "PALLADIUM" : PALLADIUM,
 *     "PLATINUM" : PLATINUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::OSMIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_OSMIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":114
 *     "NIOBIUM" : NIOBIUM,
 *     "OSMIUM" : OSMIUM,
 *     "PALLADIUM" : PALLADIUM,             # <<<<<<<<<<<<<<
 *     "PLATINUM" : PLATINUM,
 *     "LEAD" : LEAD,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::PALLADIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PALLADIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":115
 *     "OSMIUM" : OSMIUM,
 *     "PALLADIUM" : PALLADIUM,
 *     "PLATINUM" : PLATINUM,             # <<<<<<<<<<<<<<
 *     "LEAD" : LEAD,
 *     "POLONIUM" : POLONIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::PLATINUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PLATINUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":116
 *     "PALLADIUM" : PALLADIUM,
 *     "PLATINUM" : PLATINUM,
 *     "LEAD" : LEAD,             # <<<<<<<<<<<<<<
 *     "POLONIUM" : POLONIUM,
 *     "RUTHENIUM" : RUTHENIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::LEAD); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_LEAD, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":117
 *     "PLATINUM" : PLATINUM,
 *     "LEAD" : LEAD,
 *     "POLONIUM" : POLONIUM,             # <<<<<<<<<<<<<<
 *     "RUTHENIUM" : RUTHENIUM,
 *     "RHODIUM" : RHODIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::POLONIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_POLONIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":118
 *     "LEAD" : LEAD,
 *     "POLONIUM" : POLONIUM,
 *     "RUTHENIUM" : RUTHENIUM,             # <<<<<<<<<<<<<<
 *     "RHODIUM" : RHODIUM,
 *     "RHENIUM" : RHENIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::RUTHENIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RUTHENIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":119
 *     "POLONIUM" : POLONIUM,
 *     "RUTHENIUM" : RUTHENIUM,
 *     "RHODIUM" : RHODIUM,             # <<<<<<<<<<<<<<
 *     "RHENIUM" : RHENIUM,
 *     "RADON" : RADON,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::RHODIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RHODIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":120
 *     "RUTHENIUM" : RUTHENIUM,
 *     "RHODIUM" : RHODIUM,
 *     "RHENIUM" : RHENIUM,             # <<<<<<<<<<<<<<
 *     "RADON" : RADON,
 *     "RADIUM" : RADIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::RHENIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RHENIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":121
 *     "RHODIUM" : RHODIUM,
 *     "RHENIUM" : RHENIUM,
 *     "RADON" : RADON,             # <<<<<<<<<<<<<<
 *     "RADIUM" : RADIUM,
 *     "SILICON" : SILICON,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::RADON); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RADON, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":122
 *     "RHENIUM" : RHENIUM,
 *     "RADON" : RADON,
 *     "RADIUM" : RADIUM,             # <<<<<<<<<<<<<<
 *     "SILICON" : SILICON,
 *     "SCANDIUM" : SCANDIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::RADIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RADIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":123
 *     "RADON" : RADON,
 *     "RADIUM" : RADIUM,
 *     "SILICON" : SILICON,             # <<<<<<<<<<<<<<
 *     "SCANDIUM" : SCANDIUM,
 *     "SELENIUM" : SELENIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::SILICON); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SILICON, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":124
 *     "RADIUM" : RADIUM,
 *     "SILICON" : SILICON,
 *     "SCANDIUM" : SCANDIUM,             # <<<<<<<<<<<<<<
 *     "SELENIUM" : SELENIUM,
 *     "STRONTIUM" : STRONTIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::SCANDIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SCANDIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":125
 *     "SILICON" : SILICON,
 *     "SCANDIUM" : SCANDIUM,
 *     "SELENIUM" : SELENIUM,             # <<<<<<<<<<<<<<
 *     "STRONTIUM" : STRONTIUM,
 *     "TIN" : TIN,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::SELENIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SELENIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":126
 *     "SCANDIUM" : SCANDIUM,
 *     "SELENIUM" : SELENIUM,
 *     "STRONTIUM" : STRONTIUM,             # <<<<<<<<<<<<<<
 *     "TIN" : TIN,
 *     "ANTIMONY" : ANTIMONY,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::STRONTIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_STRONTIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":127
 *     "SELENIUM" : SELENIUM,
 *     "STRONTIUM" : STRONTIUM,
 *     "TIN" : TIN,             # <<<<<<<<<<<<<<
 *     "ANTIMONY" : ANTIMONY,
 *     "TITANIUM" : TITANIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::TIN); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TIN, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":128
 *     "STRONTIUM" : STRONTIUM,
 *     "TIN" : TIN,
 *     "ANTIMONY" : ANTIMONY,             # <<<<<<<<<<<<<<
 *     "TITANIUM" : TITANIUM,
 *     "TECHNETIUM" : TECHNETIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::ANTIMONY); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ANTIMONY, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":129
 *     "TIN" : TIN,
 *     "ANTIMONY" : ANTIMONY,
 *     "TITANIUM" : TITANIUM,             # <<<<<<<<<<<<<<
 *     "TECHNETIUM" : TECHNETIUM,
 *     "TELLURIUM" : TELLURIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::TITANIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TITANIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":130
 *     "ANTIMONY" : ANTIMONY,
 *     "TITANIUM" : TITANIUM,
 *     "TECHNETIUM" : TECHNETIUM,             # <<<<<<<<<<<<<<
 *     "TELLURIUM" : TELLURIUM,
 *     "TANTALUM" : TANTALUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::TECHNETIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TECHNETIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":131
 *     "TITANIUM" : TITANIUM,
 *     "TECHNETIUM" : TECHNETIUM,
 *     "TELLURIUM" : TELLURIUM,             # <<<<<<<<<<<<<<
 *     "TANTALUM" : TANTALUM,
 *     "THALLIUM" : THALLIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::TELLURIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TELLURIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":132
 *     "TECHNETIUM" : TECHNETIUM,
 *     "TELLURIUM" : TELLURIUM,
 *     "TANTALUM" : TANTALUM,             # <<<<<<<<<<<<<<
 *     "THALLIUM" : THALLIUM,
 *     "VANADIUM" : VANADIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::TANTALUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TANTALUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":133
 *     "TELLURIUM" : TELLURIUM,
 *     "TANTALUM" : TANTALUM,
 *     "THALLIUM" : THALLIUM,             # <<<<<<<<<<<<<<
 *     "VANADIUM" : VANADIUM,
 *     "TUNGSTEN" : TUNGSTEN,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::THALLIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_THALLIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":134
 *     "TANTALUM" : TANTALUM,
 *     "THALLIUM" : THALLIUM,
 *     "VANADIUM" : VANADIUM,             # <<<<<<<<<<<<<<
 *     "TUNGSTEN" : TUNGSTEN,
 *     "XENON" : XENON,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::VANADIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_VANADIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":135
 *     "THALLIUM" : THALLIUM,
 *     "VANADIUM" : VANADIUM,
 *     "TUNGSTEN" : TUNGSTEN,             # <<<<<<<<<<<<<<
 *     "XENON" : XENON,
 *     "ZIRCONIUM" : ZIRCONIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::TUNGSTEN); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TUNGSTEN, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":136
 *     "VANADIUM" : VANADIUM,
 *     "TUNGSTEN" : TUNGSTEN,
 *     "XENON" : XENON,             # <<<<<<<<<<<<<<
 *     "ZIRCONIUM" : ZIRCONIUM,
 *     "YTTRIUM" : YTTRIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::XENON); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_XENON, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":137
 *     "TUNGSTEN" : TUNGSTEN,
 *     "XENON" : XENON,
 *     "ZIRCONIUM" : ZIRCONIUM,             # <<<<<<<<<<<<<<
 *     "YTTRIUM" : YTTRIUM,
 *     "LUTETIUM" : LUTETIUM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::ZIRCONIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ZIRCONIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":138
 *     "XENON" : XENON,
 *     "ZIRCONIUM" : ZIRCONIUM,
 *     "YTTRIUM" : YTTRIUM,             # <<<<<<<<<<<<<<
 *     "LUTETIUM" : LUTETIUM,
 *     "EXTRAPT" : EXTRAPT,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::YTTRIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_YTTRIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":139
 *     "ZIRCONIUM" : ZIRCONIUM,
 *     "YTTRIUM" : YTTRIUM,
 *     "LUTETIUM" : LUTETIUM,             # <<<<<<<<<<<<<<
 *     "EXTRAPT" : EXTRAPT,
 *     }
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::LUTETIUM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_LUTETIUM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":140
 *     "YTTRIUM" : YTTRIUM,
 *     "LUTETIUM" : LUTETIUM,
 *     "EXTRAPT" : EXTRAPT,             # <<<<<<<<<<<<<<
 *     }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::EXTRAPT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_EXTRAPT, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AtomicElementDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":146
 * #from Traj_Mol2File cimport *
 * MOL2WRITEMODEDict = {
 *     "NONE" : NONEMOL2WRITEMODE,             # <<<<<<<<<<<<<<
 *     "SINGLE" : SINGLEMol2File,
 *     "MOL" : MOL,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_Traj_Mol2File_3a__3a_MOL2WRITEMODE(Traj_Mol2File::NONE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_NONE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":147
 * MOL2WRITEMODEDict = {
 *     "NONE" : NONEMOL2WRITEMODE,
 *     "SINGLE" : SINGLEMol2File,             # <<<<<<<<<<<<<<
 *     "MOL" : MOL,
 *     "MULTI" : MULTIMOL2,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Traj_Mol2File_3a__3a_MOL2WRITEMODE(Traj_Mol2File::SINGLE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SINGLE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":148
 *     "NONE" : NONEMOL2WRITEMODE,
 *     "SINGLE" : SINGLEMol2File,
 *     "MOL" : MOL,             # <<<<<<<<<<<<<<
 *     "MULTI" : MULTIMOL2,
 *     }
 */
  __pyx_t_2 = __Pyx_PyInt_From_Traj_Mol2File_3a__3a_MOL2WRITEMODE(Traj_Mol2File::MOL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MOL, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":149
 *     "SINGLE" : SINGLEMol2File,
 *     "MOL" : MOL,
 *     "MULTI" : MULTIMOL2,             # <<<<<<<<<<<<<<
 *     }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_Traj_Mol2File_3a__3a_MOL2WRITEMODE(Traj_Mol2File::MULTI); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MULTI, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MOL2WRITEMODEDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":155
 * #from DataFile cimport *
 * DataFormatDict = {
 *     "DATAFILE" : DATAFILE,             # <<<<<<<<<<<<<<
 *     "XMGRACE" : XMGRACE,
 *     "GNUPLOT" : GNUPLOT,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_DataFile_3a__3a_DataFormatType(DataFile::DATAFILE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_DATAFILE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":156
 * DataFormatDict = {
 *     "DATAFILE" : DATAFILE,
 *     "XMGRACE" : XMGRACE,             # <<<<<<<<<<<<<<
 *     "GNUPLOT" : GNUPLOT,
 *     "XPLOR" : XPLOR,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataFile_3a__3a_DataFormatType(DataFile::XMGRACE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_XMGRACE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":157
 *     "DATAFILE" : DATAFILE,
 *     "XMGRACE" : XMGRACE,
 *     "GNUPLOT" : GNUPLOT,             # <<<<<<<<<<<<<<
 *     "XPLOR" : XPLOR,
 *     "OPENDX" : OPENDX,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataFile_3a__3a_DataFormatType(DataFile::GNUPLOT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_GNUPLOT, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":158
 *     "XMGRACE" : XMGRACE,
 *     "GNUPLOT" : GNUPLOT,
 *     "XPLOR" : XPLOR,             # <<<<<<<<<<<<<<
 *     "OPENDX" : OPENDX,
 *     "REMLOG" : REMLOGDATAFILE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataFile_3a__3a_DataFormatType(DataFile::XPLOR); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_XPLOR, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":159
 *     "GNUPLOT" : GNUPLOT,
 *     "XPLOR" : XPLOR,
 *     "OPENDX" : OPENDX,             # <<<<<<<<<<<<<<
 *     "REMLOG" : REMLOGDATAFILE,
 *     "MDOUT" : MDOUT,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataFile_3a__3a_DataFormatType(DataFile::OPENDX); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_OPENDX, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":160
 *     "XPLOR" : XPLOR,
 *     "OPENDX" : OPENDX,
 *     "REMLOG" : REMLOGDATAFILE,             # <<<<<<<<<<<<<<
 *     "MDOUT" : MDOUT,
 *     "EVECS" : EVECS,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataFile_3a__3a_DataFormatType(DataFile::REMLOG); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_REMLOG, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":161
 *     "OPENDX" : OPENDX,
 *     "REMLOG" : REMLOGDATAFILE,
 *     "MDOUT" : MDOUT,             # <<<<<<<<<<<<<<
 *     "EVECS" : EVECS,
 *     "UNKNOWN_DATA" : UNKNOWN_DATAFORMAT,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataFile_3a__3a_DataFormatType(DataFile::MDOUT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MDOUT, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":162
 *     "REMLOG" : REMLOGDATAFILE,
 *     "MDOUT" : MDOUT,
 *     "EVECS" : EVECS,             # <<<<<<<<<<<<<<
 *     "UNKNOWN_DATA" : UNKNOWN_DATAFORMAT,
 *     }
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataFile_3a__3a_DataFormatType(DataFile::EVECS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_EVECS, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":163
 *     "MDOUT" : MDOUT,
 *     "EVECS" : EVECS,
 *     "UNKNOWN_DATA" : UNKNOWN_DATAFORMAT,             # <<<<<<<<<<<<<<
 *     }
 * # Analysis_Hist
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataFile_3a__3a_DataFormatType(DataFile::UNKNOWN_DATA); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_UNKNOWN_DATA, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DataFormatDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":176
 * #from Cluster_HierAgglo cimport *
 * LINKAGETYPEDict = {
 *     "SINGLELINK" : SINGLELINK,             # <<<<<<<<<<<<<<
 *     "AVERAGELINK" : AVERAGELINK,
 *     "COMPLETELINK" : COMPLETELINK,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_Cluster_HierAgglo_3a__3a_LINKAGETYPE(Cluster_HierAgglo::SINGLELINK); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SINGLELINK, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":177
 * LINKAGETYPEDict = {
 *     "SINGLELINK" : SINGLELINK,
 *     "AVERAGELINK" : AVERAGELINK,             # <<<<<<<<<<<<<<
 *     "COMPLETELINK" : COMPLETELINK,
 *     }
 */
  __pyx_t_2 = __Pyx_PyInt_From_Cluster_HierAgglo_3a__3a_LINKAGETYPE(Cluster_HierAgglo::AVERAGELINK); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_AVERAGELINK, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":178
 *     "SINGLELINK" : SINGLELINK,
 *     "AVERAGELINK" : AVERAGELINK,
 *     "COMPLETELINK" : COMPLETELINK,             # <<<<<<<<<<<<<<
 *     }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_Cluster_HierAgglo_3a__3a_LINKAGETYPE(Cluster_HierAgglo::COMPLETELINK); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_COMPLETELINK, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LINKAGETYPEDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":184
 * #from Mol2File cimport *
 * TRIPOSTAGDict = {
 *     "MOLECULE" : MOLECULE,             # <<<<<<<<<<<<<<
 *     "ATOM" : ATOMMOL2,
 *     "BOND" : BOND,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_Mol2File_3a__3a_TRIPOSTAG(Mol2File::MOLECULE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MOLECULE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":185
 * TRIPOSTAGDict = {
 *     "MOLECULE" : MOLECULE,
 *     "ATOM" : ATOMMOL2,             # <<<<<<<<<<<<<<
 *     "BOND" : BOND,
 *     "SUBSTRUCT" : SUBSTRUCT,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Mol2File_3a__3a_TRIPOSTAG(Mol2File::ATOM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ATOM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":186
 *     "MOLECULE" : MOLECULE,
 *     "ATOM" : ATOMMOL2,
 *     "BOND" : BOND,             # <<<<<<<<<<<<<<
 *     "SUBSTRUCT" : SUBSTRUCT,
 *     }
 */
  __pyx_t_2 = __Pyx_PyInt_From_Mol2File_3a__3a_TRIPOSTAG(Mol2File::BOND); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_BOND, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":187
 *     "ATOM" : ATOMMOL2,
 *     "BOND" : BOND,
 *     "SUBSTRUCT" : SUBSTRUCT,             # <<<<<<<<<<<<<<
 *     }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_Mol2File_3a__3a_TRIPOSTAG(Mol2File::SUBSTRUCT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SUBSTRUCT, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TRIPOSTAGDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":193
 * #from ReplicaDimArray cimport *
 * RemDimDict = {
 *     "UNKNOWN" : UNKNOWNREPDIM,             # <<<<<<<<<<<<<<
 *     "TEMPERATURE" : TEMPERATURE,
 *     "PARTIAL" : PARTIAL,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_ReplicaDimArray_3a__3a_RemDimType(ReplicaDimArray::UNKNOWN); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_UNKNOWN, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":194
 * RemDimDict = {
 *     "UNKNOWN" : UNKNOWNREPDIM,
 *     "TEMPERATURE" : TEMPERATURE,             # <<<<<<<<<<<<<<
 *     "PARTIAL" : PARTIAL,
 *     "HAMILTONIAN" : HAMILTONIAN,
 */
  __pyx_t_2 = __Pyx_PyInt_From_ReplicaDimArray_3a__3a_RemDimType(ReplicaDimArray::TEMPERATURE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TEMPERATURE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":195
 *     "UNKNOWN" : UNKNOWNREPDIM,
 *     "TEMPERATURE" : TEMPERATURE,
 *     "PARTIAL" : PARTIAL,             # <<<<<<<<<<<<<<
 *     "HAMILTONIAN" : HAMILTONIAN,
 *     "PH" : PH,
 */
  __pyx_t_2 = __Pyx_PyInt_From_ReplicaDimArray_3a__3a_RemDimType(ReplicaDimArray::PARTIAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PARTIAL, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":196
 *     "TEMPERATURE" : TEMPERATURE,
 *     "PARTIAL" : PARTIAL,
 *     "HAMILTONIAN" : HAMILTONIAN,             # <<<<<<<<<<<<<<
 *     "PH" : PH,
 *     }
 */
  __pyx_t_2 = __Pyx_PyInt_From_ReplicaDimArray_3a__3a_RemDimType(ReplicaDimArray::HAMILTONIAN); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_HAMILTONIAN, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":197
 *     "PARTIAL" : PARTIAL,
 *     "HAMILTONIAN" : HAMILTONIAN,
 *     "PH" : PH,             # <<<<<<<<<<<<<<
 *     }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ReplicaDimArray_3a__3a_RemDimType(ReplicaDimArray::PH); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PH, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RemDimDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":203
 * #from Box cimport *
 * BoxTypeDict = {
 *     "NOBOX" : NOBOX,             # <<<<<<<<<<<<<<
 *     "ORTHO" : ORTHO,
 *     "TRUNCOCT" : TRUNCOCT,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_Box_3a__3a_BoxType(Box::NOBOX); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_NOBOX, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":204
 * BoxTypeDict = {
 *     "NOBOX" : NOBOX,
 *     "ORTHO" : ORTHO,             # <<<<<<<<<<<<<<
 *     "TRUNCOCT" : TRUNCOCT,
 *     "RHOMBIC" : RHOMBIC,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Box_3a__3a_BoxType(Box::ORTHO); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ORTHO, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":205
 *     "NOBOX" : NOBOX,
 *     "ORTHO" : ORTHO,
 *     "TRUNCOCT" : TRUNCOCT,             # <<<<<<<<<<<<<<
 *     "RHOMBIC" : RHOMBIC,
 *     "NONORTHO" : NONORTHO,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Box_3a__3a_BoxType(Box::TRUNCOCT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TRUNCOCT, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":206
 *     "ORTHO" : ORTHO,
 *     "TRUNCOCT" : TRUNCOCT,
 *     "RHOMBIC" : RHOMBIC,             # <<<<<<<<<<<<<<
 *     "NONORTHO" : NONORTHO,
 *     }
 */
  __pyx_t_2 = __Pyx_PyInt_From_Box_3a__3a_BoxType(Box::RHOMBIC); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RHOMBIC, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":207
 *     "TRUNCOCT" : TRUNCOCT,
 *     "RHOMBIC" : RHOMBIC,
 *     "NONORTHO" : NONORTHO,             # <<<<<<<<<<<<<<
 *     }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_Box_3a__3a_BoxType(Box::NONORTHO); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_NONORTHO, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BoxTypeDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":213
 * #from TrajectoryFile cimport *
 * TrajFormatDict = {
 *     "AMBERNETCDF" : AMBERNETCDF,             # <<<<<<<<<<<<<<
 *     "AMBERRESTARTNC" : AMBERRESTARTNC,
 *     "PDBFILE" : PDBFILE,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::AMBERNETCDF); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_AMBERNETCDF, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":214
 * TrajFormatDict = {
 *     "AMBERNETCDF" : AMBERNETCDF,
 *     "AMBERRESTARTNC" : AMBERRESTARTNC,             # <<<<<<<<<<<<<<
 *     "PDBFILE" : PDBFILE,
 *     "MOL2FILE" : MOL2FILE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::AMBERRESTARTNC); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_AMBERRESTARTNC, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":215
 *     "AMBERNETCDF" : AMBERNETCDF,
 *     "AMBERRESTARTNC" : AMBERRESTARTNC,
 *     "PDBFILE" : PDBFILE,             # <<<<<<<<<<<<<<
 *     "MOL2FILE" : MOL2FILE,
 *     "CIF" : CIF,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::PDBFILE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PDBFILE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":216
 *     "AMBERRESTARTNC" : AMBERRESTARTNC,
 *     "PDBFILE" : PDBFILE,
 *     "MOL2FILE" : MOL2FILE,             # <<<<<<<<<<<<<<
 *     "CIF" : CIF,
 *     "CHARMMDCD" : CHARMMDCD,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::MOL2FILE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MOL2FILE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":217
 *     "PDBFILE" : PDBFILE,
 *     "MOL2FILE" : MOL2FILE,
 *     "CIF" : CIF,             # <<<<<<<<<<<<<<
 *     "CHARMMDCD" : CHARMMDCD,
 *     "GMXTRX" : GMXTRX,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::CIF); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CIF, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":218
 *     "MOL2FILE" : MOL2FILE,
 *     "CIF" : CIF,
 *     "CHARMMDCD" : CHARMMDCD,             # <<<<<<<<<<<<<<
 *     "GMXTRX" : GMXTRX,
 *     "BINPOS" : BINPOS,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::CHARMMDCD); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CHARMMDCD, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":219
 *     "CIF" : CIF,
 *     "CHARMMDCD" : CHARMMDCD,
 *     "GMXTRX" : GMXTRX,             # <<<<<<<<<<<<<<
 *     "BINPOS" : BINPOS,
 *     "AMBERRESTART" : AMBERRESTART,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::GMXTRX); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_GMXTRX, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":220
 *     "CHARMMDCD" : CHARMMDCD,
 *     "GMXTRX" : GMXTRX,
 *     "BINPOS" : BINPOS,             # <<<<<<<<<<<<<<
 *     "AMBERRESTART" : AMBERRESTART,
 *     "AMBERTRAJ" : AMBERTRAJ,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::BINPOS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_BINPOS, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":221
 *     "GMXTRX" : GMXTRX,
 *     "BINPOS" : BINPOS,
 *     "AMBERRESTART" : AMBERRESTART,             # <<<<<<<<<<<<<<
 *     "AMBERTRAJ" : AMBERTRAJ,
 *     "SQM" : SQM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::AMBERRESTART); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_AMBERRESTART, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":222
 *     "BINPOS" : BINPOS,
 *     "AMBERRESTART" : AMBERRESTART,
 *     "AMBERTRAJ" : AMBERTRAJ,             # <<<<<<<<<<<<<<
 *     "SQM" : SQM,
 *     "SDF" : SDF,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::AMBERTRAJ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_AMBERTRAJ, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":223
 *     "AMBERRESTART" : AMBERRESTART,
 *     "AMBERTRAJ" : AMBERTRAJ,
 *     "SQM" : SQM,             # <<<<<<<<<<<<<<
 *     "SDF" : SDF,
 *     "CONFLIB" : CONFLIB,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::SQM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SQM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":224
 *     "AMBERTRAJ" : AMBERTRAJ,
 *     "SQM" : SQM,
 *     "SDF" : SDF,             # <<<<<<<<<<<<<<
 *     "CONFLIB" : CONFLIB,
 *     "UNKNOWN_TRAJ" : UNKNOWN_TRAJ,
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::SDF); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SDF, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":225
 *     "SQM" : SQM,
 *     "SDF" : SDF,
 *     "CONFLIB" : CONFLIB,             # <<<<<<<<<<<<<<
 *     "UNKNOWN_TRAJ" : UNKNOWN_TRAJ,
 *     }
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::CONFLIB); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CONFLIB, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":226
 *     "SDF" : SDF,
 *     "CONFLIB" : CONFLIB,
 *     "UNKNOWN_TRAJ" : UNKNOWN_TRAJ,             # <<<<<<<<<<<<<<
 *     }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::UNKNOWN_TRAJ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_UNKNOWN_TRAJ, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TrajFormatDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":249
 * #                       COORDS, VECTOR, MODES, GRID_FLT, REMLOG, XYMESH, TRAJ)
 * DataTypeDict = {
 *         "UNKNOWN_DATA " : UNKNOWN_DATASET,             # <<<<<<<<<<<<<<
 *         "DOUBLE" : DOUBLE,
 *         "FLOAT" : FLOAT,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::UNKNOWN_DATA); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_kp_s_UNKNOWN_DATA_2, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":250
 * DataTypeDict = {
 *         "UNKNOWN_DATA " : UNKNOWN_DATASET,
 *         "DOUBLE" : DOUBLE,             # <<<<<<<<<<<<<<
 *         "FLOAT" : FLOAT,
 *         "INTEGER" : INTEGER,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::DOUBLE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 250; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_DOUBLE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":251
 *         "UNKNOWN_DATA " : UNKNOWN_DATASET,
 *         "DOUBLE" : DOUBLE,
 *         "FLOAT" : FLOAT,             # <<<<<<<<<<<<<<
 *         "INTEGER" : INTEGER,
 *         "STRING" : STRING,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::FLOAT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_FLOAT, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":252
 *         "DOUBLE" : DOUBLE,
 *         "FLOAT" : FLOAT,
 *         "INTEGER" : INTEGER,             # <<<<<<<<<<<<<<
 *         "STRING" : STRING,
 *         "MATRIX_DBL" : MATRIX_DBL,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::INTEGER); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_INTEGER, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":253
 *         "FLOAT" : FLOAT,
 *         "INTEGER" : INTEGER,
 *         "STRING" : STRING,             # <<<<<<<<<<<<<<
 *         "MATRIX_DBL" : MATRIX_DBL,
 *         "MATRIX_FLT" : MATRIX_FLT,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::STRING); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_STRING, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":254
 *         "INTEGER" : INTEGER,
 *         "STRING" : STRING,
 *         "MATRIX_DBL" : MATRIX_DBL,             # <<<<<<<<<<<<<<
 *         "MATRIX_FLT" : MATRIX_FLT,
 *         "COORDS" : COORDS,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::MATRIX_DBL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MATRIX_DBL, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":255
 *         "STRING" : STRING,
 *         "MATRIX_DBL" : MATRIX_DBL,
 *         "MATRIX_FLT" : MATRIX_FLT,             # <<<<<<<<<<<<<<
 *         "COORDS" : COORDS,
 *         "REF_FRAME" : REF_FRAME,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::MATRIX_FLT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MATRIX_FLT, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":256
 *         "MATRIX_DBL" : MATRIX_DBL,
 *         "MATRIX_FLT" : MATRIX_FLT,
 *         "COORDS" : COORDS,             # <<<<<<<<<<<<<<
 *         "REF_FRAME" : REF_FRAME,
 *         "VECTOR" : VECTOR,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::COORDS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_COORDS, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":257
 *         "MATRIX_FLT" : MATRIX_FLT,
 *         "COORDS" : COORDS,
 *         "REF_FRAME" : REF_FRAME,             # <<<<<<<<<<<<<<
 *         "VECTOR" : VECTOR,
 *         "MODES" : MODES,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::REF_FRAME); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_REF_FRAME, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":258
 *         "COORDS" : COORDS,
 *         "REF_FRAME" : REF_FRAME,
 *         "VECTOR" : VECTOR,             # <<<<<<<<<<<<<<
 *         "MODES" : MODES,
 *         "GRID_FLT" : GRID_FLT,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::VECTOR); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_VECTOR, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":259
 *         "REF_FRAME" : REF_FRAME,
 *         "VECTOR" : VECTOR,
 *         "MODES" : MODES,             # <<<<<<<<<<<<<<
 *         "GRID_FLT" : GRID_FLT,
 *         "REMLOG" : REMLOGDATATYPE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::MODES); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MODES, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":260
 *         "VECTOR" : VECTOR,
 *         "MODES" : MODES,
 *         "GRID_FLT" : GRID_FLT,             # <<<<<<<<<<<<<<
 *         "REMLOG" : REMLOGDATATYPE,
 *         "XYMESH" : XYMESH,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::GRID_FLT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_GRID_FLT, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":261
 *         "MODES" : MODES,
 *         "GRID_FLT" : GRID_FLT,
 *         "REMLOG" : REMLOGDATATYPE,             # <<<<<<<<<<<<<<
 *         "XYMESH" : XYMESH,
 *         "TRAJ" : TRAJ,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::REMLOG); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_REMLOG, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":262
 *         "GRID_FLT" : GRID_FLT,
 *         "REMLOG" : REMLOGDATATYPE,
 *         "XYMESH" : XYMESH,             # <<<<<<<<<<<<<<
 *         "TRAJ" : TRAJ,
 *         "MAT3x3" : MAT3X3,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::XYMESH); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_XYMESH, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":263
 *         "REMLOG" : REMLOGDATATYPE,
 *         "XYMESH" : XYMESH,
 *         "TRAJ" : TRAJ,             # <<<<<<<<<<<<<<
 *         "MAT3x3" : MAT3X3,
 *     }
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::TRAJ); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TRAJ, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":264
 *         "XYMESH" : XYMESH,
 *         "TRAJ" : TRAJ,
 *         "MAT3x3" : MAT3X3,             # <<<<<<<<<<<<<<
 *     }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::MAT3X3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MAT3x3, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DataTypeDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":270
 *     # DataSet.h
 * scalarModeDict = {
 *         "M_DISTANCE" : M_DISTANCE,             # <<<<<<<<<<<<<<
 *         "M_ANGLE" : M_ANGLE,
 *         "M_TORSION" : M_TORSION,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarMode(DataSet::M_DISTANCE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_M_DISTANCE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":271
 * scalarModeDict = {
 *         "M_DISTANCE" : M_DISTANCE,
 *         "M_ANGLE" : M_ANGLE,             # <<<<<<<<<<<<<<
 *         "M_TORSION" : M_TORSION,
 *         "M_PUCKER" : M_PUCKER,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarMode(DataSet::M_ANGLE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_M_ANGLE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":272
 *         "M_DISTANCE" : M_DISTANCE,
 *         "M_ANGLE" : M_ANGLE,
 *         "M_TORSION" : M_TORSION,             # <<<<<<<<<<<<<<
 *         "M_PUCKER" : M_PUCKER,
 *         "M_RMS" : M_RMS,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarMode(DataSet::M_TORSION); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_M_TORSION, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":273
 *         "M_ANGLE" : M_ANGLE,
 *         "M_TORSION" : M_TORSION,
 *         "M_PUCKER" : M_PUCKER,             # <<<<<<<<<<<<<<
 *         "M_RMS" : M_RMS,
 *         "UNKNOWN_MODE" : UNKNOWN_MODE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarMode(DataSet::M_PUCKER); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_M_PUCKER, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":274
 *         "M_TORSION" : M_TORSION,
 *         "M_PUCKER" : M_PUCKER,
 *         "M_RMS" : M_RMS,             # <<<<<<<<<<<<<<
 *         "UNKNOWN_MODE" : UNKNOWN_MODE,
 * }
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarMode(DataSet::M_RMS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_M_RMS, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":275
 *         "M_PUCKER" : M_PUCKER,
 *         "M_RMS" : M_RMS,
 *         "UNKNOWN_MODE" : UNKNOWN_MODE,             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarMode(DataSet::UNKNOWN_MODE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_UNKNOWN_MODE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_scalarModeDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":280
 *     # DataSet.h
 * scalarDict = {
 *         "ALPHA" : ALPHA,             # <<<<<<<<<<<<<<
 *         "BETA" : BETA,
 *         "GAMMA" : GAMMA,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::ALPHA); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ALPHA, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":281
 * scalarDict = {
 *         "ALPHA" : ALPHA,
 *         "BETA" : BETA,             # <<<<<<<<<<<<<<
 *         "GAMMA" : GAMMA,
 *         "DELTA" : DELTA,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::BETA); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_BETA, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":282
 *         "ALPHA" : ALPHA,
 *         "BETA" : BETA,
 *         "GAMMA" : GAMMA,             # <<<<<<<<<<<<<<
 *         "DELTA" : DELTA,
 *         "EPSILON" : EPSILON,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::GAMMA); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_GAMMA, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":283
 *         "BETA" : BETA,
 *         "GAMMA" : GAMMA,
 *         "DELTA" : DELTA,             # <<<<<<<<<<<<<<
 *         "EPSILON" : EPSILON,
 *         "ZETA" : ZETA,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::DELTA); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_DELTA, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":284
 *         "GAMMA" : GAMMA,
 *         "DELTA" : DELTA,
 *         "EPSILON" : EPSILON,             # <<<<<<<<<<<<<<
 *         "ZETA" : ZETA,
 *         "PUCKER" : PUCKER,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::EPSILON); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_EPSILON, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":285
 *         "DELTA" : DELTA,
 *         "EPSILON" : EPSILON,
 *         "ZETA" : ZETA,             # <<<<<<<<<<<<<<
 *         "PUCKER" : PUCKER,
 *         "CHI" : CHI,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::ZETA); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ZETA, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":286
 *         "EPSILON" : EPSILON,
 *         "ZETA" : ZETA,
 *         "PUCKER" : PUCKER,             # <<<<<<<<<<<<<<
 *         "CHI" : CHI,
 *         "H1P" : H1P,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::PUCKER); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PUCKER, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":287
 *         "ZETA" : ZETA,
 *         "PUCKER" : PUCKER,
 *         "CHI" : CHI,             # <<<<<<<<<<<<<<
 *         "H1P" : H1P,
 *         "C2P" : C2P,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::CHI); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CHI, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":288
 *         "PUCKER" : PUCKER,
 *         "CHI" : CHI,
 *         "H1P" : H1P,             # <<<<<<<<<<<<<<
 *         "C2P" : C2P,
 *         "PHI" : PHI,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::H1P); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_H1P, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":289
 *         "CHI" : CHI,
 *         "H1P" : H1P,
 *         "C2P" : C2P,             # <<<<<<<<<<<<<<
 *         "PHI" : PHI,
 *         "PSI" : PSI,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::C2P); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_C2P, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":290
 *         "H1P" : H1P,
 *         "C2P" : C2P,
 *         "PHI" : PHI,             # <<<<<<<<<<<<<<
 *         "PSI" : PSI,
 *         "PCHI" : PCHI,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::PHI); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PHI, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":291
 *         "C2P" : C2P,
 *         "PHI" : PHI,
 *         "PSI" : PSI,             # <<<<<<<<<<<<<<
 *         "PCHI" : PCHI,
 *         "OMEGA" : OMEGA,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::PSI); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PSI, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":292
 *         "PHI" : PHI,
 *         "PSI" : PSI,
 *         "PCHI" : PCHI,             # <<<<<<<<<<<<<<
 *         "OMEGA" : OMEGA,
 *         "NOE" : NOE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::PCHI); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PCHI, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":293
 *         "PSI" : PSI,
 *         "PCHI" : PCHI,
 *         "OMEGA" : OMEGA,             # <<<<<<<<<<<<<<
 *         "NOE" : NOE,
 *         "DIST" : DIST,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::OMEGA); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_OMEGA, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":294
 *         "PCHI" : PCHI,
 *         "OMEGA" : OMEGA,
 *         "NOE" : NOE,             # <<<<<<<<<<<<<<
 *         "DIST" : DIST,
 *         "COVAR" : COVAR,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::NOE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_NOE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":295
 *         "OMEGA" : OMEGA,
 *         "NOE" : NOE,
 *         "DIST" : DIST,             # <<<<<<<<<<<<<<
 *         "COVAR" : COVAR,
 *         "MWCOVAR" : MWCOVAR,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::DIST); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_DIST, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":296
 *         "NOE" : NOE,
 *         "DIST" : DIST,
 *         "COVAR" : COVAR,             # <<<<<<<<<<<<<<
 *         "MWCOVAR" : MWCOVAR,
 *         "CORREL" : CORREL,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::COVAR); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_COVAR, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":297
 *         "DIST" : DIST,
 *         "COVAR" : COVAR,
 *         "MWCOVAR" : MWCOVAR,             # <<<<<<<<<<<<<<
 *         "CORREL" : CORREL,
 *         "DISTCOVAR" : DISTCOVAR,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::MWCOVAR); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MWCOVAR, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":298
 *         "COVAR" : COVAR,
 *         "MWCOVAR" : MWCOVAR,
 *         "CORREL" : CORREL,             # <<<<<<<<<<<<<<
 *         "DISTCOVAR" : DISTCOVAR,
 *         "IDEA" : IDEA,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::CORREL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CORREL, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":299
 *         "MWCOVAR" : MWCOVAR,
 *         "CORREL" : CORREL,
 *         "DISTCOVAR" : DISTCOVAR,             # <<<<<<<<<<<<<<
 *         "IDEA" : IDEA,
 *         "IRED" : IRED,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::DISTCOVAR); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_DISTCOVAR, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":300
 *         "CORREL" : CORREL,
 *         "DISTCOVAR" : DISTCOVAR,
 *         "IDEA" : IDEA,             # <<<<<<<<<<<<<<
 *         "IRED" : IRED,
 *         "DIHCOVAR" : DIHCOVAR,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::IDEA); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_IDEA, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":301
 *         "DISTCOVAR" : DISTCOVAR,
 *         "IDEA" : IDEA,
 *         "IRED" : IRED,             # <<<<<<<<<<<<<<
 *         "DIHCOVAR" : DIHCOVAR,
 *         "UNDEFINED" : UNDEFINEDSCALARTYPE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::IRED); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_IRED, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":302
 *         "IDEA" : IDEA,
 *         "IRED" : IRED,
 *         "DIHCOVAR" : DIHCOVAR,             # <<<<<<<<<<<<<<
 *         "UNDEFINED" : UNDEFINEDSCALARTYPE,
 * }
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::DIHCOVAR); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 302; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_DIHCOVAR, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":303
 *         "IRED" : IRED,
 *         "DIHCOVAR" : DIHCOVAR,
 *         "UNDEFINED" : UNDEFINEDSCALARTYPE,             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::UNDEFINED); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_UNDEFINED, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_scalarDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":309
 * #from PDBfile cimport *
 * PDB_RECTYPEDict = {
 *     "ATOM" : ATOMPDB,             # <<<<<<<<<<<<<<
 *     "HETATM" : HETATM,
 *     "CRYST1" : CRYST1,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_PDBfile_3a__3a_PDB_RECTYPE(PDBfile::ATOM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ATOM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":310
 * PDB_RECTYPEDict = {
 *     "ATOM" : ATOMPDB,
 *     "HETATM" : HETATM,             # <<<<<<<<<<<<<<
 *     "CRYST1" : CRYST1,
 *     "TER" : TER,
 */
  __pyx_t_2 = __Pyx_PyInt_From_PDBfile_3a__3a_PDB_RECTYPE(PDBfile::HETATM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_HETATM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":311
 *     "ATOM" : ATOMPDB,
 *     "HETATM" : HETATM,
 *     "CRYST1" : CRYST1,             # <<<<<<<<<<<<<<
 *     "TER" : TER,
 *     "END" : END,
 */
  __pyx_t_2 = __Pyx_PyInt_From_PDBfile_3a__3a_PDB_RECTYPE(PDBfile::CRYST1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CRYST1, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":312
 *     "HETATM" : HETATM,
 *     "CRYST1" : CRYST1,
 *     "TER" : TER,             # <<<<<<<<<<<<<<
 *     "END" : END,
 *     "ANISOU" : ANISOU,
 */
  __pyx_t_2 = __Pyx_PyInt_From_PDBfile_3a__3a_PDB_RECTYPE(PDBfile::TER); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TER, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":313
 *     "CRYST1" : CRYST1,
 *     "TER" : TER,
 *     "END" : END,             # <<<<<<<<<<<<<<
 *     "ANISOU" : ANISOU,
 *     "END_OF_FILE" : END_OF_FILE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_PDBfile_3a__3a_PDB_RECTYPE(PDBfile::END); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_END, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":314
 *     "TER" : TER,
 *     "END" : END,
 *     "ANISOU" : ANISOU,             # <<<<<<<<<<<<<<
 *     "END_OF_FILE" : END_OF_FILE,
 *     "UNKNOWN" : UNKNOWNPDBFILE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_PDBfile_3a__3a_PDB_RECTYPE(PDBfile::ANISOU); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ANISOU, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":315
 *     "END" : END,
 *     "ANISOU" : ANISOU,
 *     "END_OF_FILE" : END_OF_FILE,             # <<<<<<<<<<<<<<
 *     "UNKNOWN" : UNKNOWNPDBFILE,
 *     }
 */
  __pyx_t_2 = __Pyx_PyInt_From_PDBfile_3a__3a_PDB_RECTYPE(PDBfile::END_OF_FILE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_END_OF_FILE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":316
 *     "ANISOU" : ANISOU,
 *     "END_OF_FILE" : END_OF_FILE,
 *     "UNKNOWN" : UNKNOWNPDBFILE,             # <<<<<<<<<<<<<<
 *     }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_PDBfile_3a__3a_PDB_RECTYPE(PDBfile::UNKNOWN); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_UNKNOWN, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PDB_RECTYPEDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":326
 * 
 * RetActionDict = {
 *     "OK" : OKACTION,             # <<<<<<<<<<<<<<
 *     "ERR" : ERRACTION,
 *     "USEORIGINALFRAME" : USEORIGINALFRAME,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_Action_3a__3a_RetType(Action::OK); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_OK, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":327
 * RetActionDict = {
 *     "OK" : OKACTION,
 *     "ERR" : ERRACTION,             # <<<<<<<<<<<<<<
 *     "USEORIGINALFRAME" : USEORIGINALFRAME,
 *     "SUPPRESSCOORDOUTPUT" : SUPPRESSCOORDOUTPUT,
 */
  __pyx_t_2 = __Pyx_PyInt_From_Action_3a__3a_RetType(Action::ERR); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ERR, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":328
 *     "OK" : OKACTION,
 *     "ERR" : ERRACTION,
 *     "USEORIGINALFRAME" : USEORIGINALFRAME,             # <<<<<<<<<<<<<<
 *     "SUPPRESSCOORDOUTPUT" : SUPPRESSCOORDOUTPUT,
 *     }
 */
  __pyx_t_2 = __Pyx_PyInt_From_Action_3a__3a_RetType(Action::USEORIGINALFRAME); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_USEORIGINALFRAME, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":329
 *     "ERR" : ERRACTION,
 *     "USEORIGINALFRAME" : USEORIGINALFRAME,
 *     "SUPPRESSCOORDOUTPUT" : SUPPRESSCOORDOUTPUT,             # <<<<<<<<<<<<<<
 *     }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_Action_3a__3a_RetType(Action::SUPPRESSCOORDOUTPUT); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SUPPRESSCOORDOUTPUT, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RetActionDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":344
 * #from ParmFile cimport *
 * ParmFormatDict = {
 *         "AMBERPARM" : AMBERPARM,             # <<<<<<<<<<<<<<
 *         "PDBFILE" : PDBFILEPARM,
 *         "MOL2FILE" : MOL2FILEPARM,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_ParmFile_3a__3a_ParmFormatType(ParmFile::AMBERPARM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_AMBERPARM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":345
 * ParmFormatDict = {
 *         "AMBERPARM" : AMBERPARM,
 *         "PDBFILE" : PDBFILEPARM,             # <<<<<<<<<<<<<<
 *         "MOL2FILE" : MOL2FILEPARM,
 *         "CHARMMPSF" : CHARMMPSF,
 */
  __pyx_t_2 = __Pyx_PyInt_From_ParmFile_3a__3a_ParmFormatType(ParmFile::PDBFILE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PDBFILE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":346
 *         "AMBERPARM" : AMBERPARM,
 *         "PDBFILE" : PDBFILEPARM,
 *         "MOL2FILE" : MOL2FILEPARM,             # <<<<<<<<<<<<<<
 *         "CHARMMPSF" : CHARMMPSF,
 *         "CIFFILE" : CIFFILE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_ParmFile_3a__3a_ParmFormatType(ParmFile::MOL2FILE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MOL2FILE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":347
 *         "PDBFILE" : PDBFILEPARM,
 *         "MOL2FILE" : MOL2FILEPARM,
 *         "CHARMMPSF" : CHARMMPSF,             # <<<<<<<<<<<<<<
 *         "CIFFILE" : CIFFILE,
 *         "GMXTOP" : GMXTOP,
 */
  __pyx_t_2 = __Pyx_PyInt_From_ParmFile_3a__3a_ParmFormatType(ParmFile::CHARMMPSF); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CHARMMPSF, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":348
 *         "MOL2FILE" : MOL2FILEPARM,
 *         "CHARMMPSF" : CHARMMPSF,
 *         "CIFFILE" : CIFFILE,             # <<<<<<<<<<<<<<
 *         "GMXTOP" : GMXTOP,
 *         "SDFFILE" : SDFFILE,
 */
  __pyx_t_2 = __Pyx_PyInt_From_ParmFile_3a__3a_ParmFormatType(ParmFile::CIFFILE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CIFFILE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":349
 *         "CHARMMPSF" : CHARMMPSF,
 *         "CIFFILE" : CIFFILE,
 *         "GMXTOP" : GMXTOP,             # <<<<<<<<<<<<<<
 *         "SDFFILE" : SDFFILE,
 *         "TINKER" : TINKERPARM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_ParmFile_3a__3a_ParmFormatType(ParmFile::GMXTOP); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 349; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_GMXTOP, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":350
 *         "CIFFILE" : CIFFILE,
 *         "GMXTOP" : GMXTOP,
 *         "SDFFILE" : SDFFILE,             # <<<<<<<<<<<<<<
 *         "TINKER" : TINKERPARM,
 *         "UNKNOWN_PARM" : UNKNOWN_PARM,
 */
  __pyx_t_2 = __Pyx_PyInt_From_ParmFile_3a__3a_ParmFormatType(ParmFile::SDFFILE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SDFFILE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":351
 *         "GMXTOP" : GMXTOP,
 *         "SDFFILE" : SDFFILE,
 *         "TINKER" : TINKERPARM,             # <<<<<<<<<<<<<<
 *         "UNKNOWN_PARM" : UNKNOWN_PARM,
 * }
 */
  __pyx_t_2 = __Pyx_PyInt_From_ParmFile_3a__3a_ParmFormatType(ParmFile::TINKER); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_TINKER, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":352
 *         "SDFFILE" : SDFFILE,
 *         "TINKER" : TINKERPARM,
 *         "UNKNOWN_PARM" : UNKNOWN_PARM,             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ParmFile_3a__3a_ParmFormatType(ParmFile::UNKNOWN_PARM); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_UNKNOWN_PARM, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ParmFormatDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":358
 * #from ClusterList cimport *
 * DistModeDict = {
 *     "USE_FRAMES" : USE_FRAMES,             # <<<<<<<<<<<<<<
 *     "USE_FILE" : USE_FILE,
 *     }
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_ClusterList_3a__3a_DistModeType(ClusterList::USE_FRAMES); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_USE_FRAMES, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":359
 * DistModeDict = {
 *     "USE_FRAMES" : USE_FRAMES,
 *     "USE_FILE" : USE_FILE,             # <<<<<<<<<<<<<<
 *     }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_ClusterList_3a__3a_DistModeType(ClusterList::USE_FILE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_USE_FILE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DistModeDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":365
 * #from ClusterList cimport *
 * DistMetricDict = {
 *     "RMS" : RMS,             # <<<<<<<<<<<<<<
 *     "DME" : DME,
 *     "SRMSD" : SRMSD,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_ClusterList_3a__3a_DistMetricType(ClusterList::RMS); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RMS, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":366
 * DistMetricDict = {
 *     "RMS" : RMS,
 *     "DME" : DME,             # <<<<<<<<<<<<<<
 *     "SRMSD" : SRMSD,
 *     "DATA" : DATA,
 */
  __pyx_t_2 = __Pyx_PyInt_From_ClusterList_3a__3a_DistMetricType(ClusterList::DME); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_DME, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":367
 *     "RMS" : RMS,
 *     "DME" : DME,
 *     "SRMSD" : SRMSD,             # <<<<<<<<<<<<<<
 *     "DATA" : DATA,
 *     }
 */
  __pyx_t_2 = __Pyx_PyInt_From_ClusterList_3a__3a_DistMetricType(ClusterList::SRMSD); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SRMSD, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":368
 *     "DME" : DME,
 *     "SRMSD" : SRMSD,
 *     "DATA" : DATA,             # <<<<<<<<<<<<<<
 *     }
 * # GridAction
 */
  __pyx_t_2 = __Pyx_PyInt_From_ClusterList_3a__3a_DistMetricType(ClusterList::DATA); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_DATA, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DistMetricDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":373
 * ##from GridAction cimport *
 * GridModeDict = {
 *     "ORIGIN" : ORIGIN,             # <<<<<<<<<<<<<<
 *     "BOX" : BOX,
 *     "MASKCENTER" : MASKCENTER,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_GridAction_3a__3a_GridModeType(GridAction::ORIGIN); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ORIGIN, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":374
 * GridModeDict = {
 *     "ORIGIN" : ORIGIN,
 *     "BOX" : BOX,             # <<<<<<<<<<<<<<
 *     "MASKCENTER" : MASKCENTER,
 *     "SPECIFIEDCENTER" : SPECIFIEDCENTER,
 */
  __pyx_t_2 = __Pyx_PyInt_From_GridAction_3a__3a_GridModeType(GridAction::BOX); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_BOX, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":375
 *     "ORIGIN" : ORIGIN,
 *     "BOX" : BOX,
 *     "MASKCENTER" : MASKCENTER,             # <<<<<<<<<<<<<<
 *     "SPECIFIEDCENTER" : SPECIFIEDCENTER,
 *     }
 */
  __pyx_t_2 = __Pyx_PyInt_From_GridAction_3a__3a_GridModeType(GridAction::MASKCENTER); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_MASKCENTER, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":376
 *     "BOX" : BOX,
 *     "MASKCENTER" : MASKCENTER,
 *     "SPECIFIEDCENTER" : SPECIFIEDCENTER,             # <<<<<<<<<<<<<<
 *     }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_GridAction_3a__3a_GridModeType(GridAction::SPECIFIEDCENTER); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_SPECIFIEDCENTER, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_GridModeDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 372; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":391
 * #from TrajinList cimport *
 * TrajModeDict = {
 *     "UNDEFINED" : UNDEFINEDTRAJINLIST,             # <<<<<<<<<<<<<<
 *     "NORMAL" : NORMAL,
 *     "ENSEMBLE" : ENSEMBLE,
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_TrajinList_3a__3a_TrajModeType(TrajinList::UNDEFINED); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_UNDEFINED, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":392
 * TrajModeDict = {
 *     "UNDEFINED" : UNDEFINEDTRAJINLIST,
 *     "NORMAL" : NORMAL,             # <<<<<<<<<<<<<<
 *     "ENSEMBLE" : ENSEMBLE,
 *     }
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajinList_3a__3a_TrajModeType(TrajinList::NORMAL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 392; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_NORMAL, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/cpptraj_dict.pyx":393
 *     "UNDEFINED" : UNDEFINEDTRAJINLIST,
 *     "NORMAL" : NORMAL,
 *     "ENSEMBLE" : ENSEMBLE,             # <<<<<<<<<<<<<<
 *     }
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_TrajinList_3a__3a_TrajModeType(TrajinList::ENSEMBLE); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ENSEMBLE, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TrajModeDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/cpptraj_dict.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * 
 * # need to check if cpptraj updates new enum values
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pytraj.cpptraj_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pytraj.cpptraj_dict");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject* args = PyTuple_Pack(1, arg);
    return (likely(args)) ? __Pyx_PyObject_Call(func, args, NULL) : NULL;
}
#endif

static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *function = PyMethod_GET_FUNCTION(method);
            result = __Pyx_PyObject_CallOneArg(function, self);
            Py_DECREF(method);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

static CYTHON_INLINE int __Pyx_unpack_tuple2(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                             int is_tuple, int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    if (!is_tuple && unlikely(!PyTuple_Check(tuple))) {
        iternextfunc iternext;
        iter = PyObject_GetIter(tuple);
        if (unlikely(!iter)) goto bad;
        if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
        iternext = Py_TYPE(iter)->tp_iternext;
        value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
        value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
        if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
        Py_DECREF(iter);
    } else {
        if (!has_known_size && unlikely(PyTuple_GET_SIZE(tuple) != 2)) {
            __Pyx_UnpackTupleError(tuple, 2);
            goto bad;
        }
#if CYTHON_COMPILING_IN_PYPY
        value1 = PySequence_ITEM(tuple, 0);
        if (unlikely(!value1)) goto bad;
        value2 = PySequence_ITEM(tuple, 1);
        if (unlikely(!value2)) goto bad;
#else
        value1 = PyTuple_GET_ITEM(tuple, 0);
        value2 = PyTuple_GET_ITEM(tuple, 1);
        Py_INCREF(value1);
        Py_INCREF(value2);
#endif
        if (decref_tuple) { Py_DECREF(tuple); }
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
#if !CYTHON_COMPILING_IN_PYPY
    if (is_dict) {
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#endif
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Traj_PDBfile_3a__3a_PDBWRITEMODE(Traj_PDBfile::PDBWRITEMODE value) {
    const Traj_PDBfile::PDBWRITEMODE neg_one = (Traj_PDBfile::PDBWRITEMODE) -1, const_zero = (Traj_PDBfile::PDBWRITEMODE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Traj_PDBfile::PDBWRITEMODE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Traj_PDBfile::PDBWRITEMODE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(Traj_PDBfile::PDBWRITEMODE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(Traj_PDBfile::PDBWRITEMODE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Traj_PDBfile::PDBWRITEMODE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Traj_PDBfile::PDBWRITEMODE),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_CpptrajFile_3a__3a_AccessType(CpptrajFile::AccessType value) {
    const CpptrajFile::AccessType neg_one = (CpptrajFile::AccessType) -1, const_zero = (CpptrajFile::AccessType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(CpptrajFile::AccessType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(CpptrajFile::AccessType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(CpptrajFile::AccessType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(CpptrajFile::AccessType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(CpptrajFile::AccessType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(CpptrajFile::AccessType),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_CpptrajFile_3a__3a_CompressType(CpptrajFile::CompressType value) {
    const CpptrajFile::CompressType neg_one = (CpptrajFile::CompressType) -1, const_zero = (CpptrajFile::CompressType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(CpptrajFile::CompressType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(CpptrajFile::CompressType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(CpptrajFile::CompressType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(CpptrajFile::CompressType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(CpptrajFile::CompressType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(CpptrajFile::CompressType),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_CpptrajFile_3a__3a_FileType(CpptrajFile::FileType value) {
    const CpptrajFile::FileType neg_one = (CpptrajFile::FileType) -1, const_zero = (CpptrajFile::FileType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(CpptrajFile::FileType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(CpptrajFile::FileType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(CpptrajFile::FileType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(CpptrajFile::FileType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(CpptrajFile::FileType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(CpptrajFile::FileType),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_MaskToken_3a__3a_MaskTokenType(MaskToken::MaskTokenType value) {
    const MaskToken::MaskTokenType neg_one = (MaskToken::MaskTokenType) -1, const_zero = (MaskToken::MaskTokenType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(MaskToken::MaskTokenType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(MaskToken::MaskTokenType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(MaskToken::MaskTokenType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(MaskToken::MaskTokenType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(MaskToken::MaskTokenType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(MaskToken::MaskTokenType),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Atom_3a__3a_AtomicElementType(Atom::AtomicElementType value) {
    const Atom::AtomicElementType neg_one = (Atom::AtomicElementType) -1, const_zero = (Atom::AtomicElementType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Atom::AtomicElementType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Atom::AtomicElementType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(Atom::AtomicElementType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(Atom::AtomicElementType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Atom::AtomicElementType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Atom::AtomicElementType),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Traj_Mol2File_3a__3a_MOL2WRITEMODE(Traj_Mol2File::MOL2WRITEMODE value) {
    const Traj_Mol2File::MOL2WRITEMODE neg_one = (Traj_Mol2File::MOL2WRITEMODE) -1, const_zero = (Traj_Mol2File::MOL2WRITEMODE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Traj_Mol2File::MOL2WRITEMODE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Traj_Mol2File::MOL2WRITEMODE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(Traj_Mol2File::MOL2WRITEMODE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(Traj_Mol2File::MOL2WRITEMODE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Traj_Mol2File::MOL2WRITEMODE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Traj_Mol2File::MOL2WRITEMODE),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_DataFile_3a__3a_DataFormatType(DataFile::DataFormatType value) {
    const DataFile::DataFormatType neg_one = (DataFile::DataFormatType) -1, const_zero = (DataFile::DataFormatType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(DataFile::DataFormatType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(DataFile::DataFormatType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(DataFile::DataFormatType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(DataFile::DataFormatType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(DataFile::DataFormatType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(DataFile::DataFormatType),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Cluster_HierAgglo_3a__3a_LINKAGETYPE(Cluster_HierAgglo::LINKAGETYPE value) {
    const Cluster_HierAgglo::LINKAGETYPE neg_one = (Cluster_HierAgglo::LINKAGETYPE) -1, const_zero = (Cluster_HierAgglo::LINKAGETYPE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Cluster_HierAgglo::LINKAGETYPE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Cluster_HierAgglo::LINKAGETYPE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(Cluster_HierAgglo::LINKAGETYPE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(Cluster_HierAgglo::LINKAGETYPE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Cluster_HierAgglo::LINKAGETYPE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Cluster_HierAgglo::LINKAGETYPE),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Mol2File_3a__3a_TRIPOSTAG(Mol2File::TRIPOSTAG value) {
    const Mol2File::TRIPOSTAG neg_one = (Mol2File::TRIPOSTAG) -1, const_zero = (Mol2File::TRIPOSTAG) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Mol2File::TRIPOSTAG) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Mol2File::TRIPOSTAG) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(Mol2File::TRIPOSTAG) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(Mol2File::TRIPOSTAG) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Mol2File::TRIPOSTAG) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Mol2File::TRIPOSTAG),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ReplicaDimArray_3a__3a_RemDimType(ReplicaDimArray::RemDimType value) {
    const ReplicaDimArray::RemDimType neg_one = (ReplicaDimArray::RemDimType) -1, const_zero = (ReplicaDimArray::RemDimType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ReplicaDimArray::RemDimType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ReplicaDimArray::RemDimType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(ReplicaDimArray::RemDimType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(ReplicaDimArray::RemDimType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ReplicaDimArray::RemDimType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ReplicaDimArray::RemDimType),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Box_3a__3a_BoxType(Box::BoxType value) {
    const Box::BoxType neg_one = (Box::BoxType) -1, const_zero = (Box::BoxType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Box::BoxType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Box::BoxType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(Box::BoxType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(Box::BoxType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Box::BoxType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Box::BoxType),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_TrajectoryFile_3a__3a_TrajFormatType(TrajectoryFile::TrajFormatType value) {
    const TrajectoryFile::TrajFormatType neg_one = (TrajectoryFile::TrajFormatType) -1, const_zero = (TrajectoryFile::TrajFormatType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(TrajectoryFile::TrajFormatType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(TrajectoryFile::TrajFormatType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(TrajectoryFile::TrajFormatType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(TrajectoryFile::TrajFormatType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(TrajectoryFile::TrajFormatType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(TrajectoryFile::TrajFormatType),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_DataSet_3a__3a_DataType(DataSet::DataType value) {
    const DataSet::DataType neg_one = (DataSet::DataType) -1, const_zero = (DataSet::DataType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(DataSet::DataType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(DataSet::DataType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(DataSet::DataType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(DataSet::DataType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(DataSet::DataType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(DataSet::DataType),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_DataSet_3a__3a_scalarMode(DataSet::scalarMode value) {
    const DataSet::scalarMode neg_one = (DataSet::scalarMode) -1, const_zero = (DataSet::scalarMode) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(DataSet::scalarMode) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(DataSet::scalarMode) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(DataSet::scalarMode) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(DataSet::scalarMode) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(DataSet::scalarMode) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(DataSet::scalarMode),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_DataSet_3a__3a_scalarType(DataSet::scalarType value) {
    const DataSet::scalarType neg_one = (DataSet::scalarType) -1, const_zero = (DataSet::scalarType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(DataSet::scalarType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(DataSet::scalarType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(DataSet::scalarType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(DataSet::scalarType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(DataSet::scalarType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(DataSet::scalarType),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_PDBfile_3a__3a_PDB_RECTYPE(PDBfile::PDB_RECTYPE value) {
    const PDBfile::PDB_RECTYPE neg_one = (PDBfile::PDB_RECTYPE) -1, const_zero = (PDBfile::PDB_RECTYPE) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(PDBfile::PDB_RECTYPE) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(PDBfile::PDB_RECTYPE) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(PDBfile::PDB_RECTYPE) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(PDBfile::PDB_RECTYPE) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(PDBfile::PDB_RECTYPE) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(PDBfile::PDB_RECTYPE),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Action_3a__3a_RetType(Action::RetType value) {
    const Action::RetType neg_one = (Action::RetType) -1, const_zero = (Action::RetType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Action::RetType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Action::RetType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(Action::RetType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(Action::RetType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Action::RetType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Action::RetType),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ParmFile_3a__3a_ParmFormatType(ParmFile::ParmFormatType value) {
    const ParmFile::ParmFormatType neg_one = (ParmFile::ParmFormatType) -1, const_zero = (ParmFile::ParmFormatType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ParmFile::ParmFormatType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ParmFile::ParmFormatType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(ParmFile::ParmFormatType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(ParmFile::ParmFormatType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ParmFile::ParmFormatType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ParmFile::ParmFormatType),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ClusterList_3a__3a_DistModeType(ClusterList::DistModeType value) {
    const ClusterList::DistModeType neg_one = (ClusterList::DistModeType) -1, const_zero = (ClusterList::DistModeType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ClusterList::DistModeType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ClusterList::DistModeType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(ClusterList::DistModeType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(ClusterList::DistModeType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ClusterList::DistModeType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ClusterList::DistModeType),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ClusterList_3a__3a_DistMetricType(ClusterList::DistMetricType value) {
    const ClusterList::DistMetricType neg_one = (ClusterList::DistMetricType) -1, const_zero = (ClusterList::DistMetricType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ClusterList::DistMetricType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ClusterList::DistMetricType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(ClusterList::DistMetricType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(ClusterList::DistMetricType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ClusterList::DistMetricType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ClusterList::DistMetricType),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_GridAction_3a__3a_GridModeType(GridAction::GridModeType value) {
    const GridAction::GridModeType neg_one = (GridAction::GridModeType) -1, const_zero = (GridAction::GridModeType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(GridAction::GridModeType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(GridAction::GridModeType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(GridAction::GridModeType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(GridAction::GridModeType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(GridAction::GridModeType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(GridAction::GridModeType),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_TrajinList_3a__3a_TrajModeType(TrajinList::TrajModeType value) {
    const TrajinList::TrajModeType neg_one = (TrajinList::TrajModeType) -1, const_zero = (TrajinList::TrajModeType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(TrajinList::TrajModeType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(TrajinList::TrajModeType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(TrajinList::TrajModeType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(TrajinList::TrajModeType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(TrajinList::TrajModeType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(TrajinList::TrajModeType),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
#endif

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) -(((((long)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) -(((((((long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) -(((((((((long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) -(((((int)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) -(((((((int)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) -(((((((((int)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
